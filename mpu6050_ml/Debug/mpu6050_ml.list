
mpu6050_ml.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007f38  08007f38  00008f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800838c  0800838c  0000a254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800838c  0800838c  0000938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008394  08008394  0000a254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008398  08008398  00009398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800839c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         0000007c  200001d8  08008574  0000a1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000124c  20000254  080085f0  0000a254  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200014a0  080085f0  0000a4a0  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000a254  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099f5  00000000  00000000  0000a27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000182f  00000000  00000000  00013c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  000154a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000783  00000000  00000000  00015e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017de3  00000000  00000000  000165cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdd7  00000000  00000000  0002e3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000866a7  00000000  00000000  0003a185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000087  00000000  00000000  000c082c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bac  00000000  00000000  000c08b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000c4460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000254 	.word	0x20000254
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f20 	.word	0x08007f20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000258 	.word	0x20000258
 800014c:	08007f20 	.word	0x08007f20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <MPU6050_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void MPU6050_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	2301      	movs	r3, #1
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	2275      	movs	r2, #117	@ 0x75
 8001154:	21d0      	movs	r1, #208	@ 0xd0
 8001156:	4823      	ldr	r0, [pc, #140]	@ (80011e4 <MPU6050_Init+0xa8>)
 8001158:	f001 f9c4 	bl	80024e4 <HAL_I2C_Mem_Read>
	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b68      	cmp	r3, #104	@ 0x68
 8001160:	d13b      	bne.n	80011da <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1,&Data, 1, 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	226b      	movs	r2, #107	@ 0x6b
 8001178:	21d0      	movs	r1, #208	@ 0xd0
 800117a:	481a      	ldr	r0, [pc, #104]	@ (80011e4 <MPU6050_Init+0xa8>)
 800117c:	f001 f8b8 	bl	80022f0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001180:	2307      	movs	r3, #7
 8001182:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2219      	movs	r2, #25
 8001196:	21d0      	movs	r1, #208	@ 0xd0
 8001198:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <MPU6050_Init+0xa8>)
 800119a:	f001 f8a9 	bl	80022f0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 800119e:	2300      	movs	r3, #0
 80011a0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	221b      	movs	r2, #27
 80011b4:	21d0      	movs	r1, #208	@ 0xd0
 80011b6:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <MPU6050_Init+0xa8>)
 80011b8:	f001 f89a 	bl	80022f0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 80011bc:	2300      	movs	r3, #0
 80011be:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	221c      	movs	r2, #28
 80011d2:	21d0      	movs	r1, #208	@ 0xd0
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MPU6050_Init+0xa8>)
 80011d6:	f001 f88b 	bl	80022f0 <HAL_I2C_Mem_Write>
	}

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000270 	.word	0x20000270

080011e8 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2306      	movs	r3, #6
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	463b      	mov	r3, r7
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	223b      	movs	r2, #59	@ 0x3b
 8001200:	21d0      	movs	r1, #208	@ 0xd0
 8001202:	482a      	ldr	r0, [pc, #168]	@ (80012ac <MPU6050_Read_Accel+0xc4>)
 8001204:	f001 f96e 	bl	80024e4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001208:	783b      	ldrb	r3, [r7, #0]
 800120a:	b21b      	sxth	r3, r3
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <MPU6050_Read_Accel+0xc8>)
 800121a:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800121c:	78bb      	ldrb	r3, [r7, #2]
 800121e:	b21b      	sxth	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <MPU6050_Read_Accel+0xcc>)
 800122e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001230:	793b      	ldrb	r3, [r7, #4]
 8001232:	b21b      	sxth	r3, r3
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	797b      	ldrb	r3, [r7, #5]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MPU6050_Read_Accel+0xd0>)
 8001242:	801a      	strh	r2, [r3, #0]
	// convert the RAW values into acceleration in 'g'
	// we have to divide according to the Full scale value set in FS_SEL
	// I have configured FS_SEL = 0. So I am dividing by 16384.0
	// for more details check ACCEL_CONFIG Register

	Ax = (float)Accel_X_RAW/16384.0;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MPU6050_Read_Accel+0xc8>)
 8001246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd26 	bl	8000c9c <__aeabi_i2f>
 8001250:	4603      	mov	r3, r0
 8001252:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fe28 	bl	8000eac <__aeabi_fdiv>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MPU6050_Read_Accel+0xd4>)
 8001262:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <MPU6050_Read_Accel+0xcc>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd16 	bl	8000c9c <__aeabi_i2f>
 8001270:	4603      	mov	r3, r0
 8001272:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe18 	bl	8000eac <__aeabi_fdiv>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MPU6050_Read_Accel+0xd8>)
 8001282:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MPU6050_Read_Accel+0xd0>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fd06 	bl	8000c9c <__aeabi_i2f>
 8001290:	4603      	mov	r3, r0
 8001292:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe08 	bl	8000eac <__aeabi_fdiv>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MPU6050_Read_Accel+0xdc>)
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000270 	.word	0x20000270
 80012b0:	20000f0e 	.word	0x20000f0e
 80012b4:	20000f10 	.word	0x20000f10
 80012b8:	20000f12 	.word	0x20000f12
 80012bc:	20000f14 	.word	0x20000f14
 80012c0:	20000f18 	.word	0x20000f18
 80012c4:	20000f1c 	.word	0x20000f1c

080012c8 <fill_buffer>:

void fill_buffer(float input_buffer[])
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for (i = 0; i < (DATA_INPUT_USER * AXIS_NUMBER); i += 3)
 80012d0:	2300      	movs	r3, #0
 80012d2:	81fb      	strh	r3, [r7, #14]
 80012d4:	e01e      	b.n	8001314 <fill_buffer+0x4c>
    {
        MPU6050_Read_Accel();  // Lê os valores do acelerômetro
 80012d6:	f7ff ff87 	bl	80011e8 <MPU6050_Read_Accel>

        input_buffer[i] = Ax;     // X
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <fill_buffer+0x60>)
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	601a      	str	r2, [r3, #0]
        input_buffer[i + 1] = Ay; // Y
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	3301      	adds	r3, #1
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <fill_buffer+0x64>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	601a      	str	r2, [r3, #0]
        input_buffer[i + 2] = Az; // Z
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	3302      	adds	r3, #2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <fill_buffer+0x68>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	601a      	str	r2, [r3, #0]

        HAL_Delay(10);  // Pequeno delay para controle da taxa de amostragem
 8001308:	200a      	movs	r0, #10
 800130a:	f000 fc09 	bl	8001b20 <HAL_Delay>
    for (i = 0; i < (DATA_INPUT_USER * AXIS_NUMBER); i += 3)
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	3303      	adds	r3, #3
 8001312:	81fb      	strh	r3, [r7, #14]
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800131a:	d3dc      	bcc.n	80012d6 <fill_buffer+0xe>
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000f14 	.word	0x20000f14
 800132c:	20000f18 	.word	0x20000f18
 8001330:	20000f1c 	.word	0x20000f1c

08001334 <_write>:

int _write(int fd, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	b29a      	uxth	r2, r3
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	4804      	ldr	r0, [pc, #16]	@ (800135c <_write+0x28>)
 800134c:	f002 fb52 	bl	80039f4 <HAL_UART_Transmit>
    return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002c4 	.word	0x200002c4

08001360 <LED_Control>:

void LED_Control(uint8_t status)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
    if (status)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <LED_Control+0x1c>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);  // Acende o LED
 8001370:	2201      	movs	r2, #1
 8001372:	2104      	movs	r1, #4
 8001374:	4806      	ldr	r0, [pc, #24]	@ (8001390 <LED_Control+0x30>)
 8001376:	f000 fe5f 	bl	8002038 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // Apaga o LED
    }
}
 800137a:	e004      	b.n	8001386 <LED_Control+0x26>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // Apaga o LED
 800137c:	2200      	movs	r2, #0
 800137e:	2104      	movs	r1, #4
 8001380:	4803      	ldr	r0, [pc, #12]	@ (8001390 <LED_Control+0x30>)
 8001382:	f000 fe59 	bl	8002038 <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40010c00 	.word	0x40010c00

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b09c      	sub	sp, #112	@ 0x70
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f000 fb5f 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f8b5 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 f951 	bl	8001648 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013a6:	f000 f8f7 	bl	8001598 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013aa:	f000 f923 	bl	80015f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(); // Inicializa o MPU6050
 80013ae:	f7ff fec5 	bl	800113c <MPU6050_Init>

  char test_msg[] = "MPU6050 Inicializado\nIniciando o modelo de deteccao...\n";
 80013b2:	4b4e      	ldr	r3, [pc, #312]	@ (80014ec <main+0x158>)
 80013b4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80013b8:	461d      	mov	r5, r3
 80013ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013ca:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 80013ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe febc 	bl	8000150 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	4842      	ldr	r0, [pc, #264]	@ (80014f0 <main+0x15c>)
 80013e6:	f002 fb05 	bl	80039f4 <HAL_UART_Transmit>
  // Inicialização do modelo NanoEdge AI
  enum neai_state error_code;
  error_code = neai_anomalydetection_init();
 80013ea:	f003 fdc9 	bl	8004f80 <neai_anomalydetection_init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  if (error_code != NEAI_OK)
 80013f4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d016      	beq.n	800142a <main+0x96>
  {
      char error_msg[] = "Erro na inicializacao do modelo!\n";
 80013fc:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <main+0x160>)
 80013fe:	463c      	mov	r4, r7
 8001400:	461d      	mov	r5, r3
 8001402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	682b      	ldr	r3, [r5, #0]
 800140c:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800140e:	463b      	mov	r3, r7
 8001410:	4618      	mov	r0, r3
 8001412:	f7fe fe9d 	bl	8000150 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	4639      	mov	r1, r7
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	4833      	ldr	r0, [pc, #204]	@ (80014f0 <main+0x15c>)
 8001422:	f002 fae7 	bl	80039f4 <HAL_UART_Transmit>
      Error_Handler();
 8001426:	f000 f959 	bl	80016dc <Error_Handler>
  }

  for (uint16_t iteration = 0; iteration < LEARNING_ITERATIONS; iteration++)
 800142a:	2300      	movs	r3, #0
 800142c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001430:	e00a      	b.n	8001448 <main+0xb4>
  {
      fill_buffer(input_user_buffer);
 8001432:	4831      	ldr	r0, [pc, #196]	@ (80014f8 <main+0x164>)
 8001434:	f7ff ff48 	bl	80012c8 <fill_buffer>
      neai_anomalydetection_learn(input_user_buffer);
 8001438:	482f      	ldr	r0, [pc, #188]	@ (80014f8 <main+0x164>)
 800143a:	f002 fd17 	bl	8003e6c <neai_anomalydetection_learn>
  for (uint16_t iteration = 0; iteration < LEARNING_ITERATIONS; iteration++)
 800143e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001442:	3301      	adds	r3, #1
 8001444:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001448:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800144c:	2b13      	cmp	r3, #19
 800144e:	d9f0      	bls.n	8001432 <main+0x9e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fill_buffer(input_user_buffer);
 8001450:	4829      	ldr	r0, [pc, #164]	@ (80014f8 <main+0x164>)
 8001452:	f7ff ff39 	bl	80012c8 <fill_buffer>
	  enum neai_state detect_result = neai_anomalydetection_detect(input_user_buffer, &similarity);
 8001456:	4929      	ldr	r1, [pc, #164]	@ (80014fc <main+0x168>)
 8001458:	4827      	ldr	r0, [pc, #156]	@ (80014f8 <main+0x164>)
 800145a:	f003 fa89 	bl	8004970 <neai_anomalydetection_detect>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	  if (detect_result != NEAI_OK)
 8001464:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d016      	beq.n	800149a <main+0x106>
	  {
		  char error_msg[] = "Erro na deteccao de anomalias!\n";
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <main+0x16c>)
 800146e:	463c      	mov	r4, r7
 8001470:	461d      	mov	r5, r3
 8001472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001476:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800147a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      HAL_UART_Transmit(&huart1, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800147e:	463b      	mov	r3, r7
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fe65 	bl	8000150 <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	4639      	mov	r1, r7
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	4817      	ldr	r0, [pc, #92]	@ (80014f0 <main+0x15c>)
 8001492:	f002 faaf 	bl	80039f4 <HAL_UART_Transmit>
	      Error_Handler();
 8001496:	f000 f921 	bl	80016dc <Error_Handler>
	  }

	  // Verifica se há uma anomalia
	  char result_msg[50];
	  if (similarity < 70)
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <main+0x168>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b45      	cmp	r3, #69	@ 0x45
 80014a0:	d80a      	bhi.n	80014b8 <main+0x124>
	  {
		  LED_Control(1);  // Liga o LED
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff ff5c 	bl	8001360 <LED_Control>
		  snprintf(result_msg, sizeof(result_msg), "ANOMALIA DETECTADA! Sim: %d\n", similarity);
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <main+0x168>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4638      	mov	r0, r7
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <main+0x170>)
 80014b0:	2132      	movs	r1, #50	@ 0x32
 80014b2:	f004 faeb 	bl	8005a8c <sniprintf>
 80014b6:	e009      	b.n	80014cc <main+0x138>
	  }
	  else
	  {
		  LED_Control(0);  // Desliga o LED
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ff51 	bl	8001360 <LED_Control>
		  snprintf(result_msg, sizeof(result_msg), "NORMAL. Sim: %d\n", similarity);
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <main+0x168>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4638      	mov	r0, r7
 80014c4:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <main+0x174>)
 80014c6:	2132      	movs	r1, #50	@ 0x32
 80014c8:	f004 fae0 	bl	8005a8c <sniprintf>
	  }

	  HAL_UART_Transmit(&huart1, (uint8_t*)result_msg, strlen(result_msg), HAL_MAX_DELAY);
 80014cc:	463b      	mov	r3, r7
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe3e 	bl	8000150 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4639      	mov	r1, r7
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <main+0x15c>)
 80014e0:	f002 fa88 	bl	80039f4 <HAL_UART_Transmit>

	  HAL_Delay(50);
 80014e4:	2032      	movs	r0, #50	@ 0x32
 80014e6:	f000 fb1b 	bl	8001b20 <HAL_Delay>
  {
 80014ea:	e7b1      	b.n	8001450 <main+0xbc>
 80014ec:	08007f6c 	.word	0x08007f6c
 80014f0:	200002c4 	.word	0x200002c4
 80014f4:	08007fa4 	.word	0x08007fa4
 80014f8:	2000030c 	.word	0x2000030c
 80014fc:	20000f0c 	.word	0x20000f0c
 8001500:	08007fc8 	.word	0x08007fc8
 8001504:	08007f38 	.word	0x08007f38
 8001508:	08007f58 	.word	0x08007f58

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b090      	sub	sp, #64	@ 0x40
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	2228      	movs	r2, #40	@ 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fb2f 	bl	8005b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152e:	2301      	movs	r3, #1
 8001530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001536:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001540:	2302      	movs	r3, #2
 8001542:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001548:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800154a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800154e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fded 	bl	8003134 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001560:	f000 f8bc 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2102      	movs	r1, #2
 800157e:	4618      	mov	r0, r3
 8001580:	f002 f85a 	bl	8003638 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800158a:	f000 f8a7 	bl	80016dc <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3740      	adds	r7, #64	@ 0x40
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <MX_I2C1_Init+0x50>)
 800159e:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <MX_I2C1_Init+0x54>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015a4:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <MX_I2C1_Init+0x58>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015d6:	f000 fd47 	bl	8002068 <HAL_I2C_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e0:	f000 f87c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000270 	.word	0x20000270
 80015ec:	40005400 	.word	0x40005400
 80015f0:	00061a80 	.word	0x00061a80

080015f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <MX_USART1_UART_Init+0x50>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 800162c:	f002 f992 	bl	8003954 <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001636:	f000 f851 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002c4 	.word	0x200002c4
 8001644:	40013800 	.word	0x40013800

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a16      	ldr	r2, [pc, #88]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a10      	ldr	r2, [pc, #64]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_GPIO_Init+0x8c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2104      	movs	r1, #4
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <MX_GPIO_Init+0x90>)
 80016aa:	f000 fcc5 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016ae:	2304      	movs	r3, #4
 80016b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4619      	mov	r1, r3
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_GPIO_Init+0x90>)
 80016c6:	f000 fb33 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010c00 	.word	0x40010c00

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <Error_Handler+0x8>

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_MspInit+0x5c>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	4a14      	ldr	r2, [pc, #80]	@ (8001744 <HAL_MspInit+0x5c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6193      	str	r3, [r2, #24]
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_MspInit+0x5c>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_MspInit+0x5c>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_MspInit+0x5c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_MspInit+0x5c>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_MspInit+0x60>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <HAL_MspInit+0x60>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000

0800174c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a15      	ldr	r2, [pc, #84]	@ (80017bc <HAL_I2C_MspInit+0x70>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d123      	bne.n	80017b4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <HAL_I2C_MspInit+0x74>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a13      	ldr	r2, [pc, #76]	@ (80017c0 <HAL_I2C_MspInit+0x74>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <HAL_I2C_MspInit+0x74>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001784:	23c0      	movs	r3, #192	@ 0xc0
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <HAL_I2C_MspInit+0x78>)
 8001798:	f000 faca 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_I2C_MspInit+0x74>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_I2C_MspInit+0x74>)
 80017a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017a6:	61d3      	str	r3, [r2, #28]
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_I2C_MspInit+0x74>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010c00 	.word	0x40010c00

080017c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <HAL_UART_MspInit+0x8c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d131      	bne.n	800184c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_UART_MspInit+0x90>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001858 <HAL_UART_MspInit+0x90>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <HAL_UART_MspInit+0x90>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_UART_MspInit+0x90>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <HAL_UART_MspInit+0x90>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_UART_MspInit+0x90>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800181c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	@ (800185c <HAL_UART_MspInit+0x94>)
 800182e:	f000 fa7f 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_UART_MspInit+0x94>)
 8001848:	f000 fa72 	bl	8001d30 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013800 	.word	0x40013800
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <NMI_Handler+0x4>

08001868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <MemManage_Handler+0x4>

08001878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <UsageFault_Handler+0x4>

08001888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 f91a 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <_kill>:

int _kill(int pid, int sig)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d0:	f004 f9a8 	bl	8005c24 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2216      	movs	r2, #22
 80018d8:	601a      	str	r2, [r3, #0]
  return -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_exit>:

void _exit (int status)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ee:	f04f 31ff 	mov.w	r1, #4294967295
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffe7 	bl	80018c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <_exit+0x12>

080018fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e00a      	b.n	8001924 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800190e:	f3af 8000 	nop.w
 8001912:	4601      	mov	r1, r0
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	b2ca      	uxtb	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf0      	blt.n	800190e <_read+0x12>
  }

  return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800195c:	605a      	str	r2, [r3, #4]
  return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <_isatty>:

int _isatty(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f004 f92c 	bl	8005c24 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20005000 	.word	0x20005000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	20000f20 	.word	0x20000f20
 8001a00:	200014a0 	.word	0x200014a0

08001a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff fff8 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480b      	ldr	r0, [pc, #44]	@ (8001a44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a16:	490c      	ldr	r1, [pc, #48]	@ (8001a48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a18:	4a0c      	ldr	r2, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a2c:	4c09      	ldr	r4, [pc, #36]	@ (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f004 f8f9 	bl	8005c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a3e:	f7ff fca9 	bl	8001394 <main>
  bx lr
 8001a42:	4770      	bx	lr
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a4c:	0800839c 	.word	0x0800839c
  ldr r2, =_sbss
 8001a50:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8001a54:	200014a0 	.word	0x200014a0

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <HAL_Init+0x28>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	@ (8001a84 <HAL_Init+0x28>)
 8001a66:	f043 0310 	orr.w	r3, r3, #16
 8001a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f92b 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	200f      	movs	r0, #15
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fe36 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f935 	bl	8001d16 <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f90b 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	@ (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_IncTick+0x1c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_IncTick+0x20>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a03      	ldr	r2, [pc, #12]	@ (8001b08 <HAL_IncTick+0x20>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000f24 	.word	0x20000f24

08001b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b02      	ldr	r3, [pc, #8]	@ (8001b1c <HAL_GetTick+0x10>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000f24 	.word	0x20000f24

08001b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_GetTick>
 8001b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d005      	beq.n	8001b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <HAL_Delay+0x44>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b46:	bf00      	nop
 8001b48:	f7ff ffe0 	bl	8001b0c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d8f7      	bhi.n	8001b48 <HAL_Delay+0x28>
  {
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff90 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff49 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff5e 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff90 	bl	8001c20 <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5f 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb0 	bl	8001c84 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b08b      	sub	sp, #44	@ 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e169      	b.n	8002018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d44:	2201      	movs	r2, #1
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8158 	bne.w	8002012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a9a      	ldr	r2, [pc, #616]	@ (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d05e      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d6c:	4a98      	ldr	r2, [pc, #608]	@ (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d875      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d72:	4a98      	ldr	r2, [pc, #608]	@ (8001fd4 <HAL_GPIO_Init+0x2a4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d058      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d78:	4a96      	ldr	r2, [pc, #600]	@ (8001fd4 <HAL_GPIO_Init+0x2a4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d86f      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d7e:	4a96      	ldr	r2, [pc, #600]	@ (8001fd8 <HAL_GPIO_Init+0x2a8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d052      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d84:	4a94      	ldr	r2, [pc, #592]	@ (8001fd8 <HAL_GPIO_Init+0x2a8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d869      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d8a:	4a94      	ldr	r2, [pc, #592]	@ (8001fdc <HAL_GPIO_Init+0x2ac>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04c      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d90:	4a92      	ldr	r2, [pc, #584]	@ (8001fdc <HAL_GPIO_Init+0x2ac>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d863      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d96:	4a92      	ldr	r2, [pc, #584]	@ (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d046      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a90      	ldr	r2, [pc, #576]	@ (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d85d      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d82a      	bhi.n	8001dfc <HAL_GPIO_Init+0xcc>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d859      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001daa:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <HAL_GPIO_Init+0x80>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e05 	.word	0x08001e05
 8001db8:	08001e17 	.word	0x08001e17
 8001dbc:	08001e59 	.word	0x08001e59
 8001dc0:	08001e5f 	.word	0x08001e5f
 8001dc4:	08001e5f 	.word	0x08001e5f
 8001dc8:	08001e5f 	.word	0x08001e5f
 8001dcc:	08001e5f 	.word	0x08001e5f
 8001dd0:	08001e5f 	.word	0x08001e5f
 8001dd4:	08001e5f 	.word	0x08001e5f
 8001dd8:	08001e5f 	.word	0x08001e5f
 8001ddc:	08001e5f 	.word	0x08001e5f
 8001de0:	08001e5f 	.word	0x08001e5f
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e5f 	.word	0x08001e5f
 8001dec:	08001e5f 	.word	0x08001e5f
 8001df0:	08001e5f 	.word	0x08001e5f
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e21 	.word	0x08001e21
 8001dfc:	4a79      	ldr	r2, [pc, #484]	@ (8001fe4 <HAL_GPIO_Init+0x2b4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e02:	e02c      	b.n	8001e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e029      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	3304      	adds	r3, #4
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e024      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e01f      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	330c      	adds	r3, #12
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e01a      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e32:	2304      	movs	r3, #4
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e013      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	611a      	str	r2, [r3, #16]
          break;
 8001e4a:	e009      	b.n	8001e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	615a      	str	r2, [r3, #20]
          break;
 8001e56:	e003      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          break;
 8001e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2bff      	cmp	r3, #255	@ 0xff
 8001e64:	d801      	bhi.n	8001e6a <HAL_GPIO_Init+0x13a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	e001      	b.n	8001e6e <HAL_GPIO_Init+0x13e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2bff      	cmp	r3, #255	@ 0xff
 8001e74:	d802      	bhi.n	8001e7c <HAL_GPIO_Init+0x14c>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x152>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	3b08      	subs	r3, #8
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	210f      	movs	r1, #15
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80b1 	beq.w	8002012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec8:	4a48      	ldr	r2, [pc, #288]	@ (8001fec <HAL_GPIO_Init+0x2bc>)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a40      	ldr	r2, [pc, #256]	@ (8001ff0 <HAL_GPIO_Init+0x2c0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <HAL_GPIO_Init+0x1ec>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff4 <HAL_GPIO_Init+0x2c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00d      	beq.n	8001f18 <HAL_GPIO_Init+0x1e8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3e      	ldr	r2, [pc, #248]	@ (8001ff8 <HAL_GPIO_Init+0x2c8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x1e4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_GPIO_Init+0x1e0>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2e:	492f      	ldr	r1, [pc, #188]	@ (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	492c      	ldr	r1, [pc, #176]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4928      	ldr	r1, [pc, #160]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	4922      	ldr	r1, [pc, #136]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	491e      	ldr	r1, [pc, #120]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4918      	ldr	r1, [pc, #96]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4914      	ldr	r1, [pc, #80]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d021      	beq.n	8002004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	490e      	ldr	r1, [pc, #56]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e021      	b.n	8002012 <HAL_GPIO_Init+0x2e2>
 8001fce:	bf00      	nop
 8001fd0:	10320000 	.word	0x10320000
 8001fd4:	10310000 	.word	0x10310000
 8001fd8:	10220000 	.word	0x10220000
 8001fdc:	10210000 	.word	0x10210000
 8001fe0:	10120000 	.word	0x10120000
 8001fe4:	10110000 	.word	0x10110000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40010800 	.word	0x40010800
 8001ff4:	40010c00 	.word	0x40010c00
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40011400 	.word	0x40011400
 8002000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_GPIO_Init+0x304>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	43db      	mvns	r3, r3
 800200c:	4909      	ldr	r1, [pc, #36]	@ (8002034 <HAL_GPIO_Init+0x304>)
 800200e:	4013      	ands	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	f47f ae8e 	bne.w	8001d44 <HAL_GPIO_Init+0x14>
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	372c      	adds	r7, #44	@ 0x2c
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e12b      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fb5c 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	@ 0x24
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020cc:	f001 fbfc 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 80020d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a81      	ldr	r2, [pc, #516]	@ (80022dc <HAL_I2C_Init+0x274>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d807      	bhi.n	80020ec <HAL_I2C_Init+0x84>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a80      	ldr	r2, [pc, #512]	@ (80022e0 <HAL_I2C_Init+0x278>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e006      	b.n	80020fa <HAL_I2C_Init+0x92>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a7d      	ldr	r2, [pc, #500]	@ (80022e4 <HAL_I2C_Init+0x27c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0e7      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a78      	ldr	r2, [pc, #480]	@ (80022e8 <HAL_I2C_Init+0x280>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9b      	lsrs	r3, r3, #18
 800210c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a6a      	ldr	r2, [pc, #424]	@ (80022dc <HAL_I2C_Init+0x274>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d802      	bhi.n	800213c <HAL_I2C_Init+0xd4>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3301      	adds	r3, #1
 800213a:	e009      	b.n	8002150 <HAL_I2C_Init+0xe8>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	4a69      	ldr	r2, [pc, #420]	@ (80022ec <HAL_I2C_Init+0x284>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002162:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	495c      	ldr	r1, [pc, #368]	@ (80022dc <HAL_I2C_Init+0x274>)
 800216c:	428b      	cmp	r3, r1
 800216e:	d819      	bhi.n	80021a4 <HAL_I2C_Init+0x13c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e59      	subs	r1, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fbb1 f3f3 	udiv	r3, r1, r3
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002184:	400b      	ands	r3, r1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_I2C_Init+0x138>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1e59      	subs	r1, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb1 f3f3 	udiv	r3, r1, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	e051      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e04f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_I2C_Init+0x168>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e012      	b.n	80021f6 <HAL_I2C_Init+0x18e>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x196>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <HAL_I2C_Init+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e58      	subs	r0, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	fbb0 f3f3 	udiv	r3, r0, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6911      	ldr	r1, [r2, #16]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	001e847f 	.word	0x001e847f
 80022e4:	003d08ff 	.word	0x003d08ff
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	460b      	mov	r3, r1
 8002304:	813b      	strh	r3, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800230a:	f7ff fbff 	bl	8001b0c <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	f040 80d9 	bne.w	80024d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2319      	movs	r3, #25
 8002324:	2201      	movs	r2, #1
 8002326:	496d      	ldr	r1, [pc, #436]	@ (80024dc <HAL_I2C_Mem_Write+0x1ec>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fccd 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
 8002336:	e0cc      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Mem_Write+0x56>
 8002342:	2302      	movs	r3, #2
 8002344:	e0c5      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d007      	beq.n	800236c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800237a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2221      	movs	r2, #33	@ 0x21
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	@ 0x40
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800239c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a4d      	ldr	r2, [pc, #308]	@ (80024e0 <HAL_I2C_Mem_Write+0x1f0>)
 80023ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ae:	88f8      	ldrh	r0, [r7, #6]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4603      	mov	r3, r0
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fb04 	bl	80029cc <I2C_RequestMemoryWrite>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d052      	beq.n	8002470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e081      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fd92 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d11b      	bne.n	8002470 <HAL_I2C_Mem_Write+0x180>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d017      	beq.n	8002470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1aa      	bne.n	80023ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fd85 	bl	8002f8c <I2C_WaitOnBTFFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	2b04      	cmp	r3, #4
 800248e:	d107      	bne.n	80024a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e016      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	00100002 	.word	0x00100002
 80024e0:	ffff0000 	.word	0xffff0000

080024e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	@ 0x30
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002502:	f7ff fb03 	bl	8001b0c <HAL_GetTick>
 8002506:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b20      	cmp	r3, #32
 8002512:	f040 8250 	bne.w	80029b6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2319      	movs	r3, #25
 800251c:	2201      	movs	r2, #1
 800251e:	4982      	ldr	r1, [pc, #520]	@ (8002728 <HAL_I2C_Mem_Read+0x244>)
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fbd1 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
 800252e:	e243      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_I2C_Mem_Read+0x5a>
 800253a:	2302      	movs	r3, #2
 800253c:	e23c      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d007      	beq.n	8002564 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2222      	movs	r2, #34	@ 0x22
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2240      	movs	r2, #64	@ 0x40
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a62      	ldr	r2, [pc, #392]	@ (800272c <HAL_I2C_Mem_Read+0x248>)
 80025a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a6:	88f8      	ldrh	r0, [r7, #6]
 80025a8:	893a      	ldrh	r2, [r7, #8]
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4603      	mov	r3, r0
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa9e 	bl	8002af8 <I2C_RequestMemoryRead>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1f8      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d113      	bne.n	80025f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e1cc      	b.n	8002990 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d11e      	bne.n	800263c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800260e:	b672      	cpsid	i
}
 8002610:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002636:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002638:	b662      	cpsie	i
}
 800263a:	e035      	b.n	80026a8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002640:	2b02      	cmp	r3, #2
 8002642:	d11e      	bne.n	8002682 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002652:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002654:	b672      	cpsid	i
}
 8002656:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800267c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800267e:	b662      	cpsie	i
}
 8002680:	e012      	b.n	80026a8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002690:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026a8:	e172      	b.n	8002990 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	f200 811f 	bhi.w	80028f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d123      	bne.n	8002704 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fcab 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e173      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002702:	e145      	b.n	8002990 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002708:	2b02      	cmp	r3, #2
 800270a:	d152      	bne.n	80027b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002712:	2200      	movs	r2, #0
 8002714:	4906      	ldr	r1, [pc, #24]	@ (8002730 <HAL_I2C_Mem_Read+0x24c>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fad6 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e148      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
 8002726:	bf00      	nop
 8002728:	00100002 	.word	0x00100002
 800272c:	ffff0000 	.word	0xffff0000
 8002730:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800277a:	b662      	cpsie	i
}
 800277c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027b0:	e0ee      	b.n	8002990 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b8:	2200      	movs	r2, #0
 80027ba:	4981      	ldr	r1, [pc, #516]	@ (80029c0 <HAL_I2C_Mem_Read+0x4dc>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fa83 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0f5      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027dc:	b672      	cpsid	i
}
 80027de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002812:	4b6c      	ldr	r3, [pc, #432]	@ (80029c4 <HAL_I2C_Mem_Read+0x4e0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	4a6b      	ldr	r2, [pc, #428]	@ (80029c8 <HAL_I2C_Mem_Read+0x4e4>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0a1a      	lsrs	r2, r3, #8
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00da      	lsls	r2, r3, #3
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	3b01      	subs	r3, #1
 8002830:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d118      	bne.n	800286a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800285a:	b662      	cpsie	i
}
 800285c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0a6      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d1d9      	bne.n	800282c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028ba:	b662      	cpsie	i
}
 80028bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f0:	e04e      	b.n	8002990 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fb90 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e058      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d124      	bne.n	8002990 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	2b03      	cmp	r3, #3
 800294c:	d107      	bne.n	800295e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800295c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	f47f ae88 	bne.w	80026aa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	00010004 	.word	0x00010004
 80029c4:	20000000 	.word	0x20000000
 80029c8:	14f8b589 	.word	0x14f8b589

080029cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f960 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1c:	d103      	bne.n	8002a26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e05f      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	492d      	ldr	r1, [pc, #180]	@ (8002af4 <I2C_RequestMemoryWrite+0x128>)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f9bb 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e04c      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa46 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d107      	bne.n	8002a8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e02b      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a98:	893b      	ldrh	r3, [r7, #8]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	e021      	b.n	8002ae8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa4:	893b      	ldrh	r3, [r7, #8]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab4:	6a39      	ldr	r1, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fa20 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e005      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ade:	893b      	ldrh	r3, [r7, #8]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	00010002 	.word	0x00010002

08002af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8c2 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b58:	d103      	bne.n	8002b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0aa      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	4952      	ldr	r1, [pc, #328]	@ (8002cc4 <I2C_RequestMemoryRead+0x1cc>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f91d 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e097      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f9a8 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e076      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e021      	b.n	8002c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002be0:	893b      	ldrh	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f982 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e050      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1a:	893b      	ldrh	r3, [r7, #8]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f967 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e035      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f82b 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c86:	d103      	bne.n	8002c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e013      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	4906      	ldr	r1, [pc, #24]	@ (8002cc4 <I2C_RequestMemoryRead+0x1cc>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f886 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010002 	.word	0x00010002

08002cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	e048      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d044      	beq.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7fe ff13 	bl	8001b0c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d139      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10d      	bne.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	e00c      	b.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d116      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e023      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10d      	bne.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	e00c      	b.n	8002dac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d093      	beq.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dca:	e071      	b.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d123      	bne.n	8002e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e067      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d041      	beq.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe fe6e 	bl	8001b0c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d136      	bne.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10c      	bne.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e00b      	b.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e021      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10c      	bne.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e00b      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af6d 	bne.w	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f08:	e034      	b.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f8e3 	bl	80030d6 <I2C_IsAcknowledgeFailed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d028      	beq.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fdf3 	bl	8001b0c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f42:	2b80      	cmp	r3, #128	@ 0x80
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d1c3      	bne.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f98:	e034      	b.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f89b 	bl	80030d6 <I2C_IsAcknowledgeFailed>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e034      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d028      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe fdab 	bl	8001b0c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11d      	bne.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d016      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d1c3      	bne.n	8002f9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003028:	e049      	b.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d119      	bne.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e030      	b.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fe fd4e 	bl	8001b0c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11d      	bne.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d016      	beq.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e007      	b.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b40      	cmp	r3, #64	@ 0x40
 80030ca:	d1ae      	bne.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ec:	d11b      	bne.n	8003126 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
	...

08003134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e272      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	4b92      	ldr	r3, [pc, #584]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00c      	beq.n	800317a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003160:	4b8f      	ldr	r3, [pc, #572]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d112      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
 800316c:	4b8c      	ldr	r3, [pc, #560]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003178:	d10b      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317a:	4b89      	ldr	r3, [pc, #548]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06c      	beq.n	8003260 <HAL_RCC_OscConfig+0x12c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e24c      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x76>
 800319c:	4b80      	ldr	r3, [pc, #512]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7f      	ldr	r2, [pc, #508]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e02e      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b7b      	ldr	r3, [pc, #492]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7a      	ldr	r2, [pc, #488]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b78      	ldr	r3, [pc, #480]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a77      	ldr	r2, [pc, #476]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0xbc>
 80031d6:	4b72      	ldr	r3, [pc, #456]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a71      	ldr	r2, [pc, #452]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b6f      	ldr	r3, [pc, #444]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6e      	ldr	r2, [pc, #440]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031f0:	4b6b      	ldr	r3, [pc, #428]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6a      	ldr	r2, [pc, #424]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b68      	ldr	r3, [pc, #416]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a67      	ldr	r2, [pc, #412]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fc7c 	bl	8001b0c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe fc78 	bl	8001b0c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	@ 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e200      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b5d      	ldr	r3, [pc, #372]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xe4>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe fc68 	bl	8001b0c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7fe fc64 	bl	8001b0c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	@ 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1ec      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b53      	ldr	r3, [pc, #332]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x10c>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326e:	4b4c      	ldr	r3, [pc, #304]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800327a:	4b49      	ldr	r3, [pc, #292]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
 8003286:	4b46      	ldr	r3, [pc, #280]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b43      	ldr	r3, [pc, #268]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1c0      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b3d      	ldr	r3, [pc, #244]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4939      	ldr	r1, [pc, #228]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e03a      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b36      	ldr	r3, [pc, #216]	@ (80033a4 <HAL_RCC_OscConfig+0x270>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe fc1d 	bl	8001b0c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fe fc19 	bl	8001b0c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e1a1      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b2a      	ldr	r3, [pc, #168]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4927      	ldr	r1, [pc, #156]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <HAL_RCC_OscConfig+0x270>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fbfc 	bl	8001b0c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003318:	f7fe fbf8 	bl	8001b0c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e180      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03a      	beq.n	80033b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d019      	beq.n	800337e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <HAL_RCC_OscConfig+0x274>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7fe fbdc 	bl	8001b0c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7fe fbd8 	bl	8001b0c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e160      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4b0d      	ldr	r3, [pc, #52]	@ (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003376:	2001      	movs	r0, #1
 8003378:	f000 face 	bl	8003918 <RCC_Delay>
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337e:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <HAL_RCC_OscConfig+0x274>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fe fbc2 	bl	8001b0c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338a:	e00f      	b.n	80033ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fe fbbe 	bl	8001b0c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d908      	bls.n	80033ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e146      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	42420000 	.word	0x42420000
 80033a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b92      	ldr	r3, [pc, #584]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e9      	bne.n	800338c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a6 	beq.w	8003512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b8b      	ldr	r3, [pc, #556]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b88      	ldr	r3, [pc, #544]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a87      	ldr	r2, [pc, #540]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]
 80033e2:	4b85      	ldr	r3, [pc, #532]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b82      	ldr	r3, [pc, #520]	@ (80035fc <HAL_RCC_OscConfig+0x4c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b7f      	ldr	r3, [pc, #508]	@ (80035fc <HAL_RCC_OscConfig+0x4c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7e      	ldr	r2, [pc, #504]	@ (80035fc <HAL_RCC_OscConfig+0x4c8>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fe fb7f 	bl	8001b0c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fe fb7b 	bl	8001b0c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	@ 0x64
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e103      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b75      	ldr	r3, [pc, #468]	@ (80035fc <HAL_RCC_OscConfig+0x4c8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x312>
 8003438:	4b6f      	ldr	r3, [pc, #444]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a6e      	ldr	r2, [pc, #440]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	e02d      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x334>
 800344e:	4b6a      	ldr	r3, [pc, #424]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a69      	ldr	r2, [pc, #420]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	4b67      	ldr	r3, [pc, #412]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a66      	ldr	r2, [pc, #408]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	e01c      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d10c      	bne.n	800348a <HAL_RCC_OscConfig+0x356>
 8003470:	4b61      	ldr	r3, [pc, #388]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a60      	ldr	r2, [pc, #384]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	4b5e      	ldr	r3, [pc, #376]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a5d      	ldr	r2, [pc, #372]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	e00b      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 800348a:	4b5b      	ldr	r3, [pc, #364]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a5a      	ldr	r2, [pc, #360]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6213      	str	r3, [r2, #32]
 8003496:	4b58      	ldr	r3, [pc, #352]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a57      	ldr	r2, [pc, #348]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d015      	beq.n	80034d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fe fb2f 	bl	8001b0c <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fe fb2b 	bl	8001b0c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0b1      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b4b      	ldr	r3, [pc, #300]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCC_OscConfig+0x37e>
 80034d4:	e014      	b.n	8003500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7fe fb19 	bl	8001b0c <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fe fb15 	bl	8001b0c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e09b      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	4b40      	ldr	r3, [pc, #256]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a3b      	ldr	r2, [pc, #236]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8087 	beq.w	800362a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351c:	4b36      	ldr	r3, [pc, #216]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d061      	beq.n	80035ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d146      	bne.n	80035be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b33      	ldr	r3, [pc, #204]	@ (8003600 <HAL_RCC_OscConfig+0x4cc>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fe fae9 	bl	8001b0c <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fe fae5 	bl	8001b0c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e06d      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003550:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d108      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003566:	4b24      	ldr	r3, [pc, #144]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4921      	ldr	r1, [pc, #132]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003578:	4b1f      	ldr	r3, [pc, #124]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a19      	ldr	r1, [r3, #32]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	430b      	orrs	r3, r1
 800358a:	491b      	ldr	r1, [pc, #108]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <HAL_RCC_OscConfig+0x4cc>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe fab9 	bl	8001b0c <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe fab5 	bl	8001b0c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e03d      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b0:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x46a>
 80035bc:	e035      	b.n	800362a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b10      	ldr	r3, [pc, #64]	@ (8003600 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe faa2 	bl	8001b0c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fa9e 	bl	8001b0c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e026      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x498>
 80035ea:	e01e      	b.n	800362a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e019      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
 8003600:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_OscConfig+0x500>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	429a      	cmp	r2, r3
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000

08003638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0d0      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d910      	bls.n	800367c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b67      	ldr	r3, [pc, #412]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 0207 	bic.w	r2, r3, #7
 8003662:	4965      	ldr	r1, [pc, #404]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b63      	ldr	r3, [pc, #396]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b8      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b59      	ldr	r3, [pc, #356]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a58      	ldr	r2, [pc, #352]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800369e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b53      	ldr	r3, [pc, #332]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a52      	ldr	r2, [pc, #328]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b50      	ldr	r3, [pc, #320]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	494d      	ldr	r1, [pc, #308]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d040      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d115      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e073      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3d      	ldr	r3, [pc, #244]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06b      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4936      	ldr	r1, [pc, #216]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7fe f9f0 	bl	8001b0c <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fe f9ec 	bl	8001b0c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e053      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d210      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	4922      	ldr	r1, [pc, #136]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4916      	ldr	r1, [pc, #88]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	490e      	ldr	r1, [pc, #56]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f821 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	490a      	ldr	r1, [pc, #40]	@ (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a09      	ldr	r2, [pc, #36]	@ (8003804 <HAL_RCC_ClockConfig+0x1cc>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037e2:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_ClockConfig+0x1d0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe f94e 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
 8003800:	08007fe8 	.word	0x08007fe8
 8003804:	20000000 	.word	0x20000000
 8003808:	20000004 	.word	0x20000004

0800380c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003826:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d002      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x30>
 8003836:	2b08      	cmp	r3, #8
 8003838:	d003      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x36>
 800383a:	e027      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800383c:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800383e:	613b      	str	r3, [r7, #16]
      break;
 8003840:	e027      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	0c9b      	lsrs	r3, r3, #18
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800384c:	5cd3      	ldrb	r3, [r2, r3]
 800384e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800385a:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	0c5b      	lsrs	r3, r3, #17
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	4a11      	ldr	r2, [pc, #68]	@ (80038ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a0d      	ldr	r2, [pc, #52]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800386e:	fb03 f202 	mul.w	r2, r3, r2
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e004      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a0c      	ldr	r2, [pc, #48]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	613b      	str	r3, [r7, #16]
      break;
 800388a:	e002      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800388e:	613b      	str	r3, [r7, #16]
      break;
 8003890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003892:	693b      	ldr	r3, [r7, #16]
}
 8003894:	4618      	mov	r0, r3
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	007a1200 	.word	0x007a1200
 80038a8:	08008000 	.word	0x08008000
 80038ac:	08008010 	.word	0x08008010
 80038b0:	003d0900 	.word	0x003d0900

080038b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b8:	4b02      	ldr	r3, [pc, #8]	@ (80038c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	20000000 	.word	0x20000000

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff2 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	@ (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08007ff8 	.word	0x08007ff8

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffde 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	0adb      	lsrs	r3, r3, #11
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	@ (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	08007ff8 	.word	0x08007ff8

08003918 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003920:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <RCC_Delay+0x34>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0a      	ldr	r2, [pc, #40]	@ (8003950 <RCC_Delay+0x38>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	0a5b      	lsrs	r3, r3, #9
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003934:	bf00      	nop
  }
  while (Delay --);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e5a      	subs	r2, r3, #1
 800393a:	60fa      	str	r2, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f9      	bne.n	8003934 <RCC_Delay+0x1c>
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	20000000 	.word	0x20000000
 8003950:	10624dd3 	.word	0x10624dd3

08003954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e042      	b.n	80039ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd ff24 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	@ 0x24
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f971 	bl	8003c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d175      	bne.n	8003b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_UART_Transmit+0x2c>
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e06e      	b.n	8003b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2221      	movs	r2, #33	@ 0x21
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a32:	f7fe f86b 	bl	8001b0c <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4c:	d108      	bne.n	8003a60 <HAL_UART_Transmit+0x6c>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e003      	b.n	8003a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a68:	e02e      	b.n	8003ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	@ 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f848 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e03a      	b.n	8003b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	e007      	b.n	8003aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1cb      	bne.n	8003a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2140      	movs	r1, #64	@ 0x40
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f814 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e006      	b.n	8003b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e000      	b.n	8003b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b00:	2302      	movs	r3, #2
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1a:	e03b      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d037      	beq.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b24:	f7fd fff2 	bl	8001b0c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	6a3a      	ldr	r2, [r7, #32]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e03a      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b80      	cmp	r3, #128	@ 0x80
 8003b50:	d020      	beq.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	d01d      	beq.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d116      	bne.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f81d 	bl	8003bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2208      	movs	r2, #8
 8003b86:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e00f      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d0b4      	beq.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b095      	sub	sp, #84	@ 0x54
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d119      	bne.n	8003c68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f023 0310 	bic.w	r3, r3, #16
 8003c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c54:	61ba      	str	r2, [r7, #24]
 8003c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6979      	ldr	r1, [r7, #20]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	613b      	str	r3, [r7, #16]
   return(result);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e5      	bne.n	8003c34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c76:	bf00      	nop
 8003c78:	3754      	adds	r7, #84	@ 0x54
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003cba:	f023 030c 	bic.w	r3, r3, #12
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d94 <UART_SetConfig+0x114>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d103      	bne.n	8003cf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ce8:	f7ff fe02 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	e002      	b.n	8003cf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7ff fdea 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8003cf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009a      	lsls	r2, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <UART_SetConfig+0x118>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	0119      	lsls	r1, r3, #4
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <UART_SetConfig+0x118>)
 8003d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2064      	movs	r0, #100	@ 0x64
 8003d36:	fb00 f303 	mul.w	r3, r0, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	3332      	adds	r3, #50	@ 0x32
 8003d40:	4a15      	ldr	r2, [pc, #84]	@ (8003d98 <UART_SetConfig+0x118>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d4c:	4419      	add	r1, r3
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009a      	lsls	r2, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d64:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <UART_SetConfig+0x118>)
 8003d66:	fba3 0302 	umull	r0, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2064      	movs	r0, #100	@ 0x64
 8003d6e:	fb00 f303 	mul.w	r3, r0, r3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	3332      	adds	r3, #50	@ 0x32
 8003d78:	4a07      	ldr	r2, [pc, #28]	@ (8003d98 <UART_SetConfig+0x118>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	f003 020f 	and.w	r2, r3, #15
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	440a      	add	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40013800 	.word	0x40013800
 8003d98:	51eb851f 	.word	0x51eb851f

08003d9c <funchad53.constprop.0>:
 8003d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003da4:	4607      	mov	r7, r0
 8003da6:	2100      	movs	r1, #0
 8003da8:	482a      	ldr	r0, [pc, #168]	@ (8003e54 <funchad53.constprop.0+0xb8>)
 8003daa:	f001 fee8 	bl	8005b7e <memset>
 8003dae:	f04f 0800 	mov.w	r8, #0
 8003db2:	4e29      	ldr	r6, [pc, #164]	@ (8003e58 <funchad53.constprop.0+0xbc>)
 8003db4:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8003e5c <funchad53.constprop.0+0xc0>
 8003db8:	2500      	movs	r5, #0
 8003dba:	464c      	mov	r4, r9
 8003dbc:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8003dc0:	3503      	adds	r5, #3
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	f7fc ffbe 	bl	8000d44 <__aeabi_fmul>
 8003dc8:	4601      	mov	r1, r0
 8003dca:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003dce:	f7fc feb1 	bl	8000b34 <__addsf3>
 8003dd2:	42b4      	cmp	r4, r6
 8003dd4:	6020      	str	r0, [r4, #0]
 8003dd6:	d1f1      	bne.n	8003dbc <funchad53.constprop.0+0x20>
 8003dd8:	f108 0801 	add.w	r8, r8, #1
 8003ddc:	f1b8 0f03 	cmp.w	r8, #3
 8003de0:	f107 0704 	add.w	r7, r7, #4
 8003de4:	d1e6      	bne.n	8003db4 <funchad53.constprop.0+0x18>
 8003de6:	2500      	movs	r5, #0
 8003de8:	2700      	movs	r7, #0
 8003dea:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8003e60 <funchad53.constprop.0+0xc4>
 8003dee:	e006      	b.n	8003dfe <funchad53.constprop.0+0x62>
 8003df0:	463c      	mov	r4, r7
 8003df2:	45b1      	cmp	r9, r6
 8003df4:	f8c9 4000 	str.w	r4, [r9]
 8003df8:	f105 0501 	add.w	r5, r5, #1
 8003dfc:	d01d      	beq.n	8003e3a <funchad53.constprop.0+0x9e>
 8003dfe:	f859 4f04 	ldr.w	r4, [r9, #4]!
 8003e02:	4639      	mov	r1, r7
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7fd f94f 	bl	80010a8 <__aeabi_fcmpge>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d0f0      	beq.n	8003df0 <funchad53.constprop.0+0x54>
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f003 ff8e 	bl	8007d30 <sqrtf>
 8003e14:	4639      	mov	r1, r7
 8003e16:	4604      	mov	r4, r0
 8003e18:	f7fd f946 	bl	80010a8 <__aeabi_fcmpge>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d1e8      	bne.n	8003df2 <funchad53.constprop.0+0x56>
 8003e20:	4628      	mov	r0, r5
 8003e22:	f7fc ff3b 	bl	8000c9c <__aeabi_i2f>
 8003e26:	4641      	mov	r1, r8
 8003e28:	f7fc ff8c 	bl	8000d44 <__aeabi_fmul>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	45b1      	cmp	r9, r6
 8003e30:	f8c9 4000 	str.w	r4, [r9]
 8003e34:	f105 0501 	add.w	r5, r5, #1
 8003e38:	d1e1      	bne.n	8003dfe <funchad53.constprop.0+0x62>
 8003e3a:	4c0a      	ldr	r4, [pc, #40]	@ (8003e64 <funchad53.constprop.0+0xc8>)
 8003e3c:	4d0a      	ldr	r5, [pc, #40]	@ (8003e68 <funchad53.constprop.0+0xcc>)
 8003e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003e4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8003e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e52:	bf00      	nop
 8003e54:	20000f28 	.word	0x20000f28
 8003e58:	20001324 	.word	0x20001324
 8003e5c:	20000f24 	.word	0x20000f24
 8003e60:	3b03126f 	.word	0x3b03126f
 8003e64:	20001328 	.word	0x20001328
 8003e68:	20001300 	.word	0x20001300

08003e6c <neai_anomalydetection_learn>:
 8003e6c:	4b03      	ldr	r3, [pc, #12]	@ (8003e7c <neai_anomalydetection_learn+0x10>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d007      	beq.n	8003e84 <neai_anomalydetection_learn+0x18>
 8003e74:	207b      	movs	r0, #123	@ 0x7b
 8003e76:	4b02      	ldr	r3, [pc, #8]	@ (8003e80 <neai_anomalydetection_learn+0x14>)
 8003e78:	7018      	strb	r0, [r3, #0]
 8003e7a:	4770      	bx	lr
 8003e7c:	200001e0 	.word	0x200001e0
 8003e80:	200001d8 	.word	0x200001d8
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	f7ff ff87 	bl	8003d9c <funchad53.constprop.0>
 8003e8e:	4ba8      	ldr	r3, [pc, #672]	@ (8004130 <neai_anomalydetection_learn+0x2c4>)
 8003e90:	4ea8      	ldr	r6, [pc, #672]	@ (8004134 <neai_anomalydetection_learn+0x2c8>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4da8      	ldr	r5, [pc, #672]	@ (8004138 <neai_anomalydetection_learn+0x2cc>)
 8003e96:	9201      	str	r2, [sp, #4]
 8003e98:	3201      	adds	r2, #1
 8003e9a:	2a02      	cmp	r2, #2
 8003e9c:	9200      	str	r2, [sp, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f200 82b9 	bhi.w	8004416 <neai_anomalydetection_learn+0x5aa>
 8003ea4:	4ca5      	ldr	r4, [pc, #660]	@ (800413c <neai_anomalydetection_learn+0x2d0>)
 8003ea6:	9801      	ldr	r0, [sp, #4]
 8003ea8:	3002      	adds	r0, #2
 8003eaa:	f7fc fef3 	bl	8000c94 <__aeabi_ui2f>
 8003eae:	f8d5 8000 	ldr.w	r8, [r5]
 8003eb2:	4607      	mov	r7, r0
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f7fc ff44 	bl	8000d44 <__aeabi_fmul>
 8003ebc:	f8d4 a000 	ldr.w	sl, [r4]
 8003ec0:	4681      	mov	r9, r0
 8003ec2:	4651      	mov	r1, sl
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	f7fc ff3d 	bl	8000d44 <__aeabi_fmul>
 8003eca:	4601      	mov	r1, r0
 8003ecc:	4648      	mov	r0, r9
 8003ece:	f7fc fe31 	bl	8000b34 <__addsf3>
 8003ed2:	f8d6 a000 	ldr.w	sl, [r6]
 8003ed6:	4681      	mov	r9, r0
 8003ed8:	4641      	mov	r1, r8
 8003eda:	4650      	mov	r0, sl
 8003edc:	f7fc fe28 	bl	8000b30 <__aeabi_fsub>
 8003ee0:	4639      	mov	r1, r7
 8003ee2:	f7fc ffe3 	bl	8000eac <__aeabi_fdiv>
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	f7fc fe24 	bl	8000b34 <__addsf3>
 8003eec:	4680      	mov	r8, r0
 8003eee:	4651      	mov	r1, sl
 8003ef0:	f8c5 8000 	str.w	r8, [r5]
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	f7fc ff25 	bl	8000d44 <__aeabi_fmul>
 8003efa:	4649      	mov	r1, r9
 8003efc:	f7fc fe18 	bl	8000b30 <__aeabi_fsub>
 8003f00:	4639      	mov	r1, r7
 8003f02:	f7fc ffd3 	bl	8000eac <__aeabi_fdiv>
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc fe14 	bl	8000b34 <__addsf3>
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	4681      	mov	r9, r0
 8003f10:	4640      	mov	r0, r8
 8003f12:	f7fc ff17 	bl	8000d44 <__aeabi_fmul>
 8003f16:	4601      	mov	r1, r0
 8003f18:	4648      	mov	r0, r9
 8003f1a:	f7fc fe09 	bl	8000b30 <__aeabi_fsub>
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4680      	mov	r8, r0
 8003f22:	f7fd f8c1 	bl	80010a8 <__aeabi_fcmpge>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	f040 824c 	bne.w	80043c4 <neai_anomalydetection_learn+0x558>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8003f32:	6020      	str	r0, [r4, #0]
 8003f34:	4641      	mov	r1, r8
 8003f36:	4640      	mov	r0, r8
 8003f38:	f7fc ff04 	bl	8000d44 <__aeabi_fmul>
 8003f3c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8003f40:	4681      	mov	r9, r0
 8003f42:	4651      	mov	r1, sl
 8003f44:	4650      	mov	r0, sl
 8003f46:	f7fc fefd 	bl	8000d44 <__aeabi_fmul>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4648      	mov	r0, r9
 8003f4e:	f7fc fdf1 	bl	8000b34 <__addsf3>
 8003f52:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8003f56:	4681      	mov	r9, r0
 8003f58:	4641      	mov	r1, r8
 8003f5a:	4650      	mov	r0, sl
 8003f5c:	f7fc fde8 	bl	8000b30 <__aeabi_fsub>
 8003f60:	4639      	mov	r1, r7
 8003f62:	f7fc ffa3 	bl	8000eac <__aeabi_fdiv>
 8003f66:	4641      	mov	r1, r8
 8003f68:	f7fc fde4 	bl	8000b34 <__addsf3>
 8003f6c:	4680      	mov	r8, r0
 8003f6e:	4651      	mov	r1, sl
 8003f70:	f8c5 8004 	str.w	r8, [r5, #4]
 8003f74:	4650      	mov	r0, sl
 8003f76:	f7fc fee5 	bl	8000d44 <__aeabi_fmul>
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	f7fc fdd8 	bl	8000b30 <__aeabi_fsub>
 8003f80:	4639      	mov	r1, r7
 8003f82:	f7fc ff93 	bl	8000eac <__aeabi_fdiv>
 8003f86:	4649      	mov	r1, r9
 8003f88:	f7fc fdd4 	bl	8000b34 <__addsf3>
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	4681      	mov	r9, r0
 8003f90:	4640      	mov	r0, r8
 8003f92:	f7fc fed7 	bl	8000d44 <__aeabi_fmul>
 8003f96:	4601      	mov	r1, r0
 8003f98:	4648      	mov	r0, r9
 8003f9a:	f7fc fdc9 	bl	8000b30 <__aeabi_fsub>
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	f7fd f881 	bl	80010a8 <__aeabi_fcmpge>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	f040 8231 	bne.w	800440e <neai_anomalydetection_learn+0x5a2>
 8003fac:	2000      	movs	r0, #0
 8003fae:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003fb2:	6060      	str	r0, [r4, #4]
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	f7fc fec4 	bl	8000d44 <__aeabi_fmul>
 8003fbc:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8003fc0:	4681      	mov	r9, r0
 8003fc2:	4651      	mov	r1, sl
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	f7fc febd 	bl	8000d44 <__aeabi_fmul>
 8003fca:	4601      	mov	r1, r0
 8003fcc:	4648      	mov	r0, r9
 8003fce:	f7fc fdb1 	bl	8000b34 <__addsf3>
 8003fd2:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8003fd6:	4681      	mov	r9, r0
 8003fd8:	4641      	mov	r1, r8
 8003fda:	4650      	mov	r0, sl
 8003fdc:	f7fc fda8 	bl	8000b30 <__aeabi_fsub>
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	f7fc ff63 	bl	8000eac <__aeabi_fdiv>
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	f7fc fda4 	bl	8000b34 <__addsf3>
 8003fec:	4680      	mov	r8, r0
 8003fee:	4651      	mov	r1, sl
 8003ff0:	f8c5 8008 	str.w	r8, [r5, #8]
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	f7fc fea5 	bl	8000d44 <__aeabi_fmul>
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	f7fc fd98 	bl	8000b30 <__aeabi_fsub>
 8004000:	4639      	mov	r1, r7
 8004002:	f7fc ff53 	bl	8000eac <__aeabi_fdiv>
 8004006:	4649      	mov	r1, r9
 8004008:	f7fc fd94 	bl	8000b34 <__addsf3>
 800400c:	4641      	mov	r1, r8
 800400e:	4681      	mov	r9, r0
 8004010:	4640      	mov	r0, r8
 8004012:	f7fc fe97 	bl	8000d44 <__aeabi_fmul>
 8004016:	4601      	mov	r1, r0
 8004018:	4648      	mov	r0, r9
 800401a:	f7fc fd89 	bl	8000b30 <__aeabi_fsub>
 800401e:	2100      	movs	r1, #0
 8004020:	4680      	mov	r8, r0
 8004022:	f7fd f841 	bl	80010a8 <__aeabi_fcmpge>
 8004026:	2800      	cmp	r0, #0
 8004028:	f040 81ed 	bne.w	8004406 <neai_anomalydetection_learn+0x59a>
 800402c:	2000      	movs	r0, #0
 800402e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8004032:	60a0      	str	r0, [r4, #8]
 8004034:	4641      	mov	r1, r8
 8004036:	4640      	mov	r0, r8
 8004038:	f7fc fe84 	bl	8000d44 <__aeabi_fmul>
 800403c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8004040:	4681      	mov	r9, r0
 8004042:	4651      	mov	r1, sl
 8004044:	4650      	mov	r0, sl
 8004046:	f7fc fe7d 	bl	8000d44 <__aeabi_fmul>
 800404a:	4601      	mov	r1, r0
 800404c:	4648      	mov	r0, r9
 800404e:	f7fc fd71 	bl	8000b34 <__addsf3>
 8004052:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8004056:	4681      	mov	r9, r0
 8004058:	4641      	mov	r1, r8
 800405a:	4650      	mov	r0, sl
 800405c:	f7fc fd68 	bl	8000b30 <__aeabi_fsub>
 8004060:	4639      	mov	r1, r7
 8004062:	f7fc ff23 	bl	8000eac <__aeabi_fdiv>
 8004066:	4641      	mov	r1, r8
 8004068:	f7fc fd64 	bl	8000b34 <__addsf3>
 800406c:	4680      	mov	r8, r0
 800406e:	4651      	mov	r1, sl
 8004070:	f8c5 800c 	str.w	r8, [r5, #12]
 8004074:	4650      	mov	r0, sl
 8004076:	f7fc fe65 	bl	8000d44 <__aeabi_fmul>
 800407a:	4649      	mov	r1, r9
 800407c:	f7fc fd58 	bl	8000b30 <__aeabi_fsub>
 8004080:	4639      	mov	r1, r7
 8004082:	f7fc ff13 	bl	8000eac <__aeabi_fdiv>
 8004086:	4649      	mov	r1, r9
 8004088:	f7fc fd54 	bl	8000b34 <__addsf3>
 800408c:	4641      	mov	r1, r8
 800408e:	4681      	mov	r9, r0
 8004090:	4640      	mov	r0, r8
 8004092:	f7fc fe57 	bl	8000d44 <__aeabi_fmul>
 8004096:	4601      	mov	r1, r0
 8004098:	4648      	mov	r0, r9
 800409a:	f7fc fd49 	bl	8000b30 <__aeabi_fsub>
 800409e:	2100      	movs	r1, #0
 80040a0:	4680      	mov	r8, r0
 80040a2:	f7fd f801 	bl	80010a8 <__aeabi_fcmpge>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f040 81a9 	bne.w	80043fe <neai_anomalydetection_learn+0x592>
 80040ac:	2000      	movs	r0, #0
 80040ae:	f8d5 8010 	ldr.w	r8, [r5, #16]
 80040b2:	60e0      	str	r0, [r4, #12]
 80040b4:	4641      	mov	r1, r8
 80040b6:	4640      	mov	r0, r8
 80040b8:	f7fc fe44 	bl	8000d44 <__aeabi_fmul>
 80040bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80040c0:	4681      	mov	r9, r0
 80040c2:	4651      	mov	r1, sl
 80040c4:	4650      	mov	r0, sl
 80040c6:	f7fc fe3d 	bl	8000d44 <__aeabi_fmul>
 80040ca:	4601      	mov	r1, r0
 80040cc:	4648      	mov	r0, r9
 80040ce:	f7fc fd31 	bl	8000b34 <__addsf3>
 80040d2:	f8d6 a010 	ldr.w	sl, [r6, #16]
 80040d6:	4681      	mov	r9, r0
 80040d8:	4641      	mov	r1, r8
 80040da:	4650      	mov	r0, sl
 80040dc:	f7fc fd28 	bl	8000b30 <__aeabi_fsub>
 80040e0:	4639      	mov	r1, r7
 80040e2:	f7fc fee3 	bl	8000eac <__aeabi_fdiv>
 80040e6:	4641      	mov	r1, r8
 80040e8:	f7fc fd24 	bl	8000b34 <__addsf3>
 80040ec:	4680      	mov	r8, r0
 80040ee:	4651      	mov	r1, sl
 80040f0:	f8c5 8010 	str.w	r8, [r5, #16]
 80040f4:	4650      	mov	r0, sl
 80040f6:	f7fc fe25 	bl	8000d44 <__aeabi_fmul>
 80040fa:	4649      	mov	r1, r9
 80040fc:	f7fc fd18 	bl	8000b30 <__aeabi_fsub>
 8004100:	4639      	mov	r1, r7
 8004102:	f7fc fed3 	bl	8000eac <__aeabi_fdiv>
 8004106:	4649      	mov	r1, r9
 8004108:	f7fc fd14 	bl	8000b34 <__addsf3>
 800410c:	4641      	mov	r1, r8
 800410e:	4681      	mov	r9, r0
 8004110:	4640      	mov	r0, r8
 8004112:	f7fc fe17 	bl	8000d44 <__aeabi_fmul>
 8004116:	4601      	mov	r1, r0
 8004118:	4648      	mov	r0, r9
 800411a:	f7fc fd09 	bl	8000b30 <__aeabi_fsub>
 800411e:	2100      	movs	r1, #0
 8004120:	4680      	mov	r8, r0
 8004122:	f7fc ffc1 	bl	80010a8 <__aeabi_fcmpge>
 8004126:	2800      	cmp	r0, #0
 8004128:	f040 8165 	bne.w	80043f6 <neai_anomalydetection_learn+0x58a>
 800412c:	2000      	movs	r0, #0
 800412e:	e007      	b.n	8004140 <neai_anomalydetection_learn+0x2d4>
 8004130:	200001dc 	.word	0x200001dc
 8004134:	20001328 	.word	0x20001328
 8004138:	20000204 	.word	0x20000204
 800413c:	2000022c 	.word	0x2000022c
 8004140:	6961      	ldr	r1, [r4, #20]
 8004142:	6120      	str	r0, [r4, #16]
 8004144:	4608      	mov	r0, r1
 8004146:	f7fc fdfd 	bl	8000d44 <__aeabi_fmul>
 800414a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800414e:	4681      	mov	r9, r0
 8004150:	4641      	mov	r1, r8
 8004152:	4640      	mov	r0, r8
 8004154:	f7fc fdf6 	bl	8000d44 <__aeabi_fmul>
 8004158:	4601      	mov	r1, r0
 800415a:	4648      	mov	r0, r9
 800415c:	f7fc fcea 	bl	8000b34 <__addsf3>
 8004160:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8004164:	4681      	mov	r9, r0
 8004166:	4641      	mov	r1, r8
 8004168:	4650      	mov	r0, sl
 800416a:	f7fc fce1 	bl	8000b30 <__aeabi_fsub>
 800416e:	4639      	mov	r1, r7
 8004170:	f7fc fe9c 	bl	8000eac <__aeabi_fdiv>
 8004174:	4641      	mov	r1, r8
 8004176:	f7fc fcdd 	bl	8000b34 <__addsf3>
 800417a:	4680      	mov	r8, r0
 800417c:	4651      	mov	r1, sl
 800417e:	f8c5 8014 	str.w	r8, [r5, #20]
 8004182:	4650      	mov	r0, sl
 8004184:	f7fc fdde 	bl	8000d44 <__aeabi_fmul>
 8004188:	4649      	mov	r1, r9
 800418a:	f7fc fcd1 	bl	8000b30 <__aeabi_fsub>
 800418e:	4639      	mov	r1, r7
 8004190:	f7fc fe8c 	bl	8000eac <__aeabi_fdiv>
 8004194:	4601      	mov	r1, r0
 8004196:	4648      	mov	r0, r9
 8004198:	f7fc fccc 	bl	8000b34 <__addsf3>
 800419c:	4641      	mov	r1, r8
 800419e:	4681      	mov	r9, r0
 80041a0:	4640      	mov	r0, r8
 80041a2:	f7fc fdcf 	bl	8000d44 <__aeabi_fmul>
 80041a6:	4601      	mov	r1, r0
 80041a8:	4648      	mov	r0, r9
 80041aa:	f7fc fcc1 	bl	8000b30 <__aeabi_fsub>
 80041ae:	2100      	movs	r1, #0
 80041b0:	4680      	mov	r8, r0
 80041b2:	f7fc ff79 	bl	80010a8 <__aeabi_fcmpge>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	f040 8119 	bne.w	80043ee <neai_anomalydetection_learn+0x582>
 80041bc:	2000      	movs	r0, #0
 80041be:	69a1      	ldr	r1, [r4, #24]
 80041c0:	6160      	str	r0, [r4, #20]
 80041c2:	4608      	mov	r0, r1
 80041c4:	f7fc fdbe 	bl	8000d44 <__aeabi_fmul>
 80041c8:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80041cc:	4681      	mov	r9, r0
 80041ce:	4641      	mov	r1, r8
 80041d0:	4640      	mov	r0, r8
 80041d2:	f7fc fdb7 	bl	8000d44 <__aeabi_fmul>
 80041d6:	4601      	mov	r1, r0
 80041d8:	4648      	mov	r0, r9
 80041da:	f7fc fcab 	bl	8000b34 <__addsf3>
 80041de:	f8d6 a018 	ldr.w	sl, [r6, #24]
 80041e2:	4681      	mov	r9, r0
 80041e4:	4641      	mov	r1, r8
 80041e6:	4650      	mov	r0, sl
 80041e8:	f7fc fca2 	bl	8000b30 <__aeabi_fsub>
 80041ec:	4639      	mov	r1, r7
 80041ee:	f7fc fe5d 	bl	8000eac <__aeabi_fdiv>
 80041f2:	4641      	mov	r1, r8
 80041f4:	f7fc fc9e 	bl	8000b34 <__addsf3>
 80041f8:	4680      	mov	r8, r0
 80041fa:	4651      	mov	r1, sl
 80041fc:	f8c5 8018 	str.w	r8, [r5, #24]
 8004200:	4650      	mov	r0, sl
 8004202:	f7fc fd9f 	bl	8000d44 <__aeabi_fmul>
 8004206:	4649      	mov	r1, r9
 8004208:	f7fc fc92 	bl	8000b30 <__aeabi_fsub>
 800420c:	4639      	mov	r1, r7
 800420e:	f7fc fe4d 	bl	8000eac <__aeabi_fdiv>
 8004212:	4601      	mov	r1, r0
 8004214:	4648      	mov	r0, r9
 8004216:	f7fc fc8d 	bl	8000b34 <__addsf3>
 800421a:	4641      	mov	r1, r8
 800421c:	4681      	mov	r9, r0
 800421e:	4640      	mov	r0, r8
 8004220:	f7fc fd90 	bl	8000d44 <__aeabi_fmul>
 8004224:	4601      	mov	r1, r0
 8004226:	4648      	mov	r0, r9
 8004228:	f7fc fc82 	bl	8000b30 <__aeabi_fsub>
 800422c:	2100      	movs	r1, #0
 800422e:	4680      	mov	r8, r0
 8004230:	f7fc ff3a 	bl	80010a8 <__aeabi_fcmpge>
 8004234:	2800      	cmp	r0, #0
 8004236:	f040 80d6 	bne.w	80043e6 <neai_anomalydetection_learn+0x57a>
 800423a:	2000      	movs	r0, #0
 800423c:	69e1      	ldr	r1, [r4, #28]
 800423e:	61a0      	str	r0, [r4, #24]
 8004240:	4608      	mov	r0, r1
 8004242:	f7fc fd7f 	bl	8000d44 <__aeabi_fmul>
 8004246:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800424a:	4681      	mov	r9, r0
 800424c:	4641      	mov	r1, r8
 800424e:	4640      	mov	r0, r8
 8004250:	f7fc fd78 	bl	8000d44 <__aeabi_fmul>
 8004254:	4601      	mov	r1, r0
 8004256:	4648      	mov	r0, r9
 8004258:	f7fc fc6c 	bl	8000b34 <__addsf3>
 800425c:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 8004260:	4681      	mov	r9, r0
 8004262:	4641      	mov	r1, r8
 8004264:	4650      	mov	r0, sl
 8004266:	f7fc fc63 	bl	8000b30 <__aeabi_fsub>
 800426a:	4639      	mov	r1, r7
 800426c:	f7fc fe1e 	bl	8000eac <__aeabi_fdiv>
 8004270:	4641      	mov	r1, r8
 8004272:	f7fc fc5f 	bl	8000b34 <__addsf3>
 8004276:	4680      	mov	r8, r0
 8004278:	4651      	mov	r1, sl
 800427a:	f8c5 801c 	str.w	r8, [r5, #28]
 800427e:	4650      	mov	r0, sl
 8004280:	f7fc fd60 	bl	8000d44 <__aeabi_fmul>
 8004284:	4649      	mov	r1, r9
 8004286:	f7fc fc53 	bl	8000b30 <__aeabi_fsub>
 800428a:	4639      	mov	r1, r7
 800428c:	f7fc fe0e 	bl	8000eac <__aeabi_fdiv>
 8004290:	4601      	mov	r1, r0
 8004292:	4648      	mov	r0, r9
 8004294:	f7fc fc4e 	bl	8000b34 <__addsf3>
 8004298:	4641      	mov	r1, r8
 800429a:	4681      	mov	r9, r0
 800429c:	4640      	mov	r0, r8
 800429e:	f7fc fd51 	bl	8000d44 <__aeabi_fmul>
 80042a2:	4601      	mov	r1, r0
 80042a4:	4648      	mov	r0, r9
 80042a6:	f7fc fc43 	bl	8000b30 <__aeabi_fsub>
 80042aa:	2100      	movs	r1, #0
 80042ac:	4680      	mov	r8, r0
 80042ae:	f7fc fefb 	bl	80010a8 <__aeabi_fcmpge>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	f040 8093 	bne.w	80043de <neai_anomalydetection_learn+0x572>
 80042b8:	2000      	movs	r0, #0
 80042ba:	6a21      	ldr	r1, [r4, #32]
 80042bc:	61e0      	str	r0, [r4, #28]
 80042be:	4608      	mov	r0, r1
 80042c0:	f7fc fd40 	bl	8000d44 <__aeabi_fmul>
 80042c4:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80042c8:	4681      	mov	r9, r0
 80042ca:	4641      	mov	r1, r8
 80042cc:	4640      	mov	r0, r8
 80042ce:	f7fc fd39 	bl	8000d44 <__aeabi_fmul>
 80042d2:	4601      	mov	r1, r0
 80042d4:	4648      	mov	r0, r9
 80042d6:	f7fc fc2d 	bl	8000b34 <__addsf3>
 80042da:	f8d6 a020 	ldr.w	sl, [r6, #32]
 80042de:	4681      	mov	r9, r0
 80042e0:	4641      	mov	r1, r8
 80042e2:	4650      	mov	r0, sl
 80042e4:	f7fc fc24 	bl	8000b30 <__aeabi_fsub>
 80042e8:	4639      	mov	r1, r7
 80042ea:	f7fc fddf 	bl	8000eac <__aeabi_fdiv>
 80042ee:	4641      	mov	r1, r8
 80042f0:	f7fc fc20 	bl	8000b34 <__addsf3>
 80042f4:	4680      	mov	r8, r0
 80042f6:	4651      	mov	r1, sl
 80042f8:	f8c5 8020 	str.w	r8, [r5, #32]
 80042fc:	4650      	mov	r0, sl
 80042fe:	f7fc fd21 	bl	8000d44 <__aeabi_fmul>
 8004302:	4649      	mov	r1, r9
 8004304:	f7fc fc14 	bl	8000b30 <__aeabi_fsub>
 8004308:	4639      	mov	r1, r7
 800430a:	f7fc fdcf 	bl	8000eac <__aeabi_fdiv>
 800430e:	4601      	mov	r1, r0
 8004310:	4648      	mov	r0, r9
 8004312:	f7fc fc0f 	bl	8000b34 <__addsf3>
 8004316:	4641      	mov	r1, r8
 8004318:	4681      	mov	r9, r0
 800431a:	4640      	mov	r0, r8
 800431c:	f7fc fd12 	bl	8000d44 <__aeabi_fmul>
 8004320:	4601      	mov	r1, r0
 8004322:	4648      	mov	r0, r9
 8004324:	f7fc fc04 	bl	8000b30 <__aeabi_fsub>
 8004328:	2100      	movs	r1, #0
 800432a:	4680      	mov	r8, r0
 800432c:	f7fc febc 	bl	80010a8 <__aeabi_fcmpge>
 8004330:	2800      	cmp	r0, #0
 8004332:	d150      	bne.n	80043d6 <neai_anomalydetection_learn+0x56a>
 8004334:	2000      	movs	r0, #0
 8004336:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004338:	6220      	str	r0, [r4, #32]
 800433a:	4608      	mov	r0, r1
 800433c:	f7fc fd02 	bl	8000d44 <__aeabi_fmul>
 8004340:	f8d5 9024 	ldr.w	r9, [r5, #36]	@ 0x24
 8004344:	4680      	mov	r8, r0
 8004346:	4649      	mov	r1, r9
 8004348:	4648      	mov	r0, r9
 800434a:	f7fc fcfb 	bl	8000d44 <__aeabi_fmul>
 800434e:	4601      	mov	r1, r0
 8004350:	4640      	mov	r0, r8
 8004352:	f7fc fbef 	bl	8000b34 <__addsf3>
 8004356:	f8d6 a024 	ldr.w	sl, [r6, #36]	@ 0x24
 800435a:	4680      	mov	r8, r0
 800435c:	4649      	mov	r1, r9
 800435e:	4650      	mov	r0, sl
 8004360:	f7fc fbe6 	bl	8000b30 <__aeabi_fsub>
 8004364:	4639      	mov	r1, r7
 8004366:	f7fc fda1 	bl	8000eac <__aeabi_fdiv>
 800436a:	4649      	mov	r1, r9
 800436c:	f7fc fbe2 	bl	8000b34 <__addsf3>
 8004370:	4651      	mov	r1, sl
 8004372:	4606      	mov	r6, r0
 8004374:	6268      	str	r0, [r5, #36]	@ 0x24
 8004376:	4650      	mov	r0, sl
 8004378:	f7fc fce4 	bl	8000d44 <__aeabi_fmul>
 800437c:	4641      	mov	r1, r8
 800437e:	f7fc fbd7 	bl	8000b30 <__aeabi_fsub>
 8004382:	4639      	mov	r1, r7
 8004384:	f7fc fd92 	bl	8000eac <__aeabi_fdiv>
 8004388:	4601      	mov	r1, r0
 800438a:	4640      	mov	r0, r8
 800438c:	f7fc fbd2 	bl	8000b34 <__addsf3>
 8004390:	4631      	mov	r1, r6
 8004392:	4605      	mov	r5, r0
 8004394:	4630      	mov	r0, r6
 8004396:	f7fc fcd5 	bl	8000d44 <__aeabi_fmul>
 800439a:	4601      	mov	r1, r0
 800439c:	4628      	mov	r0, r5
 800439e:	f7fc fbc7 	bl	8000b30 <__aeabi_fsub>
 80043a2:	2100      	movs	r1, #0
 80043a4:	4605      	mov	r5, r0
 80043a6:	f7fc fe7f 	bl	80010a8 <__aeabi_fcmpge>
 80043aa:	b978      	cbnz	r0, 80043cc <neai_anomalydetection_learn+0x560>
 80043ac:	2300      	movs	r3, #0
 80043ae:	9a00      	ldr	r2, [sp, #0]
 80043b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80043b2:	2a09      	cmp	r2, #9
 80043b4:	bf8c      	ite	hi
 80043b6:	207f      	movhi	r0, #127	@ 0x7f
 80043b8:	207e      	movls	r0, #126	@ 0x7e
 80043ba:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <neai_anomalydetection_learn+0x63c>)
 80043bc:	7018      	strb	r0, [r3, #0]
 80043be:	b005      	add	sp, #20
 80043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c4:	4640      	mov	r0, r8
 80043c6:	f003 fcb3 	bl	8007d30 <sqrtf>
 80043ca:	e5b0      	b.n	8003f2e <neai_anomalydetection_learn+0xc2>
 80043cc:	4628      	mov	r0, r5
 80043ce:	f003 fcaf 	bl	8007d30 <sqrtf>
 80043d2:	4603      	mov	r3, r0
 80043d4:	e7eb      	b.n	80043ae <neai_anomalydetection_learn+0x542>
 80043d6:	4640      	mov	r0, r8
 80043d8:	f003 fcaa 	bl	8007d30 <sqrtf>
 80043dc:	e7ab      	b.n	8004336 <neai_anomalydetection_learn+0x4ca>
 80043de:	4640      	mov	r0, r8
 80043e0:	f003 fca6 	bl	8007d30 <sqrtf>
 80043e4:	e769      	b.n	80042ba <neai_anomalydetection_learn+0x44e>
 80043e6:	4640      	mov	r0, r8
 80043e8:	f003 fca2 	bl	8007d30 <sqrtf>
 80043ec:	e726      	b.n	800423c <neai_anomalydetection_learn+0x3d0>
 80043ee:	4640      	mov	r0, r8
 80043f0:	f003 fc9e 	bl	8007d30 <sqrtf>
 80043f4:	e6e3      	b.n	80041be <neai_anomalydetection_learn+0x352>
 80043f6:	4640      	mov	r0, r8
 80043f8:	f003 fc9a 	bl	8007d30 <sqrtf>
 80043fc:	e6a0      	b.n	8004140 <neai_anomalydetection_learn+0x2d4>
 80043fe:	4640      	mov	r0, r8
 8004400:	f003 fc96 	bl	8007d30 <sqrtf>
 8004404:	e653      	b.n	80040ae <neai_anomalydetection_learn+0x242>
 8004406:	4640      	mov	r0, r8
 8004408:	f003 fc92 	bl	8007d30 <sqrtf>
 800440c:	e60f      	b.n	800402e <neai_anomalydetection_learn+0x1c2>
 800440e:	4640      	mov	r0, r8
 8004410:	f003 fc8e 	bl	8007d30 <sqrtf>
 8004414:	e5cb      	b.n	8003fae <neai_anomalydetection_learn+0x142>
 8004416:	4c25      	ldr	r4, [pc, #148]	@ (80044ac <neai_anomalydetection_learn+0x640>)
 8004418:	2100      	movs	r1, #0
 800441a:	f8d4 8000 	ldr.w	r8, [r4]
 800441e:	6837      	ldr	r7, [r6, #0]
 8004420:	4640      	mov	r0, r8
 8004422:	f8d5 9000 	ldr.w	r9, [r5]
 8004426:	f7fc fe21 	bl	800106c <__aeabi_fcmpeq>
 800442a:	2800      	cmp	r0, #0
 800442c:	d142      	bne.n	80044b4 <neai_anomalydetection_learn+0x648>
 800442e:	4649      	mov	r1, r9
 8004430:	4638      	mov	r0, r7
 8004432:	f7fc fb7d 	bl	8000b30 <__aeabi_fsub>
 8004436:	2100      	movs	r1, #0
 8004438:	4607      	mov	r7, r0
 800443a:	f7fc fe21 	bl	8001080 <__aeabi_fcmplt>
 800443e:	2800      	cmp	r0, #0
 8004440:	f040 824b 	bne.w	80048da <neai_anomalydetection_learn+0xa6e>
 8004444:	4641      	mov	r1, r8
 8004446:	4638      	mov	r0, r7
 8004448:	f7fc fd30 	bl	8000eac <__aeabi_fdiv>
 800444c:	2100      	movs	r1, #0
 800444e:	4607      	mov	r7, r0
 8004450:	f7fc fe34 	bl	80010bc <__aeabi_fcmpgt>
 8004454:	2800      	cmp	r0, #0
 8004456:	f040 825f 	bne.w	8004918 <neai_anomalydetection_learn+0xaac>
 800445a:	2100      	movs	r1, #0
 800445c:	4638      	mov	r0, r7
 800445e:	f7fc fb69 	bl	8000b34 <__addsf3>
 8004462:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8004466:	4680      	mov	r8, r0
 8004468:	2100      	movs	r1, #0
 800446a:	4648      	mov	r0, r9
 800446c:	f7fc fdfe 	bl	800106c <__aeabi_fcmpeq>
 8004470:	2800      	cmp	r0, #0
 8004472:	f000 822c 	beq.w	80048ce <neai_anomalydetection_learn+0xa62>
 8004476:	4641      	mov	r1, r8
 8004478:	480d      	ldr	r0, [pc, #52]	@ (80044b0 <neai_anomalydetection_learn+0x644>)
 800447a:	f7fc fb59 	bl	8000b30 <__aeabi_fsub>
 800447e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004482:	f7fc fc5f 	bl	8000d44 <__aeabi_fmul>
 8004486:	4641      	mov	r1, r8
 8004488:	f7fc fb54 	bl	8000b34 <__addsf3>
 800448c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8004490:	4680      	mov	r8, r0
 8004492:	2100      	movs	r1, #0
 8004494:	4648      	mov	r0, r9
 8004496:	f7fc fde9 	bl	800106c <__aeabi_fcmpeq>
 800449a:	2800      	cmp	r0, #0
 800449c:	f040 8238 	bne.w	8004910 <neai_anomalydetection_learn+0xaa4>
 80044a0:	68b0      	ldr	r0, [r6, #8]
 80044a2:	68a9      	ldr	r1, [r5, #8]
 80044a4:	4f02      	ldr	r7, [pc, #8]	@ (80044b0 <neai_anomalydetection_learn+0x644>)
 80044a6:	e029      	b.n	80044fc <neai_anomalydetection_learn+0x690>
 80044a8:	200001d8 	.word	0x200001d8
 80044ac:	2000022c 	.word	0x2000022c
 80044b0:	42c80000 	.word	0x42c80000
 80044b4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80044b8:	2100      	movs	r1, #0
 80044ba:	4648      	mov	r0, r9
 80044bc:	f7fc fdd6 	bl	800106c <__aeabi_fcmpeq>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	f000 81e4 	beq.w	800488e <neai_anomalydetection_learn+0xa22>
 80044c6:	f8df 92b4 	ldr.w	r9, [pc, #692]	@ 800477c <neai_anomalydetection_learn+0x910>
 80044ca:	46c8      	mov	r8, r9
 80044cc:	464f      	mov	r7, r9
 80044ce:	4641      	mov	r1, r8
 80044d0:	4648      	mov	r0, r9
 80044d2:	f7fc fb2d 	bl	8000b30 <__aeabi_fsub>
 80044d6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80044da:	f7fc fc33 	bl	8000d44 <__aeabi_fmul>
 80044de:	4641      	mov	r1, r8
 80044e0:	f7fc fb28 	bl	8000b34 <__addsf3>
 80044e4:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80044e8:	4680      	mov	r8, r0
 80044ea:	2100      	movs	r1, #0
 80044ec:	4648      	mov	r0, r9
 80044ee:	f7fc fdbd 	bl	800106c <__aeabi_fcmpeq>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f040 8209 	bne.w	800490a <neai_anomalydetection_learn+0xa9e>
 80044f8:	68b0      	ldr	r0, [r6, #8]
 80044fa:	68a9      	ldr	r1, [r5, #8]
 80044fc:	f7fc fb18 	bl	8000b30 <__aeabi_fsub>
 8004500:	2100      	movs	r1, #0
 8004502:	4682      	mov	sl, r0
 8004504:	f7fc fdbc 	bl	8001080 <__aeabi_fcmplt>
 8004508:	b108      	cbz	r0, 800450e <neai_anomalydetection_learn+0x6a2>
 800450a:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 800450e:	4649      	mov	r1, r9
 8004510:	4650      	mov	r0, sl
 8004512:	f7fc fccb 	bl	8000eac <__aeabi_fdiv>
 8004516:	4681      	mov	r9, r0
 8004518:	4639      	mov	r1, r7
 800451a:	4648      	mov	r0, r9
 800451c:	f7fc fdce 	bl	80010bc <__aeabi_fcmpgt>
 8004520:	b100      	cbz	r0, 8004524 <neai_anomalydetection_learn+0x6b8>
 8004522:	464f      	mov	r7, r9
 8004524:	4641      	mov	r1, r8
 8004526:	4648      	mov	r0, r9
 8004528:	f7fc fb02 	bl	8000b30 <__aeabi_fsub>
 800452c:	4994      	ldr	r1, [pc, #592]	@ (8004780 <neai_anomalydetection_learn+0x914>)
 800452e:	f7fc fcbd 	bl	8000eac <__aeabi_fdiv>
 8004532:	4641      	mov	r1, r8
 8004534:	f7fc fafe 	bl	8000b34 <__addsf3>
 8004538:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800453c:	4680      	mov	r8, r0
 800453e:	2100      	movs	r1, #0
 8004540:	4648      	mov	r0, r9
 8004542:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8004546:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 800454a:	f7fc fd8f 	bl	800106c <__aeabi_fcmpeq>
 800454e:	2800      	cmp	r0, #0
 8004550:	f040 81d8 	bne.w	8004904 <neai_anomalydetection_learn+0xa98>
 8004554:	4659      	mov	r1, fp
 8004556:	4650      	mov	r0, sl
 8004558:	f7fc faea 	bl	8000b30 <__aeabi_fsub>
 800455c:	2100      	movs	r1, #0
 800455e:	4682      	mov	sl, r0
 8004560:	f7fc fd8e 	bl	8001080 <__aeabi_fcmplt>
 8004564:	b108      	cbz	r0, 800456a <neai_anomalydetection_learn+0x6fe>
 8004566:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 800456a:	4649      	mov	r1, r9
 800456c:	4650      	mov	r0, sl
 800456e:	f7fc fc9d 	bl	8000eac <__aeabi_fdiv>
 8004572:	4681      	mov	r9, r0
 8004574:	4649      	mov	r1, r9
 8004576:	4638      	mov	r0, r7
 8004578:	f7fc fd82 	bl	8001080 <__aeabi_fcmplt>
 800457c:	b100      	cbz	r0, 8004580 <neai_anomalydetection_learn+0x714>
 800457e:	464f      	mov	r7, r9
 8004580:	4641      	mov	r1, r8
 8004582:	4648      	mov	r0, r9
 8004584:	f7fc fad4 	bl	8000b30 <__aeabi_fsub>
 8004588:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800458c:	f7fc fbda 	bl	8000d44 <__aeabi_fmul>
 8004590:	4641      	mov	r1, r8
 8004592:	f7fc facf 	bl	8000b34 <__addsf3>
 8004596:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800459a:	4680      	mov	r8, r0
 800459c:	2100      	movs	r1, #0
 800459e:	4648      	mov	r0, r9
 80045a0:	f8d6 a010 	ldr.w	sl, [r6, #16]
 80045a4:	f8d5 b010 	ldr.w	fp, [r5, #16]
 80045a8:	f7fc fd60 	bl	800106c <__aeabi_fcmpeq>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	f040 81a6 	bne.w	80048fe <neai_anomalydetection_learn+0xa92>
 80045b2:	4659      	mov	r1, fp
 80045b4:	4650      	mov	r0, sl
 80045b6:	f7fc fabb 	bl	8000b30 <__aeabi_fsub>
 80045ba:	2100      	movs	r1, #0
 80045bc:	4682      	mov	sl, r0
 80045be:	f7fc fd5f 	bl	8001080 <__aeabi_fcmplt>
 80045c2:	b108      	cbz	r0, 80045c8 <neai_anomalydetection_learn+0x75c>
 80045c4:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 80045c8:	4649      	mov	r1, r9
 80045ca:	4650      	mov	r0, sl
 80045cc:	f7fc fc6e 	bl	8000eac <__aeabi_fdiv>
 80045d0:	4681      	mov	r9, r0
 80045d2:	4649      	mov	r1, r9
 80045d4:	4638      	mov	r0, r7
 80045d6:	f7fc fd53 	bl	8001080 <__aeabi_fcmplt>
 80045da:	b100      	cbz	r0, 80045de <neai_anomalydetection_learn+0x772>
 80045dc:	464f      	mov	r7, r9
 80045de:	4641      	mov	r1, r8
 80045e0:	4648      	mov	r0, r9
 80045e2:	f7fc faa5 	bl	8000b30 <__aeabi_fsub>
 80045e6:	4967      	ldr	r1, [pc, #412]	@ (8004784 <neai_anomalydetection_learn+0x918>)
 80045e8:	f7fc fc60 	bl	8000eac <__aeabi_fdiv>
 80045ec:	4641      	mov	r1, r8
 80045ee:	f7fc faa1 	bl	8000b34 <__addsf3>
 80045f2:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80045f6:	4680      	mov	r8, r0
 80045f8:	2100      	movs	r1, #0
 80045fa:	4648      	mov	r0, r9
 80045fc:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8004600:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8004604:	f7fc fd32 	bl	800106c <__aeabi_fcmpeq>
 8004608:	2800      	cmp	r0, #0
 800460a:	f040 8172 	bne.w	80048f2 <neai_anomalydetection_learn+0xa86>
 800460e:	4659      	mov	r1, fp
 8004610:	4650      	mov	r0, sl
 8004612:	f7fc fa8d 	bl	8000b30 <__aeabi_fsub>
 8004616:	2100      	movs	r1, #0
 8004618:	4682      	mov	sl, r0
 800461a:	f7fc fd31 	bl	8001080 <__aeabi_fcmplt>
 800461e:	b108      	cbz	r0, 8004624 <neai_anomalydetection_learn+0x7b8>
 8004620:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 8004624:	4649      	mov	r1, r9
 8004626:	4650      	mov	r0, sl
 8004628:	f7fc fc40 	bl	8000eac <__aeabi_fdiv>
 800462c:	4681      	mov	r9, r0
 800462e:	4649      	mov	r1, r9
 8004630:	4638      	mov	r0, r7
 8004632:	f7fc fd25 	bl	8001080 <__aeabi_fcmplt>
 8004636:	b100      	cbz	r0, 800463a <neai_anomalydetection_learn+0x7ce>
 8004638:	464f      	mov	r7, r9
 800463a:	4641      	mov	r1, r8
 800463c:	4648      	mov	r0, r9
 800463e:	f7fc fa77 	bl	8000b30 <__aeabi_fsub>
 8004642:	4951      	ldr	r1, [pc, #324]	@ (8004788 <neai_anomalydetection_learn+0x91c>)
 8004644:	f7fc fc32 	bl	8000eac <__aeabi_fdiv>
 8004648:	4641      	mov	r1, r8
 800464a:	f7fc fa73 	bl	8000b34 <__addsf3>
 800464e:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8004652:	4680      	mov	r8, r0
 8004654:	2100      	movs	r1, #0
 8004656:	4648      	mov	r0, r9
 8004658:	f8d6 a018 	ldr.w	sl, [r6, #24]
 800465c:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8004660:	f7fc fd04 	bl	800106c <__aeabi_fcmpeq>
 8004664:	2800      	cmp	r0, #0
 8004666:	f040 8141 	bne.w	80048ec <neai_anomalydetection_learn+0xa80>
 800466a:	4659      	mov	r1, fp
 800466c:	4650      	mov	r0, sl
 800466e:	f7fc fa5f 	bl	8000b30 <__aeabi_fsub>
 8004672:	2100      	movs	r1, #0
 8004674:	4682      	mov	sl, r0
 8004676:	f7fc fd03 	bl	8001080 <__aeabi_fcmplt>
 800467a:	b108      	cbz	r0, 8004680 <neai_anomalydetection_learn+0x814>
 800467c:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 8004680:	4649      	mov	r1, r9
 8004682:	4650      	mov	r0, sl
 8004684:	f7fc fc12 	bl	8000eac <__aeabi_fdiv>
 8004688:	4681      	mov	r9, r0
 800468a:	4649      	mov	r1, r9
 800468c:	4638      	mov	r0, r7
 800468e:	f7fc fcf7 	bl	8001080 <__aeabi_fcmplt>
 8004692:	b100      	cbz	r0, 8004696 <neai_anomalydetection_learn+0x82a>
 8004694:	464f      	mov	r7, r9
 8004696:	4641      	mov	r1, r8
 8004698:	4648      	mov	r0, r9
 800469a:	f7fc fa49 	bl	8000b30 <__aeabi_fsub>
 800469e:	493b      	ldr	r1, [pc, #236]	@ (800478c <neai_anomalydetection_learn+0x920>)
 80046a0:	f7fc fc04 	bl	8000eac <__aeabi_fdiv>
 80046a4:	4641      	mov	r1, r8
 80046a6:	f7fc fa45 	bl	8000b34 <__addsf3>
 80046aa:	f8d4 901c 	ldr.w	r9, [r4, #28]
 80046ae:	4680      	mov	r8, r0
 80046b0:	2100      	movs	r1, #0
 80046b2:	4648      	mov	r0, r9
 80046b4:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 80046b8:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 80046bc:	f7fc fcd6 	bl	800106c <__aeabi_fcmpeq>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	f040 8110 	bne.w	80048e6 <neai_anomalydetection_learn+0xa7a>
 80046c6:	4659      	mov	r1, fp
 80046c8:	4650      	mov	r0, sl
 80046ca:	f7fc fa31 	bl	8000b30 <__aeabi_fsub>
 80046ce:	2100      	movs	r1, #0
 80046d0:	4682      	mov	sl, r0
 80046d2:	f7fc fcd5 	bl	8001080 <__aeabi_fcmplt>
 80046d6:	b108      	cbz	r0, 80046dc <neai_anomalydetection_learn+0x870>
 80046d8:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 80046dc:	4649      	mov	r1, r9
 80046de:	4650      	mov	r0, sl
 80046e0:	f7fc fbe4 	bl	8000eac <__aeabi_fdiv>
 80046e4:	4681      	mov	r9, r0
 80046e6:	4649      	mov	r1, r9
 80046e8:	4638      	mov	r0, r7
 80046ea:	f7fc fcc9 	bl	8001080 <__aeabi_fcmplt>
 80046ee:	b100      	cbz	r0, 80046f2 <neai_anomalydetection_learn+0x886>
 80046f0:	464f      	mov	r7, r9
 80046f2:	4641      	mov	r1, r8
 80046f4:	4648      	mov	r0, r9
 80046f6:	f7fc fa1b 	bl	8000b30 <__aeabi_fsub>
 80046fa:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80046fe:	f7fc fb21 	bl	8000d44 <__aeabi_fmul>
 8004702:	4641      	mov	r1, r8
 8004704:	f7fc fa16 	bl	8000b34 <__addsf3>
 8004708:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800470c:	4680      	mov	r8, r0
 800470e:	2100      	movs	r1, #0
 8004710:	4648      	mov	r0, r9
 8004712:	f8d6 a020 	ldr.w	sl, [r6, #32]
 8004716:	f8d5 b020 	ldr.w	fp, [r5, #32]
 800471a:	f7fc fca7 	bl	800106c <__aeabi_fcmpeq>
 800471e:	2800      	cmp	r0, #0
 8004720:	f040 80de 	bne.w	80048e0 <neai_anomalydetection_learn+0xa74>
 8004724:	4659      	mov	r1, fp
 8004726:	4650      	mov	r0, sl
 8004728:	f7fc fa02 	bl	8000b30 <__aeabi_fsub>
 800472c:	2100      	movs	r1, #0
 800472e:	4682      	mov	sl, r0
 8004730:	f7fc fca6 	bl	8001080 <__aeabi_fcmplt>
 8004734:	b108      	cbz	r0, 800473a <neai_anomalydetection_learn+0x8ce>
 8004736:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 800473a:	4649      	mov	r1, r9
 800473c:	4650      	mov	r0, sl
 800473e:	f7fc fbb5 	bl	8000eac <__aeabi_fdiv>
 8004742:	4681      	mov	r9, r0
 8004744:	4649      	mov	r1, r9
 8004746:	4638      	mov	r0, r7
 8004748:	f7fc fc9a 	bl	8001080 <__aeabi_fcmplt>
 800474c:	b100      	cbz	r0, 8004750 <neai_anomalydetection_learn+0x8e4>
 800474e:	464f      	mov	r7, r9
 8004750:	4641      	mov	r1, r8
 8004752:	4648      	mov	r0, r9
 8004754:	f7fc f9ec 	bl	8000b30 <__aeabi_fsub>
 8004758:	490d      	ldr	r1, [pc, #52]	@ (8004790 <neai_anomalydetection_learn+0x924>)
 800475a:	f7fc fba7 	bl	8000eac <__aeabi_fdiv>
 800475e:	4641      	mov	r1, r8
 8004760:	f7fc f9e8 	bl	8000b34 <__addsf3>
 8004764:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8004768:	4683      	mov	fp, r0
 800476a:	2100      	movs	r1, #0
 800476c:	4640      	mov	r0, r8
 800476e:	f8d6 9024 	ldr.w	r9, [r6, #36]	@ 0x24
 8004772:	f8d5 a024 	ldr.w	sl, [r5, #36]	@ 0x24
 8004776:	f7fc fc79 	bl	800106c <__aeabi_fcmpeq>
 800477a:	e00b      	b.n	8004794 <neai_anomalydetection_learn+0x928>
 800477c:	42c80000 	.word	0x42c80000
 8004780:	40400000 	.word	0x40400000
 8004784:	40a00000 	.word	0x40a00000
 8004788:	40c00000 	.word	0x40c00000
 800478c:	40e00000 	.word	0x40e00000
 8004790:	41100000 	.word	0x41100000
 8004794:	2800      	cmp	r0, #0
 8004796:	f040 80af 	bne.w	80048f8 <neai_anomalydetection_learn+0xa8c>
 800479a:	4651      	mov	r1, sl
 800479c:	4648      	mov	r0, r9
 800479e:	f7fc f9c7 	bl	8000b30 <__aeabi_fsub>
 80047a2:	2100      	movs	r1, #0
 80047a4:	4681      	mov	r9, r0
 80047a6:	f7fc fc6b 	bl	8001080 <__aeabi_fcmplt>
 80047aa:	b108      	cbz	r0, 80047b0 <neai_anomalydetection_learn+0x944>
 80047ac:	f109 4900 	add.w	r9, r9, #2147483648	@ 0x80000000
 80047b0:	4648      	mov	r0, r9
 80047b2:	4641      	mov	r1, r8
 80047b4:	f7fc fb7a 	bl	8000eac <__aeabi_fdiv>
 80047b8:	4681      	mov	r9, r0
 80047ba:	4639      	mov	r1, r7
 80047bc:	4648      	mov	r0, r9
 80047be:	f7fc fc7d 	bl	80010bc <__aeabi_fcmpgt>
 80047c2:	b100      	cbz	r0, 80047c6 <neai_anomalydetection_learn+0x95a>
 80047c4:	464f      	mov	r7, r9
 80047c6:	f8df a178 	ldr.w	sl, [pc, #376]	@ 8004940 <neai_anomalydetection_learn+0xad4>
 80047ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004944 <neai_anomalydetection_learn+0xad8>)
 80047cc:	f8da 3000 	ldr.w	r3, [sl]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	9303      	str	r3, [sp, #12]
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	9302      	str	r3, [sp, #8]
 80047da:	f7fc fa5b 	bl	8000c94 <__aeabi_ui2f>
 80047de:	4680      	mov	r8, r0
 80047e0:	4659      	mov	r1, fp
 80047e2:	4648      	mov	r0, r9
 80047e4:	f7fc f9a4 	bl	8000b30 <__aeabi_fsub>
 80047e8:	4957      	ldr	r1, [pc, #348]	@ (8004948 <neai_anomalydetection_learn+0xadc>)
 80047ea:	f7fc fb5f 	bl	8000eac <__aeabi_fdiv>
 80047ee:	4659      	mov	r1, fp
 80047f0:	f7fc f9a0 	bl	8000b34 <__addsf3>
 80047f4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80047f8:	4649      	mov	r1, r9
 80047fa:	f7fc f999 	bl	8000b30 <__aeabi_fsub>
 80047fe:	4641      	mov	r1, r8
 8004800:	f7fc fb54 	bl	8000eac <__aeabi_fdiv>
 8004804:	4649      	mov	r1, r9
 8004806:	f7fc f995 	bl	8000b34 <__addsf3>
 800480a:	4684      	mov	ip, r0
 800480c:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 800494c <neai_anomalydetection_learn+0xae0>
 8004810:	4a4c      	ldr	r2, [pc, #304]	@ (8004944 <neai_anomalydetection_learn+0xad8>)
 8004812:	f8d9 b000 	ldr.w	fp, [r9]
 8004816:	f8c2 c000 	str.w	ip, [r2]
 800481a:	4659      	mov	r1, fp
 800481c:	4638      	mov	r0, r7
 800481e:	4667      	mov	r7, ip
 8004820:	f7fc f986 	bl	8000b30 <__aeabi_fsub>
 8004824:	4641      	mov	r1, r8
 8004826:	f7fc fb41 	bl	8000eac <__aeabi_fdiv>
 800482a:	4659      	mov	r1, fp
 800482c:	f7fc f982 	bl	8000b34 <__addsf3>
 8004830:	9b03      	ldr	r3, [sp, #12]
 8004832:	4680      	mov	r8, r0
 8004834:	f8ca 3000 	str.w	r3, [sl]
 8004838:	f8c9 0000 	str.w	r0, [r9]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f43f ab32 	beq.w	8003ea6 <neai_anomalydetection_learn+0x3a>
 8004842:	4b43      	ldr	r3, [pc, #268]	@ (8004950 <neai_anomalydetection_learn+0xae4>)
 8004844:	4638      	mov	r0, r7
 8004846:	681f      	ldr	r7, [r3, #0]
 8004848:	4639      	mov	r1, r7
 800484a:	f7fc fa7b 	bl	8000d44 <__aeabi_fmul>
 800484e:	f7fb fdeb 	bl	8000428 <__aeabi_f2d>
 8004852:	2200      	movs	r2, #0
 8004854:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <neai_anomalydetection_learn+0xae8>)
 8004856:	f003 fa85 	bl	8007d64 <fmax>
 800485a:	f7fc f915 	bl	8000a88 <__aeabi_d2f>
 800485e:	493e      	ldr	r1, [pc, #248]	@ (8004958 <neai_anomalydetection_learn+0xaec>)
 8004860:	f003 fabe 	bl	8007de0 <fminf>
 8004864:	4b3d      	ldr	r3, [pc, #244]	@ (800495c <neai_anomalydetection_learn+0xaf0>)
 8004866:	4639      	mov	r1, r7
 8004868:	6018      	str	r0, [r3, #0]
 800486a:	4640      	mov	r0, r8
 800486c:	f7fc fa6a 	bl	8000d44 <__aeabi_fmul>
 8004870:	f7fb fdda 	bl	8000428 <__aeabi_f2d>
 8004874:	4b3a      	ldr	r3, [pc, #232]	@ (8004960 <neai_anomalydetection_learn+0xaf4>)
 8004876:	2200      	movs	r2, #0
 8004878:	f003 fa74 	bl	8007d64 <fmax>
 800487c:	f7fc f904 	bl	8000a88 <__aeabi_d2f>
 8004880:	4938      	ldr	r1, [pc, #224]	@ (8004964 <neai_anomalydetection_learn+0xaf8>)
 8004882:	f003 faad 	bl	8007de0 <fminf>
 8004886:	4b38      	ldr	r3, [pc, #224]	@ (8004968 <neai_anomalydetection_learn+0xafc>)
 8004888:	6018      	str	r0, [r3, #0]
 800488a:	f7ff bb0c 	b.w	8003ea6 <neai_anomalydetection_learn+0x3a>
 800488e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 8004892:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8004896:	4647      	mov	r7, r8
 8004898:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800489c:	4659      	mov	r1, fp
 800489e:	4650      	mov	r0, sl
 80048a0:	f7fc f946 	bl	8000b30 <__aeabi_fsub>
 80048a4:	2100      	movs	r1, #0
 80048a6:	4682      	mov	sl, r0
 80048a8:	f7fc fbea 	bl	8001080 <__aeabi_fcmplt>
 80048ac:	b108      	cbz	r0, 80048b2 <neai_anomalydetection_learn+0xa46>
 80048ae:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 80048b2:	4649      	mov	r1, r9
 80048b4:	4650      	mov	r0, sl
 80048b6:	f7fc faf9 	bl	8000eac <__aeabi_fdiv>
 80048ba:	4681      	mov	r9, r0
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	f7fc fbde 	bl	8001080 <__aeabi_fcmplt>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	f43f ae02 	beq.w	80044ce <neai_anomalydetection_learn+0x662>
 80048ca:	464f      	mov	r7, r9
 80048cc:	e5ff      	b.n	80044ce <neai_anomalydetection_learn+0x662>
 80048ce:	2700      	movs	r7, #0
 80048d0:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80048d4:	f8d5 b004 	ldr.w	fp, [r5, #4]
 80048d8:	e7e0      	b.n	800489c <neai_anomalydetection_learn+0xa30>
 80048da:	f107 4700 	add.w	r7, r7, #2147483648	@ 0x80000000
 80048de:	e5b1      	b.n	8004444 <neai_anomalydetection_learn+0x5d8>
 80048e0:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 80048e4:	e72e      	b.n	8004744 <neai_anomalydetection_learn+0x8d8>
 80048e6:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 80048ea:	e6fc      	b.n	80046e6 <neai_anomalydetection_learn+0x87a>
 80048ec:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 80048f0:	e6cb      	b.n	800468a <neai_anomalydetection_learn+0x81e>
 80048f2:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 80048f6:	e69a      	b.n	800462e <neai_anomalydetection_learn+0x7c2>
 80048f8:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 80048fc:	e75d      	b.n	80047ba <neai_anomalydetection_learn+0x94e>
 80048fe:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 8004902:	e666      	b.n	80045d2 <neai_anomalydetection_learn+0x766>
 8004904:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 8004908:	e634      	b.n	8004574 <neai_anomalydetection_learn+0x708>
 800490a:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 800490e:	e603      	b.n	8004518 <neai_anomalydetection_learn+0x6ac>
 8004910:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 8004914:	464f      	mov	r7, r9
 8004916:	e605      	b.n	8004524 <neai_anomalydetection_learn+0x6b8>
 8004918:	2100      	movs	r1, #0
 800491a:	4638      	mov	r0, r7
 800491c:	f7fc f90a 	bl	8000b34 <__addsf3>
 8004920:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8004924:	4680      	mov	r8, r0
 8004926:	2100      	movs	r1, #0
 8004928:	4648      	mov	r0, r9
 800492a:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800492e:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8004932:	f7fc fb9b 	bl	800106c <__aeabi_fcmpeq>
 8004936:	2800      	cmp	r0, #0
 8004938:	d0b0      	beq.n	800489c <neai_anomalydetection_learn+0xa30>
 800493a:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8004964 <neai_anomalydetection_learn+0xaf8>
 800493e:	e7bd      	b.n	80048bc <neai_anomalydetection_learn+0xa50>
 8004940:	200001e4 	.word	0x200001e4
 8004944:	200001ec 	.word	0x200001ec
 8004948:	41200000 	.word	0x41200000
 800494c:	200001e8 	.word	0x200001e8
 8004950:	200001f8 	.word	0x200001f8
 8004954:	3ff00000 	.word	0x3ff00000
 8004958:	40a00000 	.word	0x40a00000
 800495c:	20000200 	.word	0x20000200
 8004960:	40080000 	.word	0x40080000
 8004964:	42c80000 	.word	0x42c80000
 8004968:	200001fc 	.word	0x200001fc
 800496c:	00000000 	.word	0x00000000

08004970 <neai_anomalydetection_detect>:
 8004970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	26ff      	movs	r6, #255	@ 0xff
 8004976:	4a38      	ldr	r2, [pc, #224]	@ (8004a58 <neai_anomalydetection_detect+0xe8>)
 8004978:	b085      	sub	sp, #20
 800497a:	7813      	ldrb	r3, [r2, #0]
 800497c:	700e      	strb	r6, [r1, #0]
 800497e:	f1a3 057d 	sub.w	r5, r3, #125	@ 0x7d
 8004982:	2d01      	cmp	r5, #1
 8004984:	f240 8273 	bls.w	8004e6e <neai_anomalydetection_detect+0x4fe>
 8004988:	2b80      	cmp	r3, #128	@ 0x80
 800498a:	f000 8270 	beq.w	8004e6e <neai_anomalydetection_detect+0x4fe>
 800498e:	4b33      	ldr	r3, [pc, #204]	@ (8004a5c <neai_anomalydetection_detect+0xec>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b09      	cmp	r3, #9
 8004994:	f240 826f 	bls.w	8004e76 <neai_anomalydetection_detect+0x506>
 8004998:	460c      	mov	r4, r1
 800499a:	f7ff f9ff 	bl	8003d9c <funchad53.constprop.0>
 800499e:	4b30      	ldr	r3, [pc, #192]	@ (8004a60 <neai_anomalydetection_detect+0xf0>)
 80049a0:	4d30      	ldr	r5, [pc, #192]	@ (8004a64 <neai_anomalydetection_detect+0xf4>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	f7fb fd40 	bl	8000428 <__aeabi_f2d>
 80049a8:	a329      	add	r3, pc, #164	@ (adr r3, 8004a50 <neai_anomalydetection_detect+0xe0>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	f7fb fd93 	bl	80004d8 <__aeabi_dmul>
 80049b2:	f7fc f869 	bl	8000a88 <__aeabi_d2f>
 80049b6:	4629      	mov	r1, r5
 80049b8:	4606      	mov	r6, r0
 80049ba:	f7fc fb75 	bl	80010a8 <__aeabi_fcmpge>
 80049be:	2800      	cmp	r0, #0
 80049c0:	f040 8260 	bne.w	8004e84 <neai_anomalydetection_detect+0x514>
 80049c4:	4630      	mov	r0, r6
 80049c6:	2100      	movs	r1, #0
 80049c8:	f7fc fb78 	bl	80010bc <__aeabi_fcmpgt>
 80049cc:	4b26      	ldr	r3, [pc, #152]	@ (8004a68 <neai_anomalydetection_detect+0xf8>)
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f000 826d 	beq.w	8004eae <neai_anomalydetection_detect+0x53e>
 80049d4:	462e      	mov	r6, r5
 80049d6:	4a25      	ldr	r2, [pc, #148]	@ (8004a6c <neai_anomalydetection_detect+0xfc>)
 80049d8:	601d      	str	r5, [r3, #0]
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	4f24      	ldr	r7, [pc, #144]	@ (8004a70 <neai_anomalydetection_detect+0x100>)
 80049de:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8004a74 <neai_anomalydetection_detect+0x104>
 80049e2:	683d      	ldr	r5, [r7, #0]
 80049e4:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8004a78 <neai_anomalydetection_detect+0x108>
 80049e8:	2100      	movs	r1, #0
 80049ea:	4628      	mov	r0, r5
 80049ec:	f8d9 a000 	ldr.w	sl, [r9]
 80049f0:	f8d8 b000 	ldr.w	fp, [r8]
 80049f4:	f7fc fb3a 	bl	800106c <__aeabi_fcmpeq>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d13f      	bne.n	8004a7c <neai_anomalydetection_detect+0x10c>
 80049fc:	4659      	mov	r1, fp
 80049fe:	4650      	mov	r0, sl
 8004a00:	f7fc f896 	bl	8000b30 <__aeabi_fsub>
 8004a04:	2100      	movs	r1, #0
 8004a06:	4682      	mov	sl, r0
 8004a08:	f7fc fb3a 	bl	8001080 <__aeabi_fcmplt>
 8004a0c:	b108      	cbz	r0, 8004a12 <neai_anomalydetection_detect+0xa2>
 8004a0e:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 8004a12:	4629      	mov	r1, r5
 8004a14:	4650      	mov	r0, sl
 8004a16:	f7fc fa49 	bl	8000eac <__aeabi_fdiv>
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	f7fc fb4d 	bl	80010bc <__aeabi_fcmpgt>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	f040 8284 	bne.w	8004f30 <neai_anomalydetection_detect+0x5c0>
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f7fc f882 	bl	8000b34 <__addsf3>
 8004a30:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8004a34:	4682      	mov	sl, r0
 8004a36:	2100      	movs	r1, #0
 8004a38:	4658      	mov	r0, fp
 8004a3a:	f7fc fb17 	bl	800106c <__aeabi_fcmpeq>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f040 825b 	bne.w	8004efa <neai_anomalydetection_detect+0x58a>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8004a4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004a4e:	e23c      	b.n	8004eca <neai_anomalydetection_detect+0x55a>
 8004a50:	e147ae14 	.word	0xe147ae14
 8004a54:	3ff6147a 	.word	0x3ff6147a
 8004a58:	200001d8 	.word	0x200001d8
 8004a5c:	200001dc 	.word	0x200001dc
 8004a60:	2000000c 	.word	0x2000000c
 8004a64:	3c23d70a 	.word	0x3c23d70a
 8004a68:	20001350 	.word	0x20001350
 8004a6c:	3c75c28f 	.word	0x3c75c28f
 8004a70:	2000022c 	.word	0x2000022c
 8004a74:	20001328 	.word	0x20001328
 8004a78:	20000204 	.word	0x20000204
 8004a7c:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8004a80:	2100      	movs	r1, #0
 8004a82:	4658      	mov	r0, fp
 8004a84:	f7fc faf2 	bl	800106c <__aeabi_fcmpeq>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f000 8218 	beq.w	8004ebe <neai_anomalydetection_detect+0x54e>
 8004a8e:	f8df a2a8 	ldr.w	sl, [pc, #680]	@ 8004d38 <neai_anomalydetection_detect+0x3c8>
 8004a92:	46d3      	mov	fp, sl
 8004a94:	4655      	mov	r5, sl
 8004a96:	4651      	mov	r1, sl
 8004a98:	4658      	mov	r0, fp
 8004a9a:	f7fc f849 	bl	8000b30 <__aeabi_fsub>
 8004a9e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004aa2:	f7fc f94f 	bl	8000d44 <__aeabi_fmul>
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	f7fc f844 	bl	8000b34 <__addsf3>
 8004aac:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8004ab0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004ab4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8004ab8:	4682      	mov	sl, r0
 8004aba:	2100      	movs	r1, #0
 8004abc:	4658      	mov	r0, fp
 8004abe:	9303      	str	r3, [sp, #12]
 8004ac0:	9202      	str	r2, [sp, #8]
 8004ac2:	f7fc fad3 	bl	800106c <__aeabi_fcmpeq>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	f040 822f 	bne.w	8004f2a <neai_anomalydetection_detect+0x5ba>
 8004acc:	9902      	ldr	r1, [sp, #8]
 8004ace:	9803      	ldr	r0, [sp, #12]
 8004ad0:	f7fc f82e 	bl	8000b30 <__aeabi_fsub>
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	9002      	str	r0, [sp, #8]
 8004ad8:	f7fc fad2 	bl	8001080 <__aeabi_fcmplt>
 8004adc:	9b02      	ldr	r3, [sp, #8]
 8004ade:	b108      	cbz	r0, 8004ae4 <neai_anomalydetection_detect+0x174>
 8004ae0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc f9e0 	bl	8000eac <__aeabi_fdiv>
 8004aec:	4683      	mov	fp, r0
 8004aee:	4629      	mov	r1, r5
 8004af0:	4658      	mov	r0, fp
 8004af2:	f7fc fae3 	bl	80010bc <__aeabi_fcmpgt>
 8004af6:	b100      	cbz	r0, 8004afa <neai_anomalydetection_detect+0x18a>
 8004af8:	465d      	mov	r5, fp
 8004afa:	4651      	mov	r1, sl
 8004afc:	4658      	mov	r0, fp
 8004afe:	f7fc f817 	bl	8000b30 <__aeabi_fsub>
 8004b02:	498e      	ldr	r1, [pc, #568]	@ (8004d3c <neai_anomalydetection_detect+0x3cc>)
 8004b04:	f7fc f9d2 	bl	8000eac <__aeabi_fdiv>
 8004b08:	4651      	mov	r1, sl
 8004b0a:	f7fc f813 	bl	8000b34 <__addsf3>
 8004b0e:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8004b12:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004b16:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4658      	mov	r0, fp
 8004b20:	9303      	str	r3, [sp, #12]
 8004b22:	9202      	str	r2, [sp, #8]
 8004b24:	f7fc faa2 	bl	800106c <__aeabi_fcmpeq>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f040 81fb 	bne.w	8004f24 <neai_anomalydetection_detect+0x5b4>
 8004b2e:	9902      	ldr	r1, [sp, #8]
 8004b30:	9803      	ldr	r0, [sp, #12]
 8004b32:	f7fb fffd 	bl	8000b30 <__aeabi_fsub>
 8004b36:	2100      	movs	r1, #0
 8004b38:	9002      	str	r0, [sp, #8]
 8004b3a:	f7fc faa1 	bl	8001080 <__aeabi_fcmplt>
 8004b3e:	9b02      	ldr	r3, [sp, #8]
 8004b40:	b108      	cbz	r0, 8004b46 <neai_anomalydetection_detect+0x1d6>
 8004b42:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004b46:	4659      	mov	r1, fp
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fc f9af 	bl	8000eac <__aeabi_fdiv>
 8004b4e:	4683      	mov	fp, r0
 8004b50:	4629      	mov	r1, r5
 8004b52:	4658      	mov	r0, fp
 8004b54:	f7fc fab2 	bl	80010bc <__aeabi_fcmpgt>
 8004b58:	b100      	cbz	r0, 8004b5c <neai_anomalydetection_detect+0x1ec>
 8004b5a:	465d      	mov	r5, fp
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	4658      	mov	r0, fp
 8004b60:	f7fb ffe6 	bl	8000b30 <__aeabi_fsub>
 8004b64:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8004b68:	f7fc f8ec 	bl	8000d44 <__aeabi_fmul>
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	f7fb ffe1 	bl	8000b34 <__addsf3>
 8004b72:	f8d7 b010 	ldr.w	fp, [r7, #16]
 8004b76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004b7e:	4682      	mov	sl, r0
 8004b80:	2100      	movs	r1, #0
 8004b82:	4658      	mov	r0, fp
 8004b84:	9303      	str	r3, [sp, #12]
 8004b86:	9202      	str	r2, [sp, #8]
 8004b88:	f7fc fa70 	bl	800106c <__aeabi_fcmpeq>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f040 81c6 	bne.w	8004f1e <neai_anomalydetection_detect+0x5ae>
 8004b92:	9902      	ldr	r1, [sp, #8]
 8004b94:	9803      	ldr	r0, [sp, #12]
 8004b96:	f7fb ffcb 	bl	8000b30 <__aeabi_fsub>
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	f7fc fa6f 	bl	8001080 <__aeabi_fcmplt>
 8004ba2:	9b02      	ldr	r3, [sp, #8]
 8004ba4:	b108      	cbz	r0, 8004baa <neai_anomalydetection_detect+0x23a>
 8004ba6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004baa:	4659      	mov	r1, fp
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fc f97d 	bl	8000eac <__aeabi_fdiv>
 8004bb2:	4683      	mov	fp, r0
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	4658      	mov	r0, fp
 8004bb8:	f7fc fa80 	bl	80010bc <__aeabi_fcmpgt>
 8004bbc:	b100      	cbz	r0, 8004bc0 <neai_anomalydetection_detect+0x250>
 8004bbe:	465d      	mov	r5, fp
 8004bc0:	4651      	mov	r1, sl
 8004bc2:	4658      	mov	r0, fp
 8004bc4:	f7fb ffb4 	bl	8000b30 <__aeabi_fsub>
 8004bc8:	495d      	ldr	r1, [pc, #372]	@ (8004d40 <neai_anomalydetection_detect+0x3d0>)
 8004bca:	f7fc f96f 	bl	8000eac <__aeabi_fdiv>
 8004bce:	4651      	mov	r1, sl
 8004bd0:	f7fb ffb0 	bl	8000b34 <__addsf3>
 8004bd4:	f8d7 b014 	ldr.w	fp, [r7, #20]
 8004bd8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004bdc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8004be0:	4682      	mov	sl, r0
 8004be2:	2100      	movs	r1, #0
 8004be4:	4658      	mov	r0, fp
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	9203      	str	r2, [sp, #12]
 8004bea:	f7fc fa3f 	bl	800106c <__aeabi_fcmpeq>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f040 8192 	bne.w	8004f18 <neai_anomalydetection_detect+0x5a8>
 8004bf4:	9903      	ldr	r1, [sp, #12]
 8004bf6:	9802      	ldr	r0, [sp, #8]
 8004bf8:	f7fb ff9a 	bl	8000b30 <__aeabi_fsub>
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	9002      	str	r0, [sp, #8]
 8004c00:	f7fc fa3e 	bl	8001080 <__aeabi_fcmplt>
 8004c04:	9b02      	ldr	r3, [sp, #8]
 8004c06:	b108      	cbz	r0, 8004c0c <neai_anomalydetection_detect+0x29c>
 8004c08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fc f94c 	bl	8000eac <__aeabi_fdiv>
 8004c14:	4683      	mov	fp, r0
 8004c16:	4659      	mov	r1, fp
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f7fc fa31 	bl	8001080 <__aeabi_fcmplt>
 8004c1e:	b100      	cbz	r0, 8004c22 <neai_anomalydetection_detect+0x2b2>
 8004c20:	465d      	mov	r5, fp
 8004c22:	4651      	mov	r1, sl
 8004c24:	4658      	mov	r0, fp
 8004c26:	f7fb ff83 	bl	8000b30 <__aeabi_fsub>
 8004c2a:	4946      	ldr	r1, [pc, #280]	@ (8004d44 <neai_anomalydetection_detect+0x3d4>)
 8004c2c:	f7fc f93e 	bl	8000eac <__aeabi_fdiv>
 8004c30:	4651      	mov	r1, sl
 8004c32:	f7fb ff7f 	bl	8000b34 <__addsf3>
 8004c36:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8004c3a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004c3e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8004c42:	4682      	mov	sl, r0
 8004c44:	2100      	movs	r1, #0
 8004c46:	4658      	mov	r0, fp
 8004c48:	9302      	str	r3, [sp, #8]
 8004c4a:	9203      	str	r2, [sp, #12]
 8004c4c:	f7fc fa0e 	bl	800106c <__aeabi_fcmpeq>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	f040 815e 	bne.w	8004f12 <neai_anomalydetection_detect+0x5a2>
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	9802      	ldr	r0, [sp, #8]
 8004c5a:	f7fb ff69 	bl	8000b30 <__aeabi_fsub>
 8004c5e:	2100      	movs	r1, #0
 8004c60:	9002      	str	r0, [sp, #8]
 8004c62:	f7fc fa0d 	bl	8001080 <__aeabi_fcmplt>
 8004c66:	9b02      	ldr	r3, [sp, #8]
 8004c68:	b108      	cbz	r0, 8004c6e <neai_anomalydetection_detect+0x2fe>
 8004c6a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004c6e:	4659      	mov	r1, fp
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fc f91b 	bl	8000eac <__aeabi_fdiv>
 8004c76:	4683      	mov	fp, r0
 8004c78:	4659      	mov	r1, fp
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f7fc fa00 	bl	8001080 <__aeabi_fcmplt>
 8004c80:	b100      	cbz	r0, 8004c84 <neai_anomalydetection_detect+0x314>
 8004c82:	465d      	mov	r5, fp
 8004c84:	4651      	mov	r1, sl
 8004c86:	4658      	mov	r0, fp
 8004c88:	f7fb ff52 	bl	8000b30 <__aeabi_fsub>
 8004c8c:	492e      	ldr	r1, [pc, #184]	@ (8004d48 <neai_anomalydetection_detect+0x3d8>)
 8004c8e:	f7fc f90d 	bl	8000eac <__aeabi_fdiv>
 8004c92:	4651      	mov	r1, sl
 8004c94:	f7fb ff4e 	bl	8000b34 <__addsf3>
 8004c98:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8004c9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ca0:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8004ca4:	4682      	mov	sl, r0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4658      	mov	r0, fp
 8004caa:	9302      	str	r3, [sp, #8]
 8004cac:	9203      	str	r2, [sp, #12]
 8004cae:	f7fc f9dd 	bl	800106c <__aeabi_fcmpeq>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f040 812a 	bne.w	8004f0c <neai_anomalydetection_detect+0x59c>
 8004cb8:	9903      	ldr	r1, [sp, #12]
 8004cba:	9802      	ldr	r0, [sp, #8]
 8004cbc:	f7fb ff38 	bl	8000b30 <__aeabi_fsub>
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	9002      	str	r0, [sp, #8]
 8004cc4:	f7fc f9dc 	bl	8001080 <__aeabi_fcmplt>
 8004cc8:	9b02      	ldr	r3, [sp, #8]
 8004cca:	b108      	cbz	r0, 8004cd0 <neai_anomalydetection_detect+0x360>
 8004ccc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fc f8ea 	bl	8000eac <__aeabi_fdiv>
 8004cd8:	4683      	mov	fp, r0
 8004cda:	4659      	mov	r1, fp
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f7fc f9cf 	bl	8001080 <__aeabi_fcmplt>
 8004ce2:	b100      	cbz	r0, 8004ce6 <neai_anomalydetection_detect+0x376>
 8004ce4:	465d      	mov	r5, fp
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	4658      	mov	r0, fp
 8004cea:	f7fb ff21 	bl	8000b30 <__aeabi_fsub>
 8004cee:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8004cf2:	f7fc f827 	bl	8000d44 <__aeabi_fmul>
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	f7fb ff1c 	bl	8000b34 <__addsf3>
 8004cfc:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8004d00:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8004d04:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004d08:	4682      	mov	sl, r0
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4658      	mov	r0, fp
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	9203      	str	r2, [sp, #12]
 8004d12:	f7fc f9ab 	bl	800106c <__aeabi_fcmpeq>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	f040 80f5 	bne.w	8004f06 <neai_anomalydetection_detect+0x596>
 8004d1c:	9903      	ldr	r1, [sp, #12]
 8004d1e:	9802      	ldr	r0, [sp, #8]
 8004d20:	f7fb ff06 	bl	8000b30 <__aeabi_fsub>
 8004d24:	2100      	movs	r1, #0
 8004d26:	9002      	str	r0, [sp, #8]
 8004d28:	f7fc f9aa 	bl	8001080 <__aeabi_fcmplt>
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	b168      	cbz	r0, 8004d4c <neai_anomalydetection_detect+0x3dc>
 8004d30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004d34:	e00a      	b.n	8004d4c <neai_anomalydetection_detect+0x3dc>
 8004d36:	bf00      	nop
 8004d38:	42c80000 	.word	0x42c80000
 8004d3c:	40400000 	.word	0x40400000
 8004d40:	40a00000 	.word	0x40a00000
 8004d44:	40c00000 	.word	0x40c00000
 8004d48:	40e00000 	.word	0x40e00000
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc f8ac 	bl	8000eac <__aeabi_fdiv>
 8004d54:	4683      	mov	fp, r0
 8004d56:	4659      	mov	r1, fp
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f7fc f991 	bl	8001080 <__aeabi_fcmplt>
 8004d5e:	b100      	cbz	r0, 8004d62 <neai_anomalydetection_detect+0x3f2>
 8004d60:	465d      	mov	r5, fp
 8004d62:	4651      	mov	r1, sl
 8004d64:	4658      	mov	r0, fp
 8004d66:	f7fb fee3 	bl	8000b30 <__aeabi_fsub>
 8004d6a:	497b      	ldr	r1, [pc, #492]	@ (8004f58 <neai_anomalydetection_detect+0x5e8>)
 8004d6c:	f7fc f89e 	bl	8000eac <__aeabi_fdiv>
 8004d70:	4651      	mov	r1, sl
 8004d72:	f7fb fedf 	bl	8000b34 <__addsf3>
 8004d76:	f8d7 a024 	ldr.w	sl, [r7, #36]	@ 0x24
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	4650      	mov	r0, sl
 8004d80:	f8d9 9024 	ldr.w	r9, [r9, #36]	@ 0x24
 8004d84:	f8d8 8024 	ldr.w	r8, [r8, #36]	@ 0x24
 8004d88:	f7fc f970 	bl	800106c <__aeabi_fcmpeq>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f040 80b7 	bne.w	8004f00 <neai_anomalydetection_detect+0x590>
 8004d92:	4641      	mov	r1, r8
 8004d94:	4648      	mov	r0, r9
 8004d96:	f7fb fecb 	bl	8000b30 <__aeabi_fsub>
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	f7fc f96f 	bl	8001080 <__aeabi_fcmplt>
 8004da2:	b108      	cbz	r0, 8004da8 <neai_anomalydetection_detect+0x438>
 8004da4:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8004da8:	4640      	mov	r0, r8
 8004daa:	4651      	mov	r1, sl
 8004dac:	f7fc f87e 	bl	8000eac <__aeabi_fdiv>
 8004db0:	4680      	mov	r8, r0
 8004db2:	4629      	mov	r1, r5
 8004db4:	4640      	mov	r0, r8
 8004db6:	f7fc f981 	bl	80010bc <__aeabi_fcmpgt>
 8004dba:	b100      	cbz	r0, 8004dbe <neai_anomalydetection_detect+0x44e>
 8004dbc:	4645      	mov	r5, r8
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	f7fb ffbf 	bl	8000d44 <__aeabi_fmul>
 8004dc6:	4b65      	ldr	r3, [pc, #404]	@ (8004f5c <neai_anomalydetection_detect+0x5ec>)
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	f7fc f86f 	bl	8000eac <__aeabi_fdiv>
 8004dce:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004dd2:	f7fb fead 	bl	8000b30 <__aeabi_fsub>
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	f7fb feac 	bl	8000b34 <__addsf3>
 8004ddc:	4b60      	ldr	r3, [pc, #384]	@ (8004f60 <neai_anomalydetection_detect+0x5f0>)
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	f7fb ffb0 	bl	8000d44 <__aeabi_fmul>
 8004de4:	f7fb fb20 	bl	8000428 <__aeabi_f2d>
 8004de8:	2200      	movs	r2, #0
 8004dea:	2300      	movs	r3, #0
 8004dec:	f002 ffba 	bl	8007d64 <fmax>
 8004df0:	f7fb fe4a 	bl	8000a88 <__aeabi_d2f>
 8004df4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004df8:	f002 fff2 	bl	8007de0 <fminf>
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4640      	mov	r0, r8
 8004e02:	f7fb fe95 	bl	8000b30 <__aeabi_fsub>
 8004e06:	4957      	ldr	r1, [pc, #348]	@ (8004f64 <neai_anomalydetection_detect+0x5f4>)
 8004e08:	f7fc f850 	bl	8000eac <__aeabi_fdiv>
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	f7fb fe91 	bl	8000b34 <__addsf3>
 8004e12:	4631      	mov	r1, r6
 8004e14:	f7fb ff96 	bl	8000d44 <__aeabi_fmul>
 8004e18:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <neai_anomalydetection_detect+0x5f8>)
 8004e1a:	6819      	ldr	r1, [r3, #0]
 8004e1c:	f7fc f846 	bl	8000eac <__aeabi_fdiv>
 8004e20:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004e24:	f7fb fe84 	bl	8000b30 <__aeabi_fsub>
 8004e28:	4601      	mov	r1, r0
 8004e2a:	f7fb fe83 	bl	8000b34 <__addsf3>
 8004e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f6c <neai_anomalydetection_detect+0x5fc>)
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	f7fb ff87 	bl	8000d44 <__aeabi_fmul>
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fe7c 	bl	8000b34 <__addsf3>
 8004e3c:	9901      	ldr	r1, [sp, #4]
 8004e3e:	f7fb ff81 	bl	8000d44 <__aeabi_fmul>
 8004e42:	f7fb faf1 	bl	8000428 <__aeabi_f2d>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f002 ff8b 	bl	8007d64 <fmax>
 8004e4e:	f7fb fe1b 	bl	8000a88 <__aeabi_d2f>
 8004e52:	4944      	ldr	r1, [pc, #272]	@ (8004f64 <neai_anomalydetection_detect+0x5f4>)
 8004e54:	f002 ffc4 	bl	8007de0 <fminf>
 8004e58:	4601      	mov	r1, r0
 8004e5a:	4842      	ldr	r0, [pc, #264]	@ (8004f64 <neai_anomalydetection_detect+0x5f4>)
 8004e5c:	f7fb fe68 	bl	8000b30 <__aeabi_fsub>
 8004e60:	4940      	ldr	r1, [pc, #256]	@ (8004f64 <neai_anomalydetection_detect+0x5f4>)
 8004e62:	f7fb ff6f 	bl	8000d44 <__aeabi_fmul>
 8004e66:	f7fc f949 	bl	80010fc <__aeabi_f2uiz>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	7020      	strb	r0, [r4, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	b005      	add	sp, #20
 8004e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e76:	217e      	movs	r1, #126	@ 0x7e
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	7011      	strb	r1, [r2, #0]
 8004e7e:	b005      	add	sp, #20
 8004e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e84:	4d3a      	ldr	r5, [pc, #232]	@ (8004f70 <neai_anomalydetection_detect+0x600>)
 8004e86:	4630      	mov	r0, r6
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fc f903 	bl	8001094 <__aeabi_fcmple>
 8004e8e:	b928      	cbnz	r0, 8004e9c <neai_anomalydetection_detect+0x52c>
 8004e90:	4b38      	ldr	r3, [pc, #224]	@ (8004f74 <neai_anomalydetection_detect+0x604>)
 8004e92:	4a39      	ldr	r2, [pc, #228]	@ (8004f78 <neai_anomalydetection_detect+0x608>)
 8004e94:	462e      	mov	r6, r5
 8004e96:	9201      	str	r2, [sp, #4]
 8004e98:	601d      	str	r5, [r3, #0]
 8004e9a:	e59f      	b.n	80049dc <neai_anomalydetection_detect+0x6c>
 8004e9c:	4b35      	ldr	r3, [pc, #212]	@ (8004f74 <neai_anomalydetection_detect+0x604>)
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8004ea4:	601e      	str	r6, [r3, #0]
 8004ea6:	f7fb ff4d 	bl	8000d44 <__aeabi_fmul>
 8004eaa:	9001      	str	r0, [sp, #4]
 8004eac:	e596      	b.n	80049dc <neai_anomalydetection_detect+0x6c>
 8004eae:	681e      	ldr	r6, [r3, #0]
 8004eb0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f7fb ff45 	bl	8000d44 <__aeabi_fmul>
 8004eba:	9001      	str	r0, [sp, #4]
 8004ebc:	e58e      	b.n	80049dc <neai_anomalydetection_detect+0x6c>
 8004ebe:	4d2c      	ldr	r5, [pc, #176]	@ (8004f70 <neai_anomalydetection_detect+0x600>)
 8004ec0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8004ec4:	46aa      	mov	sl, r5
 8004ec6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004eca:	f7fb fe31 	bl	8000b30 <__aeabi_fsub>
 8004ece:	2100      	movs	r1, #0
 8004ed0:	9002      	str	r0, [sp, #8]
 8004ed2:	f7fc f8d5 	bl	8001080 <__aeabi_fcmplt>
 8004ed6:	9b02      	ldr	r3, [sp, #8]
 8004ed8:	b108      	cbz	r0, 8004ede <neai_anomalydetection_detect+0x56e>
 8004eda:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004ede:	4659      	mov	r1, fp
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb ffe3 	bl	8000eac <__aeabi_fdiv>
 8004ee6:	4683      	mov	fp, r0
 8004ee8:	4659      	mov	r1, fp
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7fc f8c8 	bl	8001080 <__aeabi_fcmplt>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	f43f add0 	beq.w	8004a96 <neai_anomalydetection_detect+0x126>
 8004ef6:	465d      	mov	r5, fp
 8004ef8:	e5cd      	b.n	8004a96 <neai_anomalydetection_detect+0x126>
 8004efa:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004efe:	e7fa      	b.n	8004ef6 <neai_anomalydetection_detect+0x586>
 8004f00:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f04:	e755      	b.n	8004db2 <neai_anomalydetection_detect+0x442>
 8004f06:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f0a:	e724      	b.n	8004d56 <neai_anomalydetection_detect+0x3e6>
 8004f0c:	f8df b060 	ldr.w	fp, [pc, #96]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f10:	e6e3      	b.n	8004cda <neai_anomalydetection_detect+0x36a>
 8004f12:	f8df b05c 	ldr.w	fp, [pc, #92]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f16:	e6af      	b.n	8004c78 <neai_anomalydetection_detect+0x308>
 8004f18:	f8df b054 	ldr.w	fp, [pc, #84]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f1c:	e67b      	b.n	8004c16 <neai_anomalydetection_detect+0x2a6>
 8004f1e:	f8df b050 	ldr.w	fp, [pc, #80]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f22:	e647      	b.n	8004bb4 <neai_anomalydetection_detect+0x244>
 8004f24:	f8df b048 	ldr.w	fp, [pc, #72]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f28:	e612      	b.n	8004b50 <neai_anomalydetection_detect+0x1e0>
 8004f2a:	f8df b044 	ldr.w	fp, [pc, #68]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f2e:	e5de      	b.n	8004aee <neai_anomalydetection_detect+0x17e>
 8004f30:	2100      	movs	r1, #0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f7fb fdfe 	bl	8000b34 <__addsf3>
 8004f38:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8004f3c:	4682      	mov	sl, r0
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4658      	mov	r0, fp
 8004f42:	f7fc f893 	bl	800106c <__aeabi_fcmpeq>
 8004f46:	b920      	cbnz	r0, 8004f52 <neai_anomalydetection_detect+0x5e2>
 8004f48:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8004f4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004f50:	e7bb      	b.n	8004eca <neai_anomalydetection_detect+0x55a>
 8004f52:	f8df b01c 	ldr.w	fp, [pc, #28]	@ 8004f70 <neai_anomalydetection_detect+0x600>
 8004f56:	e7c7      	b.n	8004ee8 <neai_anomalydetection_detect+0x578>
 8004f58:	41100000 	.word	0x41100000
 8004f5c:	200001fc 	.word	0x200001fc
 8004f60:	200001f0 	.word	0x200001f0
 8004f64:	41200000 	.word	0x41200000
 8004f68:	20000200 	.word	0x20000200
 8004f6c:	200001f4 	.word	0x200001f4
 8004f70:	42c80000 	.word	0x42c80000
 8004f74:	20001350 	.word	0x20001350
 8004f78:	43160000 	.word	0x43160000

08004f7c <_fminf>:
 8004f7c:	f002 bf30 	b.w	8007de0 <fminf>

08004f80 <neai_anomalydetection_init>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	2228      	movs	r2, #40	@ 0x28
 8004f84:	2100      	movs	r1, #0
 8004f86:	481e      	ldr	r0, [pc, #120]	@ (8005000 <neai_anomalydetection_init+0x80>)
 8004f88:	f000 fdf9 	bl	8005b7e <memset>
 8004f8c:	2228      	movs	r2, #40	@ 0x28
 8004f8e:	2100      	movs	r1, #0
 8004f90:	481c      	ldr	r0, [pc, #112]	@ (8005004 <neai_anomalydetection_init+0x84>)
 8004f92:	f000 fdf4 	bl	8005b7e <memset>
 8004f96:	2200      	movs	r2, #0
 8004f98:	4c1b      	ldr	r4, [pc, #108]	@ (8005008 <neai_anomalydetection_init+0x88>)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	6022      	str	r2, [r4, #0]
 8004f9e:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	4819      	ldr	r0, [pc, #100]	@ (800500c <neai_anomalydetection_init+0x8c>)
 8004fa6:	6002      	str	r2, [r0, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	@ (8005010 <neai_anomalydetection_init+0x90>)
 8004faa:	481a      	ldr	r0, [pc, #104]	@ (8005014 <neai_anomalydetection_init+0x94>)
 8004fac:	6014      	str	r4, [r2, #0]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	@ (8005018 <neai_anomalydetection_init+0x98>)
 8004fb0:	4c1a      	ldr	r4, [pc, #104]	@ (800501c <neai_anomalydetection_init+0x9c>)
 8004fb2:	6003      	str	r3, [r0, #0]
 8004fb4:	6014      	str	r4, [r2, #0]
 8004fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005020 <neai_anomalydetection_init+0xa0>)
 8004fb8:	4c1a      	ldr	r4, [pc, #104]	@ (8005024 <neai_anomalydetection_init+0xa4>)
 8004fba:	481b      	ldr	r0, [pc, #108]	@ (8005028 <neai_anomalydetection_init+0xa8>)
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800502c <neai_anomalydetection_init+0xac>)
 8004fc0:	4c1b      	ldr	r4, [pc, #108]	@ (8005030 <neai_anomalydetection_init+0xb0>)
 8004fc2:	6014      	str	r4, [r2, #0]
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <neai_anomalydetection_init+0xb4>)
 8004fc6:	4c1c      	ldr	r4, [pc, #112]	@ (8005038 <neai_anomalydetection_init+0xb8>)
 8004fc8:	6014      	str	r4, [r2, #0]
 8004fca:	4a1c      	ldr	r2, [pc, #112]	@ (800503c <neai_anomalydetection_init+0xbc>)
 8004fcc:	4c1c      	ldr	r4, [pc, #112]	@ (8005040 <neai_anomalydetection_init+0xc0>)
 8004fce:	6014      	str	r4, [r2, #0]
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <neai_anomalydetection_init+0xc4>)
 8004fd2:	4c1d      	ldr	r4, [pc, #116]	@ (8005048 <neai_anomalydetection_init+0xc8>)
 8004fd4:	7011      	strb	r1, [r2, #0]
 8004fd6:	491d      	ldr	r1, [pc, #116]	@ (800504c <neai_anomalydetection_init+0xcc>)
 8004fd8:	7023      	strb	r3, [r4, #0]
 8004fda:	f7ff ffcf 	bl	8004f7c <_fminf>
 8004fde:	4912      	ldr	r1, [pc, #72]	@ (8005028 <neai_anomalydetection_init+0xa8>)
 8004fe0:	f7fc f844 	bl	800106c <__aeabi_fcmpeq>
 8004fe4:	b120      	cbz	r0, 8004ff0 <neai_anomalydetection_init+0x70>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <neai_anomalydetection_init+0xd0>)
 8004fea:	7820      	ldrb	r0, [r4, #0]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	bd10      	pop	{r4, pc}
 8004ff0:	2381      	movs	r3, #129	@ 0x81
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	7023      	strb	r3, [r4, #0]
 8004ff8:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <neai_anomalydetection_init+0xd0>)
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	bd10      	pop	{r4, pc}
 8004ffe:	bf00      	nop
 8005000:	20000204 	.word	0x20000204
 8005004:	2000022c 	.word	0x2000022c
 8005008:	200001ec 	.word	0x200001ec
 800500c:	200001e8 	.word	0x200001e8
 8005010:	20000200 	.word	0x20000200
 8005014:	200001e4 	.word	0x200001e4
 8005018:	200001fc 	.word	0x200001fc
 800501c:	40400000 	.word	0x40400000
 8005020:	200001f8 	.word	0x200001f8
 8005024:	3f9eb852 	.word	0x3f9eb852
 8005028:	3f8ccccd 	.word	0x3f8ccccd
 800502c:	20001350 	.word	0x20001350
 8005030:	3fb0a3d7 	.word	0x3fb0a3d7
 8005034:	200001f4 	.word	0x200001f4
 8005038:	3f733333 	.word	0x3f733333
 800503c:	200001f0 	.word	0x200001f0
 8005040:	3da3d70a 	.word	0x3da3d70a
 8005044:	200001e0 	.word	0x200001e0
 8005048:	200001d8 	.word	0x200001d8
 800504c:	40066666 	.word	0x40066666
 8005050:	200001dc 	.word	0x200001dc

08005054 <__cvt>:
 8005054:	2b00      	cmp	r3, #0
 8005056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505a:	461d      	mov	r5, r3
 800505c:	bfbb      	ittet	lt
 800505e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005062:	461d      	movlt	r5, r3
 8005064:	2300      	movge	r3, #0
 8005066:	232d      	movlt	r3, #45	@ 0x2d
 8005068:	b088      	sub	sp, #32
 800506a:	4614      	mov	r4, r2
 800506c:	bfb8      	it	lt
 800506e:	4614      	movlt	r4, r2
 8005070:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005072:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005078:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800507c:	f023 0820 	bic.w	r8, r3, #32
 8005080:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005084:	d005      	beq.n	8005092 <__cvt+0x3e>
 8005086:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800508a:	d100      	bne.n	800508e <__cvt+0x3a>
 800508c:	3601      	adds	r6, #1
 800508e:	2302      	movs	r3, #2
 8005090:	e000      	b.n	8005094 <__cvt+0x40>
 8005092:	2303      	movs	r3, #3
 8005094:	aa07      	add	r2, sp, #28
 8005096:	9204      	str	r2, [sp, #16]
 8005098:	aa06      	add	r2, sp, #24
 800509a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800509e:	e9cd 3600 	strd	r3, r6, [sp]
 80050a2:	4622      	mov	r2, r4
 80050a4:	462b      	mov	r3, r5
 80050a6:	f000 fe83 	bl	8005db0 <_dtoa_r>
 80050aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80050ae:	4607      	mov	r7, r0
 80050b0:	d119      	bne.n	80050e6 <__cvt+0x92>
 80050b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80050b4:	07db      	lsls	r3, r3, #31
 80050b6:	d50e      	bpl.n	80050d6 <__cvt+0x82>
 80050b8:	eb00 0906 	add.w	r9, r0, r6
 80050bc:	2200      	movs	r2, #0
 80050be:	2300      	movs	r3, #0
 80050c0:	4620      	mov	r0, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	f7fb fc70 	bl	80009a8 <__aeabi_dcmpeq>
 80050c8:	b108      	cbz	r0, 80050ce <__cvt+0x7a>
 80050ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80050ce:	2230      	movs	r2, #48	@ 0x30
 80050d0:	9b07      	ldr	r3, [sp, #28]
 80050d2:	454b      	cmp	r3, r9
 80050d4:	d31e      	bcc.n	8005114 <__cvt+0xc0>
 80050d6:	4638      	mov	r0, r7
 80050d8:	9b07      	ldr	r3, [sp, #28]
 80050da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80050dc:	1bdb      	subs	r3, r3, r7
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	b008      	add	sp, #32
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050ea:	eb00 0906 	add.w	r9, r0, r6
 80050ee:	d1e5      	bne.n	80050bc <__cvt+0x68>
 80050f0:	7803      	ldrb	r3, [r0, #0]
 80050f2:	2b30      	cmp	r3, #48	@ 0x30
 80050f4:	d10a      	bne.n	800510c <__cvt+0xb8>
 80050f6:	2200      	movs	r2, #0
 80050f8:	2300      	movs	r3, #0
 80050fa:	4620      	mov	r0, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7fb fc53 	bl	80009a8 <__aeabi_dcmpeq>
 8005102:	b918      	cbnz	r0, 800510c <__cvt+0xb8>
 8005104:	f1c6 0601 	rsb	r6, r6, #1
 8005108:	f8ca 6000 	str.w	r6, [sl]
 800510c:	f8da 3000 	ldr.w	r3, [sl]
 8005110:	4499      	add	r9, r3
 8005112:	e7d3      	b.n	80050bc <__cvt+0x68>
 8005114:	1c59      	adds	r1, r3, #1
 8005116:	9107      	str	r1, [sp, #28]
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e7d9      	b.n	80050d0 <__cvt+0x7c>

0800511c <__exponent>:
 800511c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800511e:	2900      	cmp	r1, #0
 8005120:	bfb6      	itet	lt
 8005122:	232d      	movlt	r3, #45	@ 0x2d
 8005124:	232b      	movge	r3, #43	@ 0x2b
 8005126:	4249      	neglt	r1, r1
 8005128:	2909      	cmp	r1, #9
 800512a:	7002      	strb	r2, [r0, #0]
 800512c:	7043      	strb	r3, [r0, #1]
 800512e:	dd29      	ble.n	8005184 <__exponent+0x68>
 8005130:	f10d 0307 	add.w	r3, sp, #7
 8005134:	461d      	mov	r5, r3
 8005136:	270a      	movs	r7, #10
 8005138:	fbb1 f6f7 	udiv	r6, r1, r7
 800513c:	461a      	mov	r2, r3
 800513e:	fb07 1416 	mls	r4, r7, r6, r1
 8005142:	3430      	adds	r4, #48	@ 0x30
 8005144:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005148:	460c      	mov	r4, r1
 800514a:	2c63      	cmp	r4, #99	@ 0x63
 800514c:	4631      	mov	r1, r6
 800514e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005152:	dcf1      	bgt.n	8005138 <__exponent+0x1c>
 8005154:	3130      	adds	r1, #48	@ 0x30
 8005156:	1e94      	subs	r4, r2, #2
 8005158:	f803 1c01 	strb.w	r1, [r3, #-1]
 800515c:	4623      	mov	r3, r4
 800515e:	1c41      	adds	r1, r0, #1
 8005160:	42ab      	cmp	r3, r5
 8005162:	d30a      	bcc.n	800517a <__exponent+0x5e>
 8005164:	f10d 0309 	add.w	r3, sp, #9
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	42ac      	cmp	r4, r5
 800516c:	bf88      	it	hi
 800516e:	2300      	movhi	r3, #0
 8005170:	3302      	adds	r3, #2
 8005172:	4403      	add	r3, r0
 8005174:	1a18      	subs	r0, r3, r0
 8005176:	b003      	add	sp, #12
 8005178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800517e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005182:	e7ed      	b.n	8005160 <__exponent+0x44>
 8005184:	2330      	movs	r3, #48	@ 0x30
 8005186:	3130      	adds	r1, #48	@ 0x30
 8005188:	7083      	strb	r3, [r0, #2]
 800518a:	70c1      	strb	r1, [r0, #3]
 800518c:	1d03      	adds	r3, r0, #4
 800518e:	e7f1      	b.n	8005174 <__exponent+0x58>

08005190 <_printf_float>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	b091      	sub	sp, #68	@ 0x44
 8005196:	460c      	mov	r4, r1
 8005198:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800519c:	4616      	mov	r6, r2
 800519e:	461f      	mov	r7, r3
 80051a0:	4605      	mov	r5, r0
 80051a2:	f000 fcf5 	bl	8005b90 <_localeconv_r>
 80051a6:	6803      	ldr	r3, [r0, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	9308      	str	r3, [sp, #32]
 80051ac:	f7fa ffd0 	bl	8000150 <strlen>
 80051b0:	2300      	movs	r3, #0
 80051b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80051b4:	f8d8 3000 	ldr.w	r3, [r8]
 80051b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80051ba:	3307      	adds	r3, #7
 80051bc:	f023 0307 	bic.w	r3, r3, #7
 80051c0:	f103 0208 	add.w	r2, r3, #8
 80051c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051c8:	f8d4 b000 	ldr.w	fp, [r4]
 80051cc:	f8c8 2000 	str.w	r2, [r8]
 80051d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051da:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80051de:	f04f 32ff 	mov.w	r2, #4294967295
 80051e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051ea:	4b9c      	ldr	r3, [pc, #624]	@ (800545c <_printf_float+0x2cc>)
 80051ec:	f7fb fc0e 	bl	8000a0c <__aeabi_dcmpun>
 80051f0:	bb70      	cbnz	r0, 8005250 <_printf_float+0xc0>
 80051f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051f6:	f04f 32ff 	mov.w	r2, #4294967295
 80051fa:	4b98      	ldr	r3, [pc, #608]	@ (800545c <_printf_float+0x2cc>)
 80051fc:	f7fb fbe8 	bl	80009d0 <__aeabi_dcmple>
 8005200:	bb30      	cbnz	r0, 8005250 <_printf_float+0xc0>
 8005202:	2200      	movs	r2, #0
 8005204:	2300      	movs	r3, #0
 8005206:	4640      	mov	r0, r8
 8005208:	4649      	mov	r1, r9
 800520a:	f7fb fbd7 	bl	80009bc <__aeabi_dcmplt>
 800520e:	b110      	cbz	r0, 8005216 <_printf_float+0x86>
 8005210:	232d      	movs	r3, #45	@ 0x2d
 8005212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005216:	4a92      	ldr	r2, [pc, #584]	@ (8005460 <_printf_float+0x2d0>)
 8005218:	4b92      	ldr	r3, [pc, #584]	@ (8005464 <_printf_float+0x2d4>)
 800521a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800521e:	bf8c      	ite	hi
 8005220:	4690      	movhi	r8, r2
 8005222:	4698      	movls	r8, r3
 8005224:	2303      	movs	r3, #3
 8005226:	f04f 0900 	mov.w	r9, #0
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	f02b 0304 	bic.w	r3, fp, #4
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	4633      	mov	r3, r6
 8005234:	4621      	mov	r1, r4
 8005236:	4628      	mov	r0, r5
 8005238:	9700      	str	r7, [sp, #0]
 800523a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800523c:	f000 f9d4 	bl	80055e8 <_printf_common>
 8005240:	3001      	adds	r0, #1
 8005242:	f040 8090 	bne.w	8005366 <_printf_float+0x1d6>
 8005246:	f04f 30ff 	mov.w	r0, #4294967295
 800524a:	b011      	add	sp, #68	@ 0x44
 800524c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	4640      	mov	r0, r8
 8005256:	4649      	mov	r1, r9
 8005258:	f7fb fbd8 	bl	8000a0c <__aeabi_dcmpun>
 800525c:	b148      	cbz	r0, 8005272 <_printf_float+0xe2>
 800525e:	464b      	mov	r3, r9
 8005260:	2b00      	cmp	r3, #0
 8005262:	bfb8      	it	lt
 8005264:	232d      	movlt	r3, #45	@ 0x2d
 8005266:	4a80      	ldr	r2, [pc, #512]	@ (8005468 <_printf_float+0x2d8>)
 8005268:	bfb8      	it	lt
 800526a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800526e:	4b7f      	ldr	r3, [pc, #508]	@ (800546c <_printf_float+0x2dc>)
 8005270:	e7d3      	b.n	800521a <_printf_float+0x8a>
 8005272:	6863      	ldr	r3, [r4, #4]
 8005274:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	d13f      	bne.n	80052fc <_printf_float+0x16c>
 800527c:	2306      	movs	r3, #6
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	9206      	str	r2, [sp, #24]
 800528a:	aa0e      	add	r2, sp, #56	@ 0x38
 800528c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005290:	aa0d      	add	r2, sp, #52	@ 0x34
 8005292:	9203      	str	r2, [sp, #12]
 8005294:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005298:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800529c:	6863      	ldr	r3, [r4, #4]
 800529e:	4642      	mov	r2, r8
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	4628      	mov	r0, r5
 80052a4:	464b      	mov	r3, r9
 80052a6:	910a      	str	r1, [sp, #40]	@ 0x28
 80052a8:	f7ff fed4 	bl	8005054 <__cvt>
 80052ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052ae:	4680      	mov	r8, r0
 80052b0:	2947      	cmp	r1, #71	@ 0x47
 80052b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80052b4:	d128      	bne.n	8005308 <_printf_float+0x178>
 80052b6:	1cc8      	adds	r0, r1, #3
 80052b8:	db02      	blt.n	80052c0 <_printf_float+0x130>
 80052ba:	6863      	ldr	r3, [r4, #4]
 80052bc:	4299      	cmp	r1, r3
 80052be:	dd40      	ble.n	8005342 <_printf_float+0x1b2>
 80052c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80052c4:	fa5f fa8a 	uxtb.w	sl, sl
 80052c8:	4652      	mov	r2, sl
 80052ca:	3901      	subs	r1, #1
 80052cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80052d2:	f7ff ff23 	bl	800511c <__exponent>
 80052d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052d8:	4681      	mov	r9, r0
 80052da:	1813      	adds	r3, r2, r0
 80052dc:	2a01      	cmp	r2, #1
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	dc02      	bgt.n	80052e8 <_printf_float+0x158>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	07d2      	lsls	r2, r2, #31
 80052e6:	d501      	bpl.n	80052ec <_printf_float+0x15c>
 80052e8:	3301      	adds	r3, #1
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d09e      	beq.n	8005232 <_printf_float+0xa2>
 80052f4:	232d      	movs	r3, #45	@ 0x2d
 80052f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052fa:	e79a      	b.n	8005232 <_printf_float+0xa2>
 80052fc:	2947      	cmp	r1, #71	@ 0x47
 80052fe:	d1bf      	bne.n	8005280 <_printf_float+0xf0>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1bd      	bne.n	8005280 <_printf_float+0xf0>
 8005304:	2301      	movs	r3, #1
 8005306:	e7ba      	b.n	800527e <_printf_float+0xee>
 8005308:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800530c:	d9dc      	bls.n	80052c8 <_printf_float+0x138>
 800530e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005312:	d118      	bne.n	8005346 <_printf_float+0x1b6>
 8005314:	2900      	cmp	r1, #0
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	dd0b      	ble.n	8005332 <_printf_float+0x1a2>
 800531a:	6121      	str	r1, [r4, #16]
 800531c:	b913      	cbnz	r3, 8005324 <_printf_float+0x194>
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	07d0      	lsls	r0, r2, #31
 8005322:	d502      	bpl.n	800532a <_printf_float+0x19a>
 8005324:	3301      	adds	r3, #1
 8005326:	440b      	add	r3, r1
 8005328:	6123      	str	r3, [r4, #16]
 800532a:	f04f 0900 	mov.w	r9, #0
 800532e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005330:	e7dc      	b.n	80052ec <_printf_float+0x15c>
 8005332:	b913      	cbnz	r3, 800533a <_printf_float+0x1aa>
 8005334:	6822      	ldr	r2, [r4, #0]
 8005336:	07d2      	lsls	r2, r2, #31
 8005338:	d501      	bpl.n	800533e <_printf_float+0x1ae>
 800533a:	3302      	adds	r3, #2
 800533c:	e7f4      	b.n	8005328 <_printf_float+0x198>
 800533e:	2301      	movs	r3, #1
 8005340:	e7f2      	b.n	8005328 <_printf_float+0x198>
 8005342:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005348:	4299      	cmp	r1, r3
 800534a:	db05      	blt.n	8005358 <_printf_float+0x1c8>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	6121      	str	r1, [r4, #16]
 8005350:	07d8      	lsls	r0, r3, #31
 8005352:	d5ea      	bpl.n	800532a <_printf_float+0x19a>
 8005354:	1c4b      	adds	r3, r1, #1
 8005356:	e7e7      	b.n	8005328 <_printf_float+0x198>
 8005358:	2900      	cmp	r1, #0
 800535a:	bfcc      	ite	gt
 800535c:	2201      	movgt	r2, #1
 800535e:	f1c1 0202 	rsble	r2, r1, #2
 8005362:	4413      	add	r3, r2
 8005364:	e7e0      	b.n	8005328 <_printf_float+0x198>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	055a      	lsls	r2, r3, #21
 800536a:	d407      	bmi.n	800537c <_printf_float+0x1ec>
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	4642      	mov	r2, r8
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	d12b      	bne.n	80053d2 <_printf_float+0x242>
 800537a:	e764      	b.n	8005246 <_printf_float+0xb6>
 800537c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005380:	f240 80dc 	bls.w	800553c <_printf_float+0x3ac>
 8005384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005388:	2200      	movs	r2, #0
 800538a:	2300      	movs	r3, #0
 800538c:	f7fb fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005390:	2800      	cmp	r0, #0
 8005392:	d033      	beq.n	80053fc <_printf_float+0x26c>
 8005394:	2301      	movs	r3, #1
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	4a35      	ldr	r2, [pc, #212]	@ (8005470 <_printf_float+0x2e0>)
 800539c:	47b8      	blx	r7
 800539e:	3001      	adds	r0, #1
 80053a0:	f43f af51 	beq.w	8005246 <_printf_float+0xb6>
 80053a4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80053a8:	4543      	cmp	r3, r8
 80053aa:	db02      	blt.n	80053b2 <_printf_float+0x222>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	07d8      	lsls	r0, r3, #31
 80053b0:	d50f      	bpl.n	80053d2 <_printf_float+0x242>
 80053b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053b6:	4631      	mov	r1, r6
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	f43f af42 	beq.w	8005246 <_printf_float+0xb6>
 80053c2:	f04f 0900 	mov.w	r9, #0
 80053c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80053ca:	f104 0a1a 	add.w	sl, r4, #26
 80053ce:	45c8      	cmp	r8, r9
 80053d0:	dc09      	bgt.n	80053e6 <_printf_float+0x256>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	079b      	lsls	r3, r3, #30
 80053d6:	f100 8102 	bmi.w	80055de <_printf_float+0x44e>
 80053da:	68e0      	ldr	r0, [r4, #12]
 80053dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053de:	4298      	cmp	r0, r3
 80053e0:	bfb8      	it	lt
 80053e2:	4618      	movlt	r0, r3
 80053e4:	e731      	b.n	800524a <_printf_float+0xba>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4652      	mov	r2, sl
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f af28 	beq.w	8005246 <_printf_float+0xb6>
 80053f6:	f109 0901 	add.w	r9, r9, #1
 80053fa:	e7e8      	b.n	80053ce <_printf_float+0x23e>
 80053fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053fe:	2b00      	cmp	r3, #0
 8005400:	dc38      	bgt.n	8005474 <_printf_float+0x2e4>
 8005402:	2301      	movs	r3, #1
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <_printf_float+0x2e0>)
 800540a:	47b8      	blx	r7
 800540c:	3001      	adds	r0, #1
 800540e:	f43f af1a 	beq.w	8005246 <_printf_float+0xb6>
 8005412:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005416:	ea59 0303 	orrs.w	r3, r9, r3
 800541a:	d102      	bne.n	8005422 <_printf_float+0x292>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	07d9      	lsls	r1, r3, #31
 8005420:	d5d7      	bpl.n	80053d2 <_printf_float+0x242>
 8005422:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	f43f af0a 	beq.w	8005246 <_printf_float+0xb6>
 8005432:	f04f 0a00 	mov.w	sl, #0
 8005436:	f104 0b1a 	add.w	fp, r4, #26
 800543a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800543c:	425b      	negs	r3, r3
 800543e:	4553      	cmp	r3, sl
 8005440:	dc01      	bgt.n	8005446 <_printf_float+0x2b6>
 8005442:	464b      	mov	r3, r9
 8005444:	e793      	b.n	800536e <_printf_float+0x1de>
 8005446:	2301      	movs	r3, #1
 8005448:	465a      	mov	r2, fp
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	f43f aef8 	beq.w	8005246 <_printf_float+0xb6>
 8005456:	f10a 0a01 	add.w	sl, sl, #1
 800545a:	e7ee      	b.n	800543a <_printf_float+0x2aa>
 800545c:	7fefffff 	.word	0x7fefffff
 8005460:	08008016 	.word	0x08008016
 8005464:	08008012 	.word	0x08008012
 8005468:	0800801e 	.word	0x0800801e
 800546c:	0800801a 	.word	0x0800801a
 8005470:	08008022 	.word	0x08008022
 8005474:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005476:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800547a:	4553      	cmp	r3, sl
 800547c:	bfa8      	it	ge
 800547e:	4653      	movge	r3, sl
 8005480:	2b00      	cmp	r3, #0
 8005482:	4699      	mov	r9, r3
 8005484:	dc36      	bgt.n	80054f4 <_printf_float+0x364>
 8005486:	f04f 0b00 	mov.w	fp, #0
 800548a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800548e:	f104 021a 	add.w	r2, r4, #26
 8005492:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005494:	930a      	str	r3, [sp, #40]	@ 0x28
 8005496:	eba3 0309 	sub.w	r3, r3, r9
 800549a:	455b      	cmp	r3, fp
 800549c:	dc31      	bgt.n	8005502 <_printf_float+0x372>
 800549e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054a0:	459a      	cmp	sl, r3
 80054a2:	dc3a      	bgt.n	800551a <_printf_float+0x38a>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	07da      	lsls	r2, r3, #31
 80054a8:	d437      	bmi.n	800551a <_printf_float+0x38a>
 80054aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054ac:	ebaa 0903 	sub.w	r9, sl, r3
 80054b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054b2:	ebaa 0303 	sub.w	r3, sl, r3
 80054b6:	4599      	cmp	r9, r3
 80054b8:	bfa8      	it	ge
 80054ba:	4699      	movge	r9, r3
 80054bc:	f1b9 0f00 	cmp.w	r9, #0
 80054c0:	dc33      	bgt.n	800552a <_printf_float+0x39a>
 80054c2:	f04f 0800 	mov.w	r8, #0
 80054c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054ca:	f104 0b1a 	add.w	fp, r4, #26
 80054ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054d0:	ebaa 0303 	sub.w	r3, sl, r3
 80054d4:	eba3 0309 	sub.w	r3, r3, r9
 80054d8:	4543      	cmp	r3, r8
 80054da:	f77f af7a 	ble.w	80053d2 <_printf_float+0x242>
 80054de:	2301      	movs	r3, #1
 80054e0:	465a      	mov	r2, fp
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f aeac 	beq.w	8005246 <_printf_float+0xb6>
 80054ee:	f108 0801 	add.w	r8, r8, #1
 80054f2:	e7ec      	b.n	80054ce <_printf_float+0x33e>
 80054f4:	4642      	mov	r2, r8
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	d1c2      	bne.n	8005486 <_printf_float+0x2f6>
 8005500:	e6a1      	b.n	8005246 <_printf_float+0xb6>
 8005502:	2301      	movs	r3, #1
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	920a      	str	r2, [sp, #40]	@ 0x28
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae9a 	beq.w	8005246 <_printf_float+0xb6>
 8005512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005514:	f10b 0b01 	add.w	fp, fp, #1
 8005518:	e7bb      	b.n	8005492 <_printf_float+0x302>
 800551a:	4631      	mov	r1, r6
 800551c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	d1c0      	bne.n	80054aa <_printf_float+0x31a>
 8005528:	e68d      	b.n	8005246 <_printf_float+0xb6>
 800552a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800552c:	464b      	mov	r3, r9
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	4442      	add	r2, r8
 8005534:	47b8      	blx	r7
 8005536:	3001      	adds	r0, #1
 8005538:	d1c3      	bne.n	80054c2 <_printf_float+0x332>
 800553a:	e684      	b.n	8005246 <_printf_float+0xb6>
 800553c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005540:	f1ba 0f01 	cmp.w	sl, #1
 8005544:	dc01      	bgt.n	800554a <_printf_float+0x3ba>
 8005546:	07db      	lsls	r3, r3, #31
 8005548:	d536      	bpl.n	80055b8 <_printf_float+0x428>
 800554a:	2301      	movs	r3, #1
 800554c:	4642      	mov	r2, r8
 800554e:	4631      	mov	r1, r6
 8005550:	4628      	mov	r0, r5
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	f43f ae76 	beq.w	8005246 <_printf_float+0xb6>
 800555a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f ae6e 	beq.w	8005246 <_printf_float+0xb6>
 800556a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800556e:	2200      	movs	r2, #0
 8005570:	2300      	movs	r3, #0
 8005572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005576:	f7fb fa17 	bl	80009a8 <__aeabi_dcmpeq>
 800557a:	b9c0      	cbnz	r0, 80055ae <_printf_float+0x41e>
 800557c:	4653      	mov	r3, sl
 800557e:	f108 0201 	add.w	r2, r8, #1
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	d10c      	bne.n	80055a6 <_printf_float+0x416>
 800558c:	e65b      	b.n	8005246 <_printf_float+0xb6>
 800558e:	2301      	movs	r3, #1
 8005590:	465a      	mov	r2, fp
 8005592:	4631      	mov	r1, r6
 8005594:	4628      	mov	r0, r5
 8005596:	47b8      	blx	r7
 8005598:	3001      	adds	r0, #1
 800559a:	f43f ae54 	beq.w	8005246 <_printf_float+0xb6>
 800559e:	f108 0801 	add.w	r8, r8, #1
 80055a2:	45d0      	cmp	r8, sl
 80055a4:	dbf3      	blt.n	800558e <_printf_float+0x3fe>
 80055a6:	464b      	mov	r3, r9
 80055a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80055ac:	e6e0      	b.n	8005370 <_printf_float+0x1e0>
 80055ae:	f04f 0800 	mov.w	r8, #0
 80055b2:	f104 0b1a 	add.w	fp, r4, #26
 80055b6:	e7f4      	b.n	80055a2 <_printf_float+0x412>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4642      	mov	r2, r8
 80055bc:	e7e1      	b.n	8005582 <_printf_float+0x3f2>
 80055be:	2301      	movs	r3, #1
 80055c0:	464a      	mov	r2, r9
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f ae3c 	beq.w	8005246 <_printf_float+0xb6>
 80055ce:	f108 0801 	add.w	r8, r8, #1
 80055d2:	68e3      	ldr	r3, [r4, #12]
 80055d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80055d6:	1a5b      	subs	r3, r3, r1
 80055d8:	4543      	cmp	r3, r8
 80055da:	dcf0      	bgt.n	80055be <_printf_float+0x42e>
 80055dc:	e6fd      	b.n	80053da <_printf_float+0x24a>
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	f104 0919 	add.w	r9, r4, #25
 80055e6:	e7f4      	b.n	80055d2 <_printf_float+0x442>

080055e8 <_printf_common>:
 80055e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	4616      	mov	r6, r2
 80055ee:	4698      	mov	r8, r3
 80055f0:	688a      	ldr	r2, [r1, #8]
 80055f2:	690b      	ldr	r3, [r1, #16]
 80055f4:	4607      	mov	r7, r0
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bfb8      	it	lt
 80055fa:	4613      	movlt	r3, r2
 80055fc:	6033      	str	r3, [r6, #0]
 80055fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005602:	460c      	mov	r4, r1
 8005604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005608:	b10a      	cbz	r2, 800560e <_printf_common+0x26>
 800560a:	3301      	adds	r3, #1
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	0699      	lsls	r1, r3, #26
 8005612:	bf42      	ittt	mi
 8005614:	6833      	ldrmi	r3, [r6, #0]
 8005616:	3302      	addmi	r3, #2
 8005618:	6033      	strmi	r3, [r6, #0]
 800561a:	6825      	ldr	r5, [r4, #0]
 800561c:	f015 0506 	ands.w	r5, r5, #6
 8005620:	d106      	bne.n	8005630 <_printf_common+0x48>
 8005622:	f104 0a19 	add.w	sl, r4, #25
 8005626:	68e3      	ldr	r3, [r4, #12]
 8005628:	6832      	ldr	r2, [r6, #0]
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	42ab      	cmp	r3, r5
 800562e:	dc2b      	bgt.n	8005688 <_printf_common+0xa0>
 8005630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	3b00      	subs	r3, #0
 8005638:	bf18      	it	ne
 800563a:	2301      	movne	r3, #1
 800563c:	0692      	lsls	r2, r2, #26
 800563e:	d430      	bmi.n	80056a2 <_printf_common+0xba>
 8005640:	4641      	mov	r1, r8
 8005642:	4638      	mov	r0, r7
 8005644:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005648:	47c8      	blx	r9
 800564a:	3001      	adds	r0, #1
 800564c:	d023      	beq.n	8005696 <_printf_common+0xae>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	6922      	ldr	r2, [r4, #16]
 8005652:	f003 0306 	and.w	r3, r3, #6
 8005656:	2b04      	cmp	r3, #4
 8005658:	bf14      	ite	ne
 800565a:	2500      	movne	r5, #0
 800565c:	6833      	ldreq	r3, [r6, #0]
 800565e:	f04f 0600 	mov.w	r6, #0
 8005662:	bf08      	it	eq
 8005664:	68e5      	ldreq	r5, [r4, #12]
 8005666:	f104 041a 	add.w	r4, r4, #26
 800566a:	bf08      	it	eq
 800566c:	1aed      	subeq	r5, r5, r3
 800566e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005672:	bf08      	it	eq
 8005674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005678:	4293      	cmp	r3, r2
 800567a:	bfc4      	itt	gt
 800567c:	1a9b      	subgt	r3, r3, r2
 800567e:	18ed      	addgt	r5, r5, r3
 8005680:	42b5      	cmp	r5, r6
 8005682:	d11a      	bne.n	80056ba <_printf_common+0xd2>
 8005684:	2000      	movs	r0, #0
 8005686:	e008      	b.n	800569a <_printf_common+0xb2>
 8005688:	2301      	movs	r3, #1
 800568a:	4652      	mov	r2, sl
 800568c:	4641      	mov	r1, r8
 800568e:	4638      	mov	r0, r7
 8005690:	47c8      	blx	r9
 8005692:	3001      	adds	r0, #1
 8005694:	d103      	bne.n	800569e <_printf_common+0xb6>
 8005696:	f04f 30ff 	mov.w	r0, #4294967295
 800569a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569e:	3501      	adds	r5, #1
 80056a0:	e7c1      	b.n	8005626 <_printf_common+0x3e>
 80056a2:	2030      	movs	r0, #48	@ 0x30
 80056a4:	18e1      	adds	r1, r4, r3
 80056a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056b0:	4422      	add	r2, r4
 80056b2:	3302      	adds	r3, #2
 80056b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056b8:	e7c2      	b.n	8005640 <_printf_common+0x58>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4622      	mov	r2, r4
 80056be:	4641      	mov	r1, r8
 80056c0:	4638      	mov	r0, r7
 80056c2:	47c8      	blx	r9
 80056c4:	3001      	adds	r0, #1
 80056c6:	d0e6      	beq.n	8005696 <_printf_common+0xae>
 80056c8:	3601      	adds	r6, #1
 80056ca:	e7d9      	b.n	8005680 <_printf_common+0x98>

080056cc <_printf_i>:
 80056cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	7e0f      	ldrb	r7, [r1, #24]
 80056d2:	4691      	mov	r9, r2
 80056d4:	2f78      	cmp	r7, #120	@ 0x78
 80056d6:	4680      	mov	r8, r0
 80056d8:	460c      	mov	r4, r1
 80056da:	469a      	mov	sl, r3
 80056dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056e2:	d807      	bhi.n	80056f4 <_printf_i+0x28>
 80056e4:	2f62      	cmp	r7, #98	@ 0x62
 80056e6:	d80a      	bhi.n	80056fe <_printf_i+0x32>
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	f000 80d1 	beq.w	8005890 <_printf_i+0x1c4>
 80056ee:	2f58      	cmp	r7, #88	@ 0x58
 80056f0:	f000 80b8 	beq.w	8005864 <_printf_i+0x198>
 80056f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056fc:	e03a      	b.n	8005774 <_printf_i+0xa8>
 80056fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005702:	2b15      	cmp	r3, #21
 8005704:	d8f6      	bhi.n	80056f4 <_printf_i+0x28>
 8005706:	a101      	add	r1, pc, #4	@ (adr r1, 800570c <_printf_i+0x40>)
 8005708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800570c:	08005765 	.word	0x08005765
 8005710:	08005779 	.word	0x08005779
 8005714:	080056f5 	.word	0x080056f5
 8005718:	080056f5 	.word	0x080056f5
 800571c:	080056f5 	.word	0x080056f5
 8005720:	080056f5 	.word	0x080056f5
 8005724:	08005779 	.word	0x08005779
 8005728:	080056f5 	.word	0x080056f5
 800572c:	080056f5 	.word	0x080056f5
 8005730:	080056f5 	.word	0x080056f5
 8005734:	080056f5 	.word	0x080056f5
 8005738:	08005877 	.word	0x08005877
 800573c:	080057a3 	.word	0x080057a3
 8005740:	08005831 	.word	0x08005831
 8005744:	080056f5 	.word	0x080056f5
 8005748:	080056f5 	.word	0x080056f5
 800574c:	08005899 	.word	0x08005899
 8005750:	080056f5 	.word	0x080056f5
 8005754:	080057a3 	.word	0x080057a3
 8005758:	080056f5 	.word	0x080056f5
 800575c:	080056f5 	.word	0x080056f5
 8005760:	08005839 	.word	0x08005839
 8005764:	6833      	ldr	r3, [r6, #0]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6032      	str	r2, [r6, #0]
 800576c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005774:	2301      	movs	r3, #1
 8005776:	e09c      	b.n	80058b2 <_printf_i+0x1e6>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	1d19      	adds	r1, r3, #4
 800577e:	6031      	str	r1, [r6, #0]
 8005780:	0606      	lsls	r6, r0, #24
 8005782:	d501      	bpl.n	8005788 <_printf_i+0xbc>
 8005784:	681d      	ldr	r5, [r3, #0]
 8005786:	e003      	b.n	8005790 <_printf_i+0xc4>
 8005788:	0645      	lsls	r5, r0, #25
 800578a:	d5fb      	bpl.n	8005784 <_printf_i+0xb8>
 800578c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005790:	2d00      	cmp	r5, #0
 8005792:	da03      	bge.n	800579c <_printf_i+0xd0>
 8005794:	232d      	movs	r3, #45	@ 0x2d
 8005796:	426d      	negs	r5, r5
 8005798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579c:	230a      	movs	r3, #10
 800579e:	4858      	ldr	r0, [pc, #352]	@ (8005900 <_printf_i+0x234>)
 80057a0:	e011      	b.n	80057c6 <_printf_i+0xfa>
 80057a2:	6821      	ldr	r1, [r4, #0]
 80057a4:	6833      	ldr	r3, [r6, #0]
 80057a6:	0608      	lsls	r0, r1, #24
 80057a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80057ac:	d402      	bmi.n	80057b4 <_printf_i+0xe8>
 80057ae:	0649      	lsls	r1, r1, #25
 80057b0:	bf48      	it	mi
 80057b2:	b2ad      	uxthmi	r5, r5
 80057b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	bf14      	ite	ne
 80057ba:	230a      	movne	r3, #10
 80057bc:	2308      	moveq	r3, #8
 80057be:	4850      	ldr	r0, [pc, #320]	@ (8005900 <_printf_i+0x234>)
 80057c0:	2100      	movs	r1, #0
 80057c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057c6:	6866      	ldr	r6, [r4, #4]
 80057c8:	2e00      	cmp	r6, #0
 80057ca:	60a6      	str	r6, [r4, #8]
 80057cc:	db05      	blt.n	80057da <_printf_i+0x10e>
 80057ce:	6821      	ldr	r1, [r4, #0]
 80057d0:	432e      	orrs	r6, r5
 80057d2:	f021 0104 	bic.w	r1, r1, #4
 80057d6:	6021      	str	r1, [r4, #0]
 80057d8:	d04b      	beq.n	8005872 <_printf_i+0x1a6>
 80057da:	4616      	mov	r6, r2
 80057dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80057e0:	fb03 5711 	mls	r7, r3, r1, r5
 80057e4:	5dc7      	ldrb	r7, [r0, r7]
 80057e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ea:	462f      	mov	r7, r5
 80057ec:	42bb      	cmp	r3, r7
 80057ee:	460d      	mov	r5, r1
 80057f0:	d9f4      	bls.n	80057dc <_printf_i+0x110>
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d10b      	bne.n	800580e <_printf_i+0x142>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	07df      	lsls	r7, r3, #31
 80057fa:	d508      	bpl.n	800580e <_printf_i+0x142>
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	6861      	ldr	r1, [r4, #4]
 8005800:	4299      	cmp	r1, r3
 8005802:	bfde      	ittt	le
 8005804:	2330      	movle	r3, #48	@ 0x30
 8005806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800580a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800580e:	1b92      	subs	r2, r2, r6
 8005810:	6122      	str	r2, [r4, #16]
 8005812:	464b      	mov	r3, r9
 8005814:	4621      	mov	r1, r4
 8005816:	4640      	mov	r0, r8
 8005818:	f8cd a000 	str.w	sl, [sp]
 800581c:	aa03      	add	r2, sp, #12
 800581e:	f7ff fee3 	bl	80055e8 <_printf_common>
 8005822:	3001      	adds	r0, #1
 8005824:	d14a      	bne.n	80058bc <_printf_i+0x1f0>
 8005826:	f04f 30ff 	mov.w	r0, #4294967295
 800582a:	b004      	add	sp, #16
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	f043 0320 	orr.w	r3, r3, #32
 8005836:	6023      	str	r3, [r4, #0]
 8005838:	2778      	movs	r7, #120	@ 0x78
 800583a:	4832      	ldr	r0, [pc, #200]	@ (8005904 <_printf_i+0x238>)
 800583c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	6831      	ldr	r1, [r6, #0]
 8005844:	061f      	lsls	r7, r3, #24
 8005846:	f851 5b04 	ldr.w	r5, [r1], #4
 800584a:	d402      	bmi.n	8005852 <_printf_i+0x186>
 800584c:	065f      	lsls	r7, r3, #25
 800584e:	bf48      	it	mi
 8005850:	b2ad      	uxthmi	r5, r5
 8005852:	6031      	str	r1, [r6, #0]
 8005854:	07d9      	lsls	r1, r3, #31
 8005856:	bf44      	itt	mi
 8005858:	f043 0320 	orrmi.w	r3, r3, #32
 800585c:	6023      	strmi	r3, [r4, #0]
 800585e:	b11d      	cbz	r5, 8005868 <_printf_i+0x19c>
 8005860:	2310      	movs	r3, #16
 8005862:	e7ad      	b.n	80057c0 <_printf_i+0xf4>
 8005864:	4826      	ldr	r0, [pc, #152]	@ (8005900 <_printf_i+0x234>)
 8005866:	e7e9      	b.n	800583c <_printf_i+0x170>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	f023 0320 	bic.w	r3, r3, #32
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	e7f6      	b.n	8005860 <_printf_i+0x194>
 8005872:	4616      	mov	r6, r2
 8005874:	e7bd      	b.n	80057f2 <_printf_i+0x126>
 8005876:	6833      	ldr	r3, [r6, #0]
 8005878:	6825      	ldr	r5, [r4, #0]
 800587a:	1d18      	adds	r0, r3, #4
 800587c:	6961      	ldr	r1, [r4, #20]
 800587e:	6030      	str	r0, [r6, #0]
 8005880:	062e      	lsls	r6, r5, #24
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	d501      	bpl.n	800588a <_printf_i+0x1be>
 8005886:	6019      	str	r1, [r3, #0]
 8005888:	e002      	b.n	8005890 <_printf_i+0x1c4>
 800588a:	0668      	lsls	r0, r5, #25
 800588c:	d5fb      	bpl.n	8005886 <_printf_i+0x1ba>
 800588e:	8019      	strh	r1, [r3, #0]
 8005890:	2300      	movs	r3, #0
 8005892:	4616      	mov	r6, r2
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	e7bc      	b.n	8005812 <_printf_i+0x146>
 8005898:	6833      	ldr	r3, [r6, #0]
 800589a:	2100      	movs	r1, #0
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	6032      	str	r2, [r6, #0]
 80058a0:	681e      	ldr	r6, [r3, #0]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	4630      	mov	r0, r6
 80058a6:	f000 f9ea 	bl	8005c7e <memchr>
 80058aa:	b108      	cbz	r0, 80058b0 <_printf_i+0x1e4>
 80058ac:	1b80      	subs	r0, r0, r6
 80058ae:	6060      	str	r0, [r4, #4]
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	2300      	movs	r3, #0
 80058b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ba:	e7aa      	b.n	8005812 <_printf_i+0x146>
 80058bc:	4632      	mov	r2, r6
 80058be:	4649      	mov	r1, r9
 80058c0:	4640      	mov	r0, r8
 80058c2:	6923      	ldr	r3, [r4, #16]
 80058c4:	47d0      	blx	sl
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0ad      	beq.n	8005826 <_printf_i+0x15a>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	079b      	lsls	r3, r3, #30
 80058ce:	d413      	bmi.n	80058f8 <_printf_i+0x22c>
 80058d0:	68e0      	ldr	r0, [r4, #12]
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	4298      	cmp	r0, r3
 80058d6:	bfb8      	it	lt
 80058d8:	4618      	movlt	r0, r3
 80058da:	e7a6      	b.n	800582a <_printf_i+0x15e>
 80058dc:	2301      	movs	r3, #1
 80058de:	4632      	mov	r2, r6
 80058e0:	4649      	mov	r1, r9
 80058e2:	4640      	mov	r0, r8
 80058e4:	47d0      	blx	sl
 80058e6:	3001      	adds	r0, #1
 80058e8:	d09d      	beq.n	8005826 <_printf_i+0x15a>
 80058ea:	3501      	adds	r5, #1
 80058ec:	68e3      	ldr	r3, [r4, #12]
 80058ee:	9903      	ldr	r1, [sp, #12]
 80058f0:	1a5b      	subs	r3, r3, r1
 80058f2:	42ab      	cmp	r3, r5
 80058f4:	dcf2      	bgt.n	80058dc <_printf_i+0x210>
 80058f6:	e7eb      	b.n	80058d0 <_printf_i+0x204>
 80058f8:	2500      	movs	r5, #0
 80058fa:	f104 0619 	add.w	r6, r4, #25
 80058fe:	e7f5      	b.n	80058ec <_printf_i+0x220>
 8005900:	08008024 	.word	0x08008024
 8005904:	08008035 	.word	0x08008035

08005908 <std>:
 8005908:	2300      	movs	r3, #0
 800590a:	b510      	push	{r4, lr}
 800590c:	4604      	mov	r4, r0
 800590e:	e9c0 3300 	strd	r3, r3, [r0]
 8005912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005916:	6083      	str	r3, [r0, #8]
 8005918:	8181      	strh	r1, [r0, #12]
 800591a:	6643      	str	r3, [r0, #100]	@ 0x64
 800591c:	81c2      	strh	r2, [r0, #14]
 800591e:	6183      	str	r3, [r0, #24]
 8005920:	4619      	mov	r1, r3
 8005922:	2208      	movs	r2, #8
 8005924:	305c      	adds	r0, #92	@ 0x5c
 8005926:	f000 f92a 	bl	8005b7e <memset>
 800592a:	4b0d      	ldr	r3, [pc, #52]	@ (8005960 <std+0x58>)
 800592c:	6224      	str	r4, [r4, #32]
 800592e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005930:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <std+0x5c>)
 8005932:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005934:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <std+0x60>)
 8005936:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005938:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <std+0x64>)
 800593a:	6323      	str	r3, [r4, #48]	@ 0x30
 800593c:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <std+0x68>)
 800593e:	429c      	cmp	r4, r3
 8005940:	d006      	beq.n	8005950 <std+0x48>
 8005942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005946:	4294      	cmp	r4, r2
 8005948:	d002      	beq.n	8005950 <std+0x48>
 800594a:	33d0      	adds	r3, #208	@ 0xd0
 800594c:	429c      	cmp	r4, r3
 800594e:	d105      	bne.n	800595c <std+0x54>
 8005950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	f000 b98e 	b.w	8005c78 <__retarget_lock_init_recursive>
 800595c:	bd10      	pop	{r4, pc}
 800595e:	bf00      	nop
 8005960:	08005af9 	.word	0x08005af9
 8005964:	08005b1b 	.word	0x08005b1b
 8005968:	08005b53 	.word	0x08005b53
 800596c:	08005b77 	.word	0x08005b77
 8005970:	20001354 	.word	0x20001354

08005974 <stdio_exit_handler>:
 8005974:	4a02      	ldr	r2, [pc, #8]	@ (8005980 <stdio_exit_handler+0xc>)
 8005976:	4903      	ldr	r1, [pc, #12]	@ (8005984 <stdio_exit_handler+0x10>)
 8005978:	4803      	ldr	r0, [pc, #12]	@ (8005988 <stdio_exit_handler+0x14>)
 800597a:	f000 b869 	b.w	8005a50 <_fwalk_sglue>
 800597e:	bf00      	nop
 8005980:	20000010 	.word	0x20000010
 8005984:	080075f9 	.word	0x080075f9
 8005988:	20000020 	.word	0x20000020

0800598c <cleanup_stdio>:
 800598c:	6841      	ldr	r1, [r0, #4]
 800598e:	4b0c      	ldr	r3, [pc, #48]	@ (80059c0 <cleanup_stdio+0x34>)
 8005990:	b510      	push	{r4, lr}
 8005992:	4299      	cmp	r1, r3
 8005994:	4604      	mov	r4, r0
 8005996:	d001      	beq.n	800599c <cleanup_stdio+0x10>
 8005998:	f001 fe2e 	bl	80075f8 <_fflush_r>
 800599c:	68a1      	ldr	r1, [r4, #8]
 800599e:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <cleanup_stdio+0x38>)
 80059a0:	4299      	cmp	r1, r3
 80059a2:	d002      	beq.n	80059aa <cleanup_stdio+0x1e>
 80059a4:	4620      	mov	r0, r4
 80059a6:	f001 fe27 	bl	80075f8 <_fflush_r>
 80059aa:	68e1      	ldr	r1, [r4, #12]
 80059ac:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <cleanup_stdio+0x3c>)
 80059ae:	4299      	cmp	r1, r3
 80059b0:	d004      	beq.n	80059bc <cleanup_stdio+0x30>
 80059b2:	4620      	mov	r0, r4
 80059b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b8:	f001 be1e 	b.w	80075f8 <_fflush_r>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	20001354 	.word	0x20001354
 80059c4:	200013bc 	.word	0x200013bc
 80059c8:	20001424 	.word	0x20001424

080059cc <global_stdio_init.part.0>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	4b0b      	ldr	r3, [pc, #44]	@ (80059fc <global_stdio_init.part.0+0x30>)
 80059d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005a00 <global_stdio_init.part.0+0x34>)
 80059d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005a04 <global_stdio_init.part.0+0x38>)
 80059d4:	4620      	mov	r0, r4
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	2104      	movs	r1, #4
 80059da:	2200      	movs	r2, #0
 80059dc:	f7ff ff94 	bl	8005908 <std>
 80059e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059e4:	2201      	movs	r2, #1
 80059e6:	2109      	movs	r1, #9
 80059e8:	f7ff ff8e 	bl	8005908 <std>
 80059ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059f0:	2202      	movs	r2, #2
 80059f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f6:	2112      	movs	r1, #18
 80059f8:	f7ff bf86 	b.w	8005908 <std>
 80059fc:	2000148c 	.word	0x2000148c
 8005a00:	20001354 	.word	0x20001354
 8005a04:	08005975 	.word	0x08005975

08005a08 <__sfp_lock_acquire>:
 8005a08:	4801      	ldr	r0, [pc, #4]	@ (8005a10 <__sfp_lock_acquire+0x8>)
 8005a0a:	f000 b936 	b.w	8005c7a <__retarget_lock_acquire_recursive>
 8005a0e:	bf00      	nop
 8005a10:	20001495 	.word	0x20001495

08005a14 <__sfp_lock_release>:
 8005a14:	4801      	ldr	r0, [pc, #4]	@ (8005a1c <__sfp_lock_release+0x8>)
 8005a16:	f000 b931 	b.w	8005c7c <__retarget_lock_release_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	20001495 	.word	0x20001495

08005a20 <__sinit>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	f7ff fff0 	bl	8005a08 <__sfp_lock_acquire>
 8005a28:	6a23      	ldr	r3, [r4, #32]
 8005a2a:	b11b      	cbz	r3, 8005a34 <__sinit+0x14>
 8005a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a30:	f7ff bff0 	b.w	8005a14 <__sfp_lock_release>
 8005a34:	4b04      	ldr	r3, [pc, #16]	@ (8005a48 <__sinit+0x28>)
 8005a36:	6223      	str	r3, [r4, #32]
 8005a38:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <__sinit+0x2c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f5      	bne.n	8005a2c <__sinit+0xc>
 8005a40:	f7ff ffc4 	bl	80059cc <global_stdio_init.part.0>
 8005a44:	e7f2      	b.n	8005a2c <__sinit+0xc>
 8005a46:	bf00      	nop
 8005a48:	0800598d 	.word	0x0800598d
 8005a4c:	2000148c 	.word	0x2000148c

08005a50 <_fwalk_sglue>:
 8005a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a54:	4607      	mov	r7, r0
 8005a56:	4688      	mov	r8, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a60:	f1b9 0901 	subs.w	r9, r9, #1
 8005a64:	d505      	bpl.n	8005a72 <_fwalk_sglue+0x22>
 8005a66:	6824      	ldr	r4, [r4, #0]
 8005a68:	2c00      	cmp	r4, #0
 8005a6a:	d1f7      	bne.n	8005a5c <_fwalk_sglue+0xc>
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d907      	bls.n	8005a88 <_fwalk_sglue+0x38>
 8005a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	d003      	beq.n	8005a88 <_fwalk_sglue+0x38>
 8005a80:	4629      	mov	r1, r5
 8005a82:	4638      	mov	r0, r7
 8005a84:	47c0      	blx	r8
 8005a86:	4306      	orrs	r6, r0
 8005a88:	3568      	adds	r5, #104	@ 0x68
 8005a8a:	e7e9      	b.n	8005a60 <_fwalk_sglue+0x10>

08005a8c <sniprintf>:
 8005a8c:	b40c      	push	{r2, r3}
 8005a8e:	b530      	push	{r4, r5, lr}
 8005a90:	4b18      	ldr	r3, [pc, #96]	@ (8005af4 <sniprintf+0x68>)
 8005a92:	1e0c      	subs	r4, r1, #0
 8005a94:	681d      	ldr	r5, [r3, #0]
 8005a96:	b09d      	sub	sp, #116	@ 0x74
 8005a98:	da08      	bge.n	8005aac <sniprintf+0x20>
 8005a9a:	238b      	movs	r3, #139	@ 0x8b
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	b01d      	add	sp, #116	@ 0x74
 8005aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aa8:	b002      	add	sp, #8
 8005aaa:	4770      	bx	lr
 8005aac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ab0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005aba:	bf0c      	ite	eq
 8005abc:	4623      	moveq	r3, r4
 8005abe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ac2:	9304      	str	r3, [sp, #16]
 8005ac4:	9307      	str	r3, [sp, #28]
 8005ac6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005aca:	9002      	str	r0, [sp, #8]
 8005acc:	9006      	str	r0, [sp, #24]
 8005ace:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	ab21      	add	r3, sp, #132	@ 0x84
 8005ad6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ad8:	a902      	add	r1, sp, #8
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	f001 fc10 	bl	8007300 <_svfiprintf_r>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	bfbc      	itt	lt
 8005ae4:	238b      	movlt	r3, #139	@ 0x8b
 8005ae6:	602b      	strlt	r3, [r5, #0]
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d0da      	beq.n	8005aa2 <sniprintf+0x16>
 8005aec:	2200      	movs	r2, #0
 8005aee:	9b02      	ldr	r3, [sp, #8]
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	e7d6      	b.n	8005aa2 <sniprintf+0x16>
 8005af4:	2000001c 	.word	0x2000001c

08005af8 <__sread>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	460c      	mov	r4, r1
 8005afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b00:	f000 f86c 	bl	8005bdc <_read_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	bfab      	itete	ge
 8005b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b0c:	181b      	addge	r3, r3, r0
 8005b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b12:	bfac      	ite	ge
 8005b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b16:	81a3      	strhlt	r3, [r4, #12]
 8005b18:	bd10      	pop	{r4, pc}

08005b1a <__swrite>:
 8005b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1e:	461f      	mov	r7, r3
 8005b20:	898b      	ldrh	r3, [r1, #12]
 8005b22:	4605      	mov	r5, r0
 8005b24:	05db      	lsls	r3, r3, #23
 8005b26:	460c      	mov	r4, r1
 8005b28:	4616      	mov	r6, r2
 8005b2a:	d505      	bpl.n	8005b38 <__swrite+0x1e>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b34:	f000 f840 	bl	8005bb8 <_lseek_r>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b40:	81a3      	strh	r3, [r4, #12]
 8005b42:	4628      	mov	r0, r5
 8005b44:	463b      	mov	r3, r7
 8005b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4e:	f000 b857 	b.w	8005c00 <_write_r>

08005b52 <__sseek>:
 8005b52:	b510      	push	{r4, lr}
 8005b54:	460c      	mov	r4, r1
 8005b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5a:	f000 f82d 	bl	8005bb8 <_lseek_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	bf15      	itete	ne
 8005b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b6e:	81a3      	strheq	r3, [r4, #12]
 8005b70:	bf18      	it	ne
 8005b72:	81a3      	strhne	r3, [r4, #12]
 8005b74:	bd10      	pop	{r4, pc}

08005b76 <__sclose>:
 8005b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7a:	f000 b80d 	b.w	8005b98 <_close_r>

08005b7e <memset>:
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4402      	add	r2, r0
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d100      	bne.n	8005b88 <memset+0xa>
 8005b86:	4770      	bx	lr
 8005b88:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8c:	e7f9      	b.n	8005b82 <memset+0x4>
	...

08005b90 <_localeconv_r>:
 8005b90:	4800      	ldr	r0, [pc, #0]	@ (8005b94 <_localeconv_r+0x4>)
 8005b92:	4770      	bx	lr
 8005b94:	2000015c 	.word	0x2000015c

08005b98 <_close_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4d05      	ldr	r5, [pc, #20]	@ (8005bb4 <_close_r+0x1c>)
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fb fec7 	bl	8001936 <_close>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_close_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_close_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20001490 	.word	0x20001490

08005bb8 <_lseek_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4d05      	ldr	r5, [pc, #20]	@ (8005bd8 <_lseek_r+0x20>)
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fb fed9 	bl	800197e <_lseek>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_lseek_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_lseek_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20001490 	.word	0x20001490

08005bdc <_read_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	2200      	movs	r2, #0
 8005be6:	4d05      	ldr	r5, [pc, #20]	@ (8005bfc <_read_r+0x20>)
 8005be8:	602a      	str	r2, [r5, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f7fb fe86 	bl	80018fc <_read>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_read_r+0x1e>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_read_r+0x1e>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20001490 	.word	0x20001490

08005c00 <_write_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4d05      	ldr	r5, [pc, #20]	@ (8005c20 <_write_r+0x20>)
 8005c0c:	602a      	str	r2, [r5, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f7fb fb90 	bl	8001334 <_write>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_write_r+0x1e>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_write_r+0x1e>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	20001490 	.word	0x20001490

08005c24 <__errno>:
 8005c24:	4b01      	ldr	r3, [pc, #4]	@ (8005c2c <__errno+0x8>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000001c 	.word	0x2000001c

08005c30 <__libc_init_array>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	2600      	movs	r6, #0
 8005c34:	4d0c      	ldr	r5, [pc, #48]	@ (8005c68 <__libc_init_array+0x38>)
 8005c36:	4c0d      	ldr	r4, [pc, #52]	@ (8005c6c <__libc_init_array+0x3c>)
 8005c38:	1b64      	subs	r4, r4, r5
 8005c3a:	10a4      	asrs	r4, r4, #2
 8005c3c:	42a6      	cmp	r6, r4
 8005c3e:	d109      	bne.n	8005c54 <__libc_init_array+0x24>
 8005c40:	f002 f96e 	bl	8007f20 <_init>
 8005c44:	2600      	movs	r6, #0
 8005c46:	4d0a      	ldr	r5, [pc, #40]	@ (8005c70 <__libc_init_array+0x40>)
 8005c48:	4c0a      	ldr	r4, [pc, #40]	@ (8005c74 <__libc_init_array+0x44>)
 8005c4a:	1b64      	subs	r4, r4, r5
 8005c4c:	10a4      	asrs	r4, r4, #2
 8005c4e:	42a6      	cmp	r6, r4
 8005c50:	d105      	bne.n	8005c5e <__libc_init_array+0x2e>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c58:	4798      	blx	r3
 8005c5a:	3601      	adds	r6, #1
 8005c5c:	e7ee      	b.n	8005c3c <__libc_init_array+0xc>
 8005c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c62:	4798      	blx	r3
 8005c64:	3601      	adds	r6, #1
 8005c66:	e7f2      	b.n	8005c4e <__libc_init_array+0x1e>
 8005c68:	08008394 	.word	0x08008394
 8005c6c:	08008394 	.word	0x08008394
 8005c70:	08008394 	.word	0x08008394
 8005c74:	08008398 	.word	0x08008398

08005c78 <__retarget_lock_init_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <__retarget_lock_acquire_recursive>:
 8005c7a:	4770      	bx	lr

08005c7c <__retarget_lock_release_recursive>:
 8005c7c:	4770      	bx	lr

08005c7e <memchr>:
 8005c7e:	4603      	mov	r3, r0
 8005c80:	b510      	push	{r4, lr}
 8005c82:	b2c9      	uxtb	r1, r1
 8005c84:	4402      	add	r2, r0
 8005c86:	4293      	cmp	r3, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	d101      	bne.n	8005c90 <memchr+0x12>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e003      	b.n	8005c98 <memchr+0x1a>
 8005c90:	7804      	ldrb	r4, [r0, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	428c      	cmp	r4, r1
 8005c96:	d1f6      	bne.n	8005c86 <memchr+0x8>
 8005c98:	bd10      	pop	{r4, pc}

08005c9a <quorem>:
 8005c9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9e:	6903      	ldr	r3, [r0, #16]
 8005ca0:	690c      	ldr	r4, [r1, #16]
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	db7e      	blt.n	8005da6 <quorem+0x10c>
 8005ca8:	3c01      	subs	r4, #1
 8005caa:	00a3      	lsls	r3, r4, #2
 8005cac:	f100 0514 	add.w	r5, r0, #20
 8005cb0:	f101 0814 	add.w	r8, r1, #20
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cd0:	d32e      	bcc.n	8005d30 <quorem+0x96>
 8005cd2:	f04f 0a00 	mov.w	sl, #0
 8005cd6:	46c4      	mov	ip, r8
 8005cd8:	46ae      	mov	lr, r5
 8005cda:	46d3      	mov	fp, sl
 8005cdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ce0:	b298      	uxth	r0, r3
 8005ce2:	fb06 a000 	mla	r0, r6, r0, sl
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	0c02      	lsrs	r2, r0, #16
 8005cea:	fb06 2303 	mla	r3, r6, r3, r2
 8005cee:	f8de 2000 	ldr.w	r2, [lr]
 8005cf2:	b280      	uxth	r0, r0
 8005cf4:	b292      	uxth	r2, r2
 8005cf6:	1a12      	subs	r2, r2, r0
 8005cf8:	445a      	add	r2, fp
 8005cfa:	f8de 0000 	ldr.w	r0, [lr]
 8005cfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d0c:	b292      	uxth	r2, r2
 8005d0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d12:	45e1      	cmp	r9, ip
 8005d14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d18:	f84e 2b04 	str.w	r2, [lr], #4
 8005d1c:	d2de      	bcs.n	8005cdc <quorem+0x42>
 8005d1e:	9b00      	ldr	r3, [sp, #0]
 8005d20:	58eb      	ldr	r3, [r5, r3]
 8005d22:	b92b      	cbnz	r3, 8005d30 <quorem+0x96>
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	3b04      	subs	r3, #4
 8005d28:	429d      	cmp	r5, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	d32f      	bcc.n	8005d8e <quorem+0xf4>
 8005d2e:	613c      	str	r4, [r7, #16]
 8005d30:	4638      	mov	r0, r7
 8005d32:	f001 f981 	bl	8007038 <__mcmp>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	db25      	blt.n	8005d86 <quorem+0xec>
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d42:	f8d1 c000 	ldr.w	ip, [r1]
 8005d46:	fa1f fe82 	uxth.w	lr, r2
 8005d4a:	fa1f f38c 	uxth.w	r3, ip
 8005d4e:	eba3 030e 	sub.w	r3, r3, lr
 8005d52:	4403      	add	r3, r0
 8005d54:	0c12      	lsrs	r2, r2, #16
 8005d56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d64:	45c1      	cmp	r9, r8
 8005d66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d6a:	f841 3b04 	str.w	r3, [r1], #4
 8005d6e:	d2e6      	bcs.n	8005d3e <quorem+0xa4>
 8005d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d78:	b922      	cbnz	r2, 8005d84 <quorem+0xea>
 8005d7a:	3b04      	subs	r3, #4
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	d30b      	bcc.n	8005d9a <quorem+0x100>
 8005d82:	613c      	str	r4, [r7, #16]
 8005d84:	3601      	adds	r6, #1
 8005d86:	4630      	mov	r0, r6
 8005d88:	b003      	add	sp, #12
 8005d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	3b04      	subs	r3, #4
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	d1cb      	bne.n	8005d2e <quorem+0x94>
 8005d96:	3c01      	subs	r4, #1
 8005d98:	e7c6      	b.n	8005d28 <quorem+0x8e>
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	3b04      	subs	r3, #4
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	d1ef      	bne.n	8005d82 <quorem+0xe8>
 8005da2:	3c01      	subs	r4, #1
 8005da4:	e7ea      	b.n	8005d7c <quorem+0xe2>
 8005da6:	2000      	movs	r0, #0
 8005da8:	e7ee      	b.n	8005d88 <quorem+0xee>
 8005daa:	0000      	movs	r0, r0
 8005dac:	0000      	movs	r0, r0
	...

08005db0 <_dtoa_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	69c7      	ldr	r7, [r0, #28]
 8005dba:	b097      	sub	sp, #92	@ 0x5c
 8005dbc:	4681      	mov	r9, r0
 8005dbe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005dc2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005dc4:	b97f      	cbnz	r7, 8005de6 <_dtoa_r+0x36>
 8005dc6:	2010      	movs	r0, #16
 8005dc8:	f000 fe0e 	bl	80069e8 <malloc>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	f8c9 001c 	str.w	r0, [r9, #28]
 8005dd2:	b920      	cbnz	r0, 8005dde <_dtoa_r+0x2e>
 8005dd4:	21ef      	movs	r1, #239	@ 0xef
 8005dd6:	4bac      	ldr	r3, [pc, #688]	@ (8006088 <_dtoa_r+0x2d8>)
 8005dd8:	48ac      	ldr	r0, [pc, #688]	@ (800608c <_dtoa_r+0x2dc>)
 8005dda:	f001 fc6d 	bl	80076b8 <__assert_func>
 8005dde:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005de2:	6007      	str	r7, [r0, #0]
 8005de4:	60c7      	str	r7, [r0, #12]
 8005de6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005dea:	6819      	ldr	r1, [r3, #0]
 8005dec:	b159      	cbz	r1, 8005e06 <_dtoa_r+0x56>
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	2301      	movs	r3, #1
 8005df2:	4093      	lsls	r3, r2
 8005df4:	604a      	str	r2, [r1, #4]
 8005df6:	608b      	str	r3, [r1, #8]
 8005df8:	4648      	mov	r0, r9
 8005dfa:	f000 feeb 	bl	8006bd4 <_Bfree>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	1e2b      	subs	r3, r5, #0
 8005e08:	bfaf      	iteee	ge
 8005e0a:	2300      	movge	r3, #0
 8005e0c:	2201      	movlt	r2, #1
 8005e0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e12:	9307      	strlt	r3, [sp, #28]
 8005e14:	bfa8      	it	ge
 8005e16:	6033      	strge	r3, [r6, #0]
 8005e18:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005e1c:	4b9c      	ldr	r3, [pc, #624]	@ (8006090 <_dtoa_r+0x2e0>)
 8005e1e:	bfb8      	it	lt
 8005e20:	6032      	strlt	r2, [r6, #0]
 8005e22:	ea33 0308 	bics.w	r3, r3, r8
 8005e26:	d112      	bne.n	8005e4e <_dtoa_r+0x9e>
 8005e28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e34:	4323      	orrs	r3, r4
 8005e36:	f000 855e 	beq.w	80068f6 <_dtoa_r+0xb46>
 8005e3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006094 <_dtoa_r+0x2e4>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8560 	beq.w	8006906 <_dtoa_r+0xb56>
 8005e46:	f10a 0303 	add.w	r3, sl, #3
 8005e4a:	f000 bd5a 	b.w	8006902 <_dtoa_r+0xb52>
 8005e4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f7fa fda3 	bl	80009a8 <__aeabi_dcmpeq>
 8005e62:	4607      	mov	r7, r0
 8005e64:	b158      	cbz	r0, 8005e7e <_dtoa_r+0xce>
 8005e66:	2301      	movs	r3, #1
 8005e68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e6e:	b113      	cbz	r3, 8005e76 <_dtoa_r+0xc6>
 8005e70:	4b89      	ldr	r3, [pc, #548]	@ (8006098 <_dtoa_r+0x2e8>)
 8005e72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800609c <_dtoa_r+0x2ec>
 8005e7a:	f000 bd44 	b.w	8006906 <_dtoa_r+0xb56>
 8005e7e:	ab14      	add	r3, sp, #80	@ 0x50
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	ab15      	add	r3, sp, #84	@ 0x54
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4648      	mov	r0, r9
 8005e88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e8c:	f001 f984 	bl	8007198 <__d2b>
 8005e90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e94:	9003      	str	r0, [sp, #12]
 8005e96:	2e00      	cmp	r6, #0
 8005e98:	d078      	beq.n	8005f8c <_dtoa_r+0x1dc>
 8005e9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ea0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005eac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005eb0:	9712      	str	r7, [sp, #72]	@ 0x48
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80060a0 <_dtoa_r+0x2f0>)
 8005eb8:	f7fa f956 	bl	8000168 <__aeabi_dsub>
 8005ebc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006070 <_dtoa_r+0x2c0>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa fb09 	bl	80004d8 <__aeabi_dmul>
 8005ec6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006078 <_dtoa_r+0x2c8>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa f94e 	bl	800016c <__adddf3>
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	f7fa fa95 	bl	8000404 <__aeabi_i2d>
 8005eda:	a369      	add	r3, pc, #420	@ (adr r3, 8006080 <_dtoa_r+0x2d0>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa fafa 	bl	80004d8 <__aeabi_dmul>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa f93e 	bl	800016c <__adddf3>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	f7fa fda0 	bl	8000a38 <__aeabi_d2iz>
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4607      	mov	r7, r0
 8005efc:	2300      	movs	r3, #0
 8005efe:	4620      	mov	r0, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7fa fd5b 	bl	80009bc <__aeabi_dcmplt>
 8005f06:	b140      	cbz	r0, 8005f1a <_dtoa_r+0x16a>
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7fa fa7b 	bl	8000404 <__aeabi_i2d>
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	f7fa fd49 	bl	80009a8 <__aeabi_dcmpeq>
 8005f16:	b900      	cbnz	r0, 8005f1a <_dtoa_r+0x16a>
 8005f18:	3f01      	subs	r7, #1
 8005f1a:	2f16      	cmp	r7, #22
 8005f1c:	d854      	bhi.n	8005fc8 <_dtoa_r+0x218>
 8005f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f22:	4b60      	ldr	r3, [pc, #384]	@ (80060a4 <_dtoa_r+0x2f4>)
 8005f24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f7fa fd46 	bl	80009bc <__aeabi_dcmplt>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d04b      	beq.n	8005fcc <_dtoa_r+0x21c>
 8005f34:	2300      	movs	r3, #0
 8005f36:	3f01      	subs	r7, #1
 8005f38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f3c:	1b9b      	subs	r3, r3, r6
 8005f3e:	1e5a      	subs	r2, r3, #1
 8005f40:	bf49      	itett	mi
 8005f42:	f1c3 0301 	rsbmi	r3, r3, #1
 8005f46:	2300      	movpl	r3, #0
 8005f48:	9304      	strmi	r3, [sp, #16]
 8005f4a:	2300      	movmi	r3, #0
 8005f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f4e:	bf54      	ite	pl
 8005f50:	9304      	strpl	r3, [sp, #16]
 8005f52:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005f54:	2f00      	cmp	r7, #0
 8005f56:	db3b      	blt.n	8005fd0 <_dtoa_r+0x220>
 8005f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5a:	970e      	str	r7, [sp, #56]	@ 0x38
 8005f5c:	443b      	add	r3, r7
 8005f5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f60:	2300      	movs	r3, #0
 8005f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d865      	bhi.n	8006036 <_dtoa_r+0x286>
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	bfc4      	itt	gt
 8005f6e:	3b04      	subgt	r3, #4
 8005f70:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005f72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f74:	bfc8      	it	gt
 8005f76:	2400      	movgt	r4, #0
 8005f78:	f1a3 0302 	sub.w	r3, r3, #2
 8005f7c:	bfd8      	it	le
 8005f7e:	2401      	movle	r4, #1
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d864      	bhi.n	800604e <_dtoa_r+0x29e>
 8005f84:	e8df f003 	tbb	[pc, r3]
 8005f88:	2c385553 	.word	0x2c385553
 8005f8c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f90:	441e      	add	r6, r3
 8005f92:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	bfc1      	itttt	gt
 8005f9a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f9e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005fa2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005fa6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005faa:	bfd6      	itet	le
 8005fac:	f1c3 0320 	rsble	r3, r3, #32
 8005fb0:	ea48 0003 	orrgt.w	r0, r8, r3
 8005fb4:	fa04 f003 	lslle.w	r0, r4, r3
 8005fb8:	f7fa fa14 	bl	80003e4 <__aeabi_ui2d>
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fc2:	3e01      	subs	r6, #1
 8005fc4:	9212      	str	r2, [sp, #72]	@ 0x48
 8005fc6:	e774      	b.n	8005eb2 <_dtoa_r+0x102>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e7b5      	b.n	8005f38 <_dtoa_r+0x188>
 8005fcc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005fce:	e7b4      	b.n	8005f3a <_dtoa_r+0x18a>
 8005fd0:	9b04      	ldr	r3, [sp, #16]
 8005fd2:	1bdb      	subs	r3, r3, r7
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	427b      	negs	r3, r7
 8005fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fda:	2300      	movs	r3, #0
 8005fdc:	930e      	str	r3, [sp, #56]	@ 0x38
 8005fde:	e7c1      	b.n	8005f64 <_dtoa_r+0x1b4>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fe6:	eb07 0b03 	add.w	fp, r7, r3
 8005fea:	f10b 0301 	add.w	r3, fp, #1
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	9308      	str	r3, [sp, #32]
 8005ff2:	bfb8      	it	lt
 8005ff4:	2301      	movlt	r3, #1
 8005ff6:	e006      	b.n	8006006 <_dtoa_r+0x256>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ffc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	dd28      	ble.n	8006054 <_dtoa_r+0x2a4>
 8006002:	469b      	mov	fp, r3
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	2100      	movs	r1, #0
 8006008:	2204      	movs	r2, #4
 800600a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800600e:	f102 0514 	add.w	r5, r2, #20
 8006012:	429d      	cmp	r5, r3
 8006014:	d926      	bls.n	8006064 <_dtoa_r+0x2b4>
 8006016:	6041      	str	r1, [r0, #4]
 8006018:	4648      	mov	r0, r9
 800601a:	f000 fd9b 	bl	8006b54 <_Balloc>
 800601e:	4682      	mov	sl, r0
 8006020:	2800      	cmp	r0, #0
 8006022:	d143      	bne.n	80060ac <_dtoa_r+0x2fc>
 8006024:	4602      	mov	r2, r0
 8006026:	f240 11af 	movw	r1, #431	@ 0x1af
 800602a:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <_dtoa_r+0x2f8>)
 800602c:	e6d4      	b.n	8005dd8 <_dtoa_r+0x28>
 800602e:	2300      	movs	r3, #0
 8006030:	e7e3      	b.n	8005ffa <_dtoa_r+0x24a>
 8006032:	2300      	movs	r3, #0
 8006034:	e7d5      	b.n	8005fe2 <_dtoa_r+0x232>
 8006036:	2401      	movs	r4, #1
 8006038:	2300      	movs	r3, #0
 800603a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800603c:	9320      	str	r3, [sp, #128]	@ 0x80
 800603e:	f04f 3bff 	mov.w	fp, #4294967295
 8006042:	2200      	movs	r2, #0
 8006044:	2312      	movs	r3, #18
 8006046:	f8cd b020 	str.w	fp, [sp, #32]
 800604a:	9221      	str	r2, [sp, #132]	@ 0x84
 800604c:	e7db      	b.n	8006006 <_dtoa_r+0x256>
 800604e:	2301      	movs	r3, #1
 8006050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006052:	e7f4      	b.n	800603e <_dtoa_r+0x28e>
 8006054:	f04f 0b01 	mov.w	fp, #1
 8006058:	465b      	mov	r3, fp
 800605a:	f8cd b020 	str.w	fp, [sp, #32]
 800605e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006062:	e7d0      	b.n	8006006 <_dtoa_r+0x256>
 8006064:	3101      	adds	r1, #1
 8006066:	0052      	lsls	r2, r2, #1
 8006068:	e7d1      	b.n	800600e <_dtoa_r+0x25e>
 800606a:	bf00      	nop
 800606c:	f3af 8000 	nop.w
 8006070:	636f4361 	.word	0x636f4361
 8006074:	3fd287a7 	.word	0x3fd287a7
 8006078:	8b60c8b3 	.word	0x8b60c8b3
 800607c:	3fc68a28 	.word	0x3fc68a28
 8006080:	509f79fb 	.word	0x509f79fb
 8006084:	3fd34413 	.word	0x3fd34413
 8006088:	08008053 	.word	0x08008053
 800608c:	0800806a 	.word	0x0800806a
 8006090:	7ff00000 	.word	0x7ff00000
 8006094:	0800804f 	.word	0x0800804f
 8006098:	08008023 	.word	0x08008023
 800609c:	08008022 	.word	0x08008022
 80060a0:	3ff80000 	.word	0x3ff80000
 80060a4:	080081b8 	.word	0x080081b8
 80060a8:	080080c2 	.word	0x080080c2
 80060ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80060b0:	6018      	str	r0, [r3, #0]
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	2b0e      	cmp	r3, #14
 80060b6:	f200 80a1 	bhi.w	80061fc <_dtoa_r+0x44c>
 80060ba:	2c00      	cmp	r4, #0
 80060bc:	f000 809e 	beq.w	80061fc <_dtoa_r+0x44c>
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	dd33      	ble.n	800612c <_dtoa_r+0x37c>
 80060c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006338 <_dtoa_r+0x588>)
 80060c6:	f007 020f 	and.w	r2, r7, #15
 80060ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ce:	05f8      	lsls	r0, r7, #23
 80060d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80060d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060dc:	d516      	bpl.n	800610c <_dtoa_r+0x35c>
 80060de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060e2:	4b96      	ldr	r3, [pc, #600]	@ (800633c <_dtoa_r+0x58c>)
 80060e4:	2603      	movs	r6, #3
 80060e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060ea:	f7fa fb1f 	bl	800072c <__aeabi_ddiv>
 80060ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060f2:	f004 040f 	and.w	r4, r4, #15
 80060f6:	4d91      	ldr	r5, [pc, #580]	@ (800633c <_dtoa_r+0x58c>)
 80060f8:	b954      	cbnz	r4, 8006110 <_dtoa_r+0x360>
 80060fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006102:	f7fa fb13 	bl	800072c <__aeabi_ddiv>
 8006106:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800610a:	e028      	b.n	800615e <_dtoa_r+0x3ae>
 800610c:	2602      	movs	r6, #2
 800610e:	e7f2      	b.n	80060f6 <_dtoa_r+0x346>
 8006110:	07e1      	lsls	r1, r4, #31
 8006112:	d508      	bpl.n	8006126 <_dtoa_r+0x376>
 8006114:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006118:	e9d5 2300 	ldrd	r2, r3, [r5]
 800611c:	f7fa f9dc 	bl	80004d8 <__aeabi_dmul>
 8006120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006124:	3601      	adds	r6, #1
 8006126:	1064      	asrs	r4, r4, #1
 8006128:	3508      	adds	r5, #8
 800612a:	e7e5      	b.n	80060f8 <_dtoa_r+0x348>
 800612c:	f000 80af 	beq.w	800628e <_dtoa_r+0x4de>
 8006130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006134:	427c      	negs	r4, r7
 8006136:	4b80      	ldr	r3, [pc, #512]	@ (8006338 <_dtoa_r+0x588>)
 8006138:	f004 020f 	and.w	r2, r4, #15
 800613c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa f9c8 	bl	80004d8 <__aeabi_dmul>
 8006148:	2602      	movs	r6, #2
 800614a:	2300      	movs	r3, #0
 800614c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006150:	4d7a      	ldr	r5, [pc, #488]	@ (800633c <_dtoa_r+0x58c>)
 8006152:	1124      	asrs	r4, r4, #4
 8006154:	2c00      	cmp	r4, #0
 8006156:	f040 808f 	bne.w	8006278 <_dtoa_r+0x4c8>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1d3      	bne.n	8006106 <_dtoa_r+0x356>
 800615e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8094 	beq.w	8006292 <_dtoa_r+0x4e2>
 800616a:	2200      	movs	r2, #0
 800616c:	4620      	mov	r0, r4
 800616e:	4629      	mov	r1, r5
 8006170:	4b73      	ldr	r3, [pc, #460]	@ (8006340 <_dtoa_r+0x590>)
 8006172:	f7fa fc23 	bl	80009bc <__aeabi_dcmplt>
 8006176:	2800      	cmp	r0, #0
 8006178:	f000 808b 	beq.w	8006292 <_dtoa_r+0x4e2>
 800617c:	9b08      	ldr	r3, [sp, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8087 	beq.w	8006292 <_dtoa_r+0x4e2>
 8006184:	f1bb 0f00 	cmp.w	fp, #0
 8006188:	dd34      	ble.n	80061f4 <_dtoa_r+0x444>
 800618a:	4620      	mov	r0, r4
 800618c:	2200      	movs	r2, #0
 800618e:	4629      	mov	r1, r5
 8006190:	4b6c      	ldr	r3, [pc, #432]	@ (8006344 <_dtoa_r+0x594>)
 8006192:	f7fa f9a1 	bl	80004d8 <__aeabi_dmul>
 8006196:	465c      	mov	r4, fp
 8006198:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800619c:	f107 38ff 	add.w	r8, r7, #4294967295
 80061a0:	3601      	adds	r6, #1
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7fa f92e 	bl	8000404 <__aeabi_i2d>
 80061a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061ac:	f7fa f994 	bl	80004d8 <__aeabi_dmul>
 80061b0:	2200      	movs	r2, #0
 80061b2:	4b65      	ldr	r3, [pc, #404]	@ (8006348 <_dtoa_r+0x598>)
 80061b4:	f7f9 ffda 	bl	800016c <__adddf3>
 80061b8:	4605      	mov	r5, r0
 80061ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061be:	2c00      	cmp	r4, #0
 80061c0:	d16a      	bne.n	8006298 <_dtoa_r+0x4e8>
 80061c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061c6:	2200      	movs	r2, #0
 80061c8:	4b60      	ldr	r3, [pc, #384]	@ (800634c <_dtoa_r+0x59c>)
 80061ca:	f7f9 ffcd 	bl	8000168 <__aeabi_dsub>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061d6:	462a      	mov	r2, r5
 80061d8:	4633      	mov	r3, r6
 80061da:	f7fa fc0d 	bl	80009f8 <__aeabi_dcmpgt>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f040 8298 	bne.w	8006714 <_dtoa_r+0x964>
 80061e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061e8:	462a      	mov	r2, r5
 80061ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061ee:	f7fa fbe5 	bl	80009bc <__aeabi_dcmplt>
 80061f2:	bb38      	cbnz	r0, 8006244 <_dtoa_r+0x494>
 80061f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80061fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f2c0 8157 	blt.w	80064b2 <_dtoa_r+0x702>
 8006204:	2f0e      	cmp	r7, #14
 8006206:	f300 8154 	bgt.w	80064b2 <_dtoa_r+0x702>
 800620a:	4b4b      	ldr	r3, [pc, #300]	@ (8006338 <_dtoa_r+0x588>)
 800620c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006210:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006214:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006218:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800621a:	2b00      	cmp	r3, #0
 800621c:	f280 80e5 	bge.w	80063ea <_dtoa_r+0x63a>
 8006220:	9b08      	ldr	r3, [sp, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f300 80e1 	bgt.w	80063ea <_dtoa_r+0x63a>
 8006228:	d10c      	bne.n	8006244 <_dtoa_r+0x494>
 800622a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800622e:	2200      	movs	r2, #0
 8006230:	4b46      	ldr	r3, [pc, #280]	@ (800634c <_dtoa_r+0x59c>)
 8006232:	f7fa f951 	bl	80004d8 <__aeabi_dmul>
 8006236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800623a:	f7fa fbd3 	bl	80009e4 <__aeabi_dcmpge>
 800623e:	2800      	cmp	r0, #0
 8006240:	f000 8266 	beq.w	8006710 <_dtoa_r+0x960>
 8006244:	2400      	movs	r4, #0
 8006246:	4625      	mov	r5, r4
 8006248:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800624a:	4656      	mov	r6, sl
 800624c:	ea6f 0803 	mvn.w	r8, r3
 8006250:	2700      	movs	r7, #0
 8006252:	4621      	mov	r1, r4
 8006254:	4648      	mov	r0, r9
 8006256:	f000 fcbd 	bl	8006bd4 <_Bfree>
 800625a:	2d00      	cmp	r5, #0
 800625c:	f000 80bd 	beq.w	80063da <_dtoa_r+0x62a>
 8006260:	b12f      	cbz	r7, 800626e <_dtoa_r+0x4be>
 8006262:	42af      	cmp	r7, r5
 8006264:	d003      	beq.n	800626e <_dtoa_r+0x4be>
 8006266:	4639      	mov	r1, r7
 8006268:	4648      	mov	r0, r9
 800626a:	f000 fcb3 	bl	8006bd4 <_Bfree>
 800626e:	4629      	mov	r1, r5
 8006270:	4648      	mov	r0, r9
 8006272:	f000 fcaf 	bl	8006bd4 <_Bfree>
 8006276:	e0b0      	b.n	80063da <_dtoa_r+0x62a>
 8006278:	07e2      	lsls	r2, r4, #31
 800627a:	d505      	bpl.n	8006288 <_dtoa_r+0x4d8>
 800627c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006280:	f7fa f92a 	bl	80004d8 <__aeabi_dmul>
 8006284:	2301      	movs	r3, #1
 8006286:	3601      	adds	r6, #1
 8006288:	1064      	asrs	r4, r4, #1
 800628a:	3508      	adds	r5, #8
 800628c:	e762      	b.n	8006154 <_dtoa_r+0x3a4>
 800628e:	2602      	movs	r6, #2
 8006290:	e765      	b.n	800615e <_dtoa_r+0x3ae>
 8006292:	46b8      	mov	r8, r7
 8006294:	9c08      	ldr	r4, [sp, #32]
 8006296:	e784      	b.n	80061a2 <_dtoa_r+0x3f2>
 8006298:	4b27      	ldr	r3, [pc, #156]	@ (8006338 <_dtoa_r+0x588>)
 800629a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800629c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062a4:	4454      	add	r4, sl
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d054      	beq.n	8006354 <_dtoa_r+0x5a4>
 80062aa:	2000      	movs	r0, #0
 80062ac:	4928      	ldr	r1, [pc, #160]	@ (8006350 <_dtoa_r+0x5a0>)
 80062ae:	f7fa fa3d 	bl	800072c <__aeabi_ddiv>
 80062b2:	4633      	mov	r3, r6
 80062b4:	462a      	mov	r2, r5
 80062b6:	f7f9 ff57 	bl	8000168 <__aeabi_dsub>
 80062ba:	4656      	mov	r6, sl
 80062bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c4:	f7fa fbb8 	bl	8000a38 <__aeabi_d2iz>
 80062c8:	4605      	mov	r5, r0
 80062ca:	f7fa f89b 	bl	8000404 <__aeabi_i2d>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062d6:	f7f9 ff47 	bl	8000168 <__aeabi_dsub>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	3530      	adds	r5, #48	@ 0x30
 80062e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062e8:	f806 5b01 	strb.w	r5, [r6], #1
 80062ec:	f7fa fb66 	bl	80009bc <__aeabi_dcmplt>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d172      	bne.n	80063da <_dtoa_r+0x62a>
 80062f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062f8:	2000      	movs	r0, #0
 80062fa:	4911      	ldr	r1, [pc, #68]	@ (8006340 <_dtoa_r+0x590>)
 80062fc:	f7f9 ff34 	bl	8000168 <__aeabi_dsub>
 8006300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006304:	f7fa fb5a 	bl	80009bc <__aeabi_dcmplt>
 8006308:	2800      	cmp	r0, #0
 800630a:	f040 80b4 	bne.w	8006476 <_dtoa_r+0x6c6>
 800630e:	42a6      	cmp	r6, r4
 8006310:	f43f af70 	beq.w	80061f4 <_dtoa_r+0x444>
 8006314:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006318:	2200      	movs	r2, #0
 800631a:	4b0a      	ldr	r3, [pc, #40]	@ (8006344 <_dtoa_r+0x594>)
 800631c:	f7fa f8dc 	bl	80004d8 <__aeabi_dmul>
 8006320:	2200      	movs	r2, #0
 8006322:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800632a:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <_dtoa_r+0x594>)
 800632c:	f7fa f8d4 	bl	80004d8 <__aeabi_dmul>
 8006330:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006334:	e7c4      	b.n	80062c0 <_dtoa_r+0x510>
 8006336:	bf00      	nop
 8006338:	080081b8 	.word	0x080081b8
 800633c:	08008190 	.word	0x08008190
 8006340:	3ff00000 	.word	0x3ff00000
 8006344:	40240000 	.word	0x40240000
 8006348:	401c0000 	.word	0x401c0000
 800634c:	40140000 	.word	0x40140000
 8006350:	3fe00000 	.word	0x3fe00000
 8006354:	4631      	mov	r1, r6
 8006356:	4628      	mov	r0, r5
 8006358:	f7fa f8be 	bl	80004d8 <__aeabi_dmul>
 800635c:	4656      	mov	r6, sl
 800635e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006362:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006368:	f7fa fb66 	bl	8000a38 <__aeabi_d2iz>
 800636c:	4605      	mov	r5, r0
 800636e:	f7fa f849 	bl	8000404 <__aeabi_i2d>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800637a:	f7f9 fef5 	bl	8000168 <__aeabi_dsub>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	3530      	adds	r5, #48	@ 0x30
 8006384:	f806 5b01 	strb.w	r5, [r6], #1
 8006388:	42a6      	cmp	r6, r4
 800638a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	d124      	bne.n	80063de <_dtoa_r+0x62e>
 8006394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006398:	4bae      	ldr	r3, [pc, #696]	@ (8006654 <_dtoa_r+0x8a4>)
 800639a:	f7f9 fee7 	bl	800016c <__adddf3>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063a6:	f7fa fb27 	bl	80009f8 <__aeabi_dcmpgt>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d163      	bne.n	8006476 <_dtoa_r+0x6c6>
 80063ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063b2:	2000      	movs	r0, #0
 80063b4:	49a7      	ldr	r1, [pc, #668]	@ (8006654 <_dtoa_r+0x8a4>)
 80063b6:	f7f9 fed7 	bl	8000168 <__aeabi_dsub>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c2:	f7fa fafb 	bl	80009bc <__aeabi_dcmplt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f43f af14 	beq.w	80061f4 <_dtoa_r+0x444>
 80063cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80063ce:	1e73      	subs	r3, r6, #1
 80063d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063d6:	2b30      	cmp	r3, #48	@ 0x30
 80063d8:	d0f8      	beq.n	80063cc <_dtoa_r+0x61c>
 80063da:	4647      	mov	r7, r8
 80063dc:	e03b      	b.n	8006456 <_dtoa_r+0x6a6>
 80063de:	4b9e      	ldr	r3, [pc, #632]	@ (8006658 <_dtoa_r+0x8a8>)
 80063e0:	f7fa f87a 	bl	80004d8 <__aeabi_dmul>
 80063e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063e8:	e7bc      	b.n	8006364 <_dtoa_r+0x5b4>
 80063ea:	4656      	mov	r6, sl
 80063ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80063f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063f4:	4620      	mov	r0, r4
 80063f6:	4629      	mov	r1, r5
 80063f8:	f7fa f998 	bl	800072c <__aeabi_ddiv>
 80063fc:	f7fa fb1c 	bl	8000a38 <__aeabi_d2iz>
 8006400:	4680      	mov	r8, r0
 8006402:	f7f9 ffff 	bl	8000404 <__aeabi_i2d>
 8006406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640a:	f7fa f865 	bl	80004d8 <__aeabi_dmul>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f7f9 fea7 	bl	8000168 <__aeabi_dsub>
 800641a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800641e:	9d08      	ldr	r5, [sp, #32]
 8006420:	f806 4b01 	strb.w	r4, [r6], #1
 8006424:	eba6 040a 	sub.w	r4, r6, sl
 8006428:	42a5      	cmp	r5, r4
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	d133      	bne.n	8006498 <_dtoa_r+0x6e8>
 8006430:	f7f9 fe9c 	bl	800016c <__adddf3>
 8006434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	f7fa fadc 	bl	80009f8 <__aeabi_dcmpgt>
 8006440:	b9c0      	cbnz	r0, 8006474 <_dtoa_r+0x6c4>
 8006442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7fa faad 	bl	80009a8 <__aeabi_dcmpeq>
 800644e:	b110      	cbz	r0, 8006456 <_dtoa_r+0x6a6>
 8006450:	f018 0f01 	tst.w	r8, #1
 8006454:	d10e      	bne.n	8006474 <_dtoa_r+0x6c4>
 8006456:	4648      	mov	r0, r9
 8006458:	9903      	ldr	r1, [sp, #12]
 800645a:	f000 fbbb 	bl	8006bd4 <_Bfree>
 800645e:	2300      	movs	r3, #0
 8006460:	7033      	strb	r3, [r6, #0]
 8006462:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006464:	3701      	adds	r7, #1
 8006466:	601f      	str	r7, [r3, #0]
 8006468:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 824b 	beq.w	8006906 <_dtoa_r+0xb56>
 8006470:	601e      	str	r6, [r3, #0]
 8006472:	e248      	b.n	8006906 <_dtoa_r+0xb56>
 8006474:	46b8      	mov	r8, r7
 8006476:	4633      	mov	r3, r6
 8006478:	461e      	mov	r6, r3
 800647a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800647e:	2a39      	cmp	r2, #57	@ 0x39
 8006480:	d106      	bne.n	8006490 <_dtoa_r+0x6e0>
 8006482:	459a      	cmp	sl, r3
 8006484:	d1f8      	bne.n	8006478 <_dtoa_r+0x6c8>
 8006486:	2230      	movs	r2, #48	@ 0x30
 8006488:	f108 0801 	add.w	r8, r8, #1
 800648c:	f88a 2000 	strb.w	r2, [sl]
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	3201      	adds	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e7a0      	b.n	80063da <_dtoa_r+0x62a>
 8006498:	2200      	movs	r2, #0
 800649a:	4b6f      	ldr	r3, [pc, #444]	@ (8006658 <_dtoa_r+0x8a8>)
 800649c:	f7fa f81c 	bl	80004d8 <__aeabi_dmul>
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4604      	mov	r4, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	f7fa fa7e 	bl	80009a8 <__aeabi_dcmpeq>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d09f      	beq.n	80063f0 <_dtoa_r+0x640>
 80064b0:	e7d1      	b.n	8006456 <_dtoa_r+0x6a6>
 80064b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	f000 80ea 	beq.w	800668e <_dtoa_r+0x8de>
 80064ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064bc:	2a01      	cmp	r2, #1
 80064be:	f300 80cd 	bgt.w	800665c <_dtoa_r+0x8ac>
 80064c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	f000 80c1 	beq.w	800664c <_dtoa_r+0x89c>
 80064ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064d0:	9e04      	ldr	r6, [sp, #16]
 80064d2:	9a04      	ldr	r2, [sp, #16]
 80064d4:	2101      	movs	r1, #1
 80064d6:	441a      	add	r2, r3
 80064d8:	9204      	str	r2, [sp, #16]
 80064da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064dc:	4648      	mov	r0, r9
 80064de:	441a      	add	r2, r3
 80064e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80064e2:	f000 fc2b 	bl	8006d3c <__i2b>
 80064e6:	4605      	mov	r5, r0
 80064e8:	b166      	cbz	r6, 8006504 <_dtoa_r+0x754>
 80064ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dd09      	ble.n	8006504 <_dtoa_r+0x754>
 80064f0:	42b3      	cmp	r3, r6
 80064f2:	bfa8      	it	ge
 80064f4:	4633      	movge	r3, r6
 80064f6:	9a04      	ldr	r2, [sp, #16]
 80064f8:	1af6      	subs	r6, r6, r3
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	9204      	str	r2, [sp, #16]
 80064fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	9309      	str	r3, [sp, #36]	@ 0x24
 8006504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006506:	b30b      	cbz	r3, 800654c <_dtoa_r+0x79c>
 8006508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80c6 	beq.w	800669c <_dtoa_r+0x8ec>
 8006510:	2c00      	cmp	r4, #0
 8006512:	f000 80c0 	beq.w	8006696 <_dtoa_r+0x8e6>
 8006516:	4629      	mov	r1, r5
 8006518:	4622      	mov	r2, r4
 800651a:	4648      	mov	r0, r9
 800651c:	f000 fcc6 	bl	8006eac <__pow5mult>
 8006520:	9a03      	ldr	r2, [sp, #12]
 8006522:	4601      	mov	r1, r0
 8006524:	4605      	mov	r5, r0
 8006526:	4648      	mov	r0, r9
 8006528:	f000 fc1e 	bl	8006d68 <__multiply>
 800652c:	9903      	ldr	r1, [sp, #12]
 800652e:	4680      	mov	r8, r0
 8006530:	4648      	mov	r0, r9
 8006532:	f000 fb4f 	bl	8006bd4 <_Bfree>
 8006536:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006538:	1b1b      	subs	r3, r3, r4
 800653a:	930a      	str	r3, [sp, #40]	@ 0x28
 800653c:	f000 80b1 	beq.w	80066a2 <_dtoa_r+0x8f2>
 8006540:	4641      	mov	r1, r8
 8006542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006544:	4648      	mov	r0, r9
 8006546:	f000 fcb1 	bl	8006eac <__pow5mult>
 800654a:	9003      	str	r0, [sp, #12]
 800654c:	2101      	movs	r1, #1
 800654e:	4648      	mov	r0, r9
 8006550:	f000 fbf4 	bl	8006d3c <__i2b>
 8006554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006556:	4604      	mov	r4, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 81d8 	beq.w	800690e <_dtoa_r+0xb5e>
 800655e:	461a      	mov	r2, r3
 8006560:	4601      	mov	r1, r0
 8006562:	4648      	mov	r0, r9
 8006564:	f000 fca2 	bl	8006eac <__pow5mult>
 8006568:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800656a:	4604      	mov	r4, r0
 800656c:	2b01      	cmp	r3, #1
 800656e:	f300 809f 	bgt.w	80066b0 <_dtoa_r+0x900>
 8006572:	9b06      	ldr	r3, [sp, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 8097 	bne.w	80066a8 <_dtoa_r+0x8f8>
 800657a:	9b07      	ldr	r3, [sp, #28]
 800657c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 8093 	bne.w	80066ac <_dtoa_r+0x8fc>
 8006586:	9b07      	ldr	r3, [sp, #28]
 8006588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800658c:	0d1b      	lsrs	r3, r3, #20
 800658e:	051b      	lsls	r3, r3, #20
 8006590:	b133      	cbz	r3, 80065a0 <_dtoa_r+0x7f0>
 8006592:	9b04      	ldr	r3, [sp, #16]
 8006594:	3301      	adds	r3, #1
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659a:	3301      	adds	r3, #1
 800659c:	9309      	str	r3, [sp, #36]	@ 0x24
 800659e:	2301      	movs	r3, #1
 80065a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 81b8 	beq.w	800691a <_dtoa_r+0xb6a>
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065b0:	6918      	ldr	r0, [r3, #16]
 80065b2:	f000 fb77 	bl	8006ca4 <__hi0bits>
 80065b6:	f1c0 0020 	rsb	r0, r0, #32
 80065ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065bc:	4418      	add	r0, r3
 80065be:	f010 001f 	ands.w	r0, r0, #31
 80065c2:	f000 8082 	beq.w	80066ca <_dtoa_r+0x91a>
 80065c6:	f1c0 0320 	rsb	r3, r0, #32
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	dd73      	ble.n	80066b6 <_dtoa_r+0x906>
 80065ce:	9b04      	ldr	r3, [sp, #16]
 80065d0:	f1c0 001c 	rsb	r0, r0, #28
 80065d4:	4403      	add	r3, r0
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065da:	4406      	add	r6, r0
 80065dc:	4403      	add	r3, r0
 80065de:	9309      	str	r3, [sp, #36]	@ 0x24
 80065e0:	9b04      	ldr	r3, [sp, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd05      	ble.n	80065f2 <_dtoa_r+0x842>
 80065e6:	461a      	mov	r2, r3
 80065e8:	4648      	mov	r0, r9
 80065ea:	9903      	ldr	r1, [sp, #12]
 80065ec:	f000 fcb8 	bl	8006f60 <__lshift>
 80065f0:	9003      	str	r0, [sp, #12]
 80065f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dd05      	ble.n	8006604 <_dtoa_r+0x854>
 80065f8:	4621      	mov	r1, r4
 80065fa:	461a      	mov	r2, r3
 80065fc:	4648      	mov	r0, r9
 80065fe:	f000 fcaf 	bl	8006f60 <__lshift>
 8006602:	4604      	mov	r4, r0
 8006604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d061      	beq.n	80066ce <_dtoa_r+0x91e>
 800660a:	4621      	mov	r1, r4
 800660c:	9803      	ldr	r0, [sp, #12]
 800660e:	f000 fd13 	bl	8007038 <__mcmp>
 8006612:	2800      	cmp	r0, #0
 8006614:	da5b      	bge.n	80066ce <_dtoa_r+0x91e>
 8006616:	2300      	movs	r3, #0
 8006618:	220a      	movs	r2, #10
 800661a:	4648      	mov	r0, r9
 800661c:	9903      	ldr	r1, [sp, #12]
 800661e:	f000 fafb 	bl	8006c18 <__multadd>
 8006622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006624:	f107 38ff 	add.w	r8, r7, #4294967295
 8006628:	9003      	str	r0, [sp, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8177 	beq.w	800691e <_dtoa_r+0xb6e>
 8006630:	4629      	mov	r1, r5
 8006632:	2300      	movs	r3, #0
 8006634:	220a      	movs	r2, #10
 8006636:	4648      	mov	r0, r9
 8006638:	f000 faee 	bl	8006c18 <__multadd>
 800663c:	f1bb 0f00 	cmp.w	fp, #0
 8006640:	4605      	mov	r5, r0
 8006642:	dc6f      	bgt.n	8006724 <_dtoa_r+0x974>
 8006644:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006646:	2b02      	cmp	r3, #2
 8006648:	dc49      	bgt.n	80066de <_dtoa_r+0x92e>
 800664a:	e06b      	b.n	8006724 <_dtoa_r+0x974>
 800664c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800664e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006652:	e73c      	b.n	80064ce <_dtoa_r+0x71e>
 8006654:	3fe00000 	.word	0x3fe00000
 8006658:	40240000 	.word	0x40240000
 800665c:	9b08      	ldr	r3, [sp, #32]
 800665e:	1e5c      	subs	r4, r3, #1
 8006660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006662:	42a3      	cmp	r3, r4
 8006664:	db09      	blt.n	800667a <_dtoa_r+0x8ca>
 8006666:	1b1c      	subs	r4, r3, r4
 8006668:	9b08      	ldr	r3, [sp, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f6bf af30 	bge.w	80064d0 <_dtoa_r+0x720>
 8006670:	9b04      	ldr	r3, [sp, #16]
 8006672:	9a08      	ldr	r2, [sp, #32]
 8006674:	1a9e      	subs	r6, r3, r2
 8006676:	2300      	movs	r3, #0
 8006678:	e72b      	b.n	80064d2 <_dtoa_r+0x722>
 800667a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800667c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800667e:	1ae3      	subs	r3, r4, r3
 8006680:	441a      	add	r2, r3
 8006682:	940a      	str	r4, [sp, #40]	@ 0x28
 8006684:	9e04      	ldr	r6, [sp, #16]
 8006686:	2400      	movs	r4, #0
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	920e      	str	r2, [sp, #56]	@ 0x38
 800668c:	e721      	b.n	80064d2 <_dtoa_r+0x722>
 800668e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006690:	9e04      	ldr	r6, [sp, #16]
 8006692:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006694:	e728      	b.n	80064e8 <_dtoa_r+0x738>
 8006696:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800669a:	e751      	b.n	8006540 <_dtoa_r+0x790>
 800669c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800669e:	9903      	ldr	r1, [sp, #12]
 80066a0:	e750      	b.n	8006544 <_dtoa_r+0x794>
 80066a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a6:	e751      	b.n	800654c <_dtoa_r+0x79c>
 80066a8:	2300      	movs	r3, #0
 80066aa:	e779      	b.n	80065a0 <_dtoa_r+0x7f0>
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	e777      	b.n	80065a0 <_dtoa_r+0x7f0>
 80066b0:	2300      	movs	r3, #0
 80066b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b4:	e779      	b.n	80065aa <_dtoa_r+0x7fa>
 80066b6:	d093      	beq.n	80065e0 <_dtoa_r+0x830>
 80066b8:	9a04      	ldr	r2, [sp, #16]
 80066ba:	331c      	adds	r3, #28
 80066bc:	441a      	add	r2, r3
 80066be:	9204      	str	r2, [sp, #16]
 80066c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c2:	441e      	add	r6, r3
 80066c4:	441a      	add	r2, r3
 80066c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c8:	e78a      	b.n	80065e0 <_dtoa_r+0x830>
 80066ca:	4603      	mov	r3, r0
 80066cc:	e7f4      	b.n	80066b8 <_dtoa_r+0x908>
 80066ce:	9b08      	ldr	r3, [sp, #32]
 80066d0:	46b8      	mov	r8, r7
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	dc20      	bgt.n	8006718 <_dtoa_r+0x968>
 80066d6:	469b      	mov	fp, r3
 80066d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066da:	2b02      	cmp	r3, #2
 80066dc:	dd1e      	ble.n	800671c <_dtoa_r+0x96c>
 80066de:	f1bb 0f00 	cmp.w	fp, #0
 80066e2:	f47f adb1 	bne.w	8006248 <_dtoa_r+0x498>
 80066e6:	4621      	mov	r1, r4
 80066e8:	465b      	mov	r3, fp
 80066ea:	2205      	movs	r2, #5
 80066ec:	4648      	mov	r0, r9
 80066ee:	f000 fa93 	bl	8006c18 <__multadd>
 80066f2:	4601      	mov	r1, r0
 80066f4:	4604      	mov	r4, r0
 80066f6:	9803      	ldr	r0, [sp, #12]
 80066f8:	f000 fc9e 	bl	8007038 <__mcmp>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	f77f ada3 	ble.w	8006248 <_dtoa_r+0x498>
 8006702:	4656      	mov	r6, sl
 8006704:	2331      	movs	r3, #49	@ 0x31
 8006706:	f108 0801 	add.w	r8, r8, #1
 800670a:	f806 3b01 	strb.w	r3, [r6], #1
 800670e:	e59f      	b.n	8006250 <_dtoa_r+0x4a0>
 8006710:	46b8      	mov	r8, r7
 8006712:	9c08      	ldr	r4, [sp, #32]
 8006714:	4625      	mov	r5, r4
 8006716:	e7f4      	b.n	8006702 <_dtoa_r+0x952>
 8006718:	f8dd b020 	ldr.w	fp, [sp, #32]
 800671c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8101 	beq.w	8006926 <_dtoa_r+0xb76>
 8006724:	2e00      	cmp	r6, #0
 8006726:	dd05      	ble.n	8006734 <_dtoa_r+0x984>
 8006728:	4629      	mov	r1, r5
 800672a:	4632      	mov	r2, r6
 800672c:	4648      	mov	r0, r9
 800672e:	f000 fc17 	bl	8006f60 <__lshift>
 8006732:	4605      	mov	r5, r0
 8006734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d05c      	beq.n	80067f4 <_dtoa_r+0xa44>
 800673a:	4648      	mov	r0, r9
 800673c:	6869      	ldr	r1, [r5, #4]
 800673e:	f000 fa09 	bl	8006b54 <_Balloc>
 8006742:	4606      	mov	r6, r0
 8006744:	b928      	cbnz	r0, 8006752 <_dtoa_r+0x9a2>
 8006746:	4602      	mov	r2, r0
 8006748:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800674c:	4b80      	ldr	r3, [pc, #512]	@ (8006950 <_dtoa_r+0xba0>)
 800674e:	f7ff bb43 	b.w	8005dd8 <_dtoa_r+0x28>
 8006752:	692a      	ldr	r2, [r5, #16]
 8006754:	f105 010c 	add.w	r1, r5, #12
 8006758:	3202      	adds	r2, #2
 800675a:	0092      	lsls	r2, r2, #2
 800675c:	300c      	adds	r0, #12
 800675e:	f000 ff9d 	bl	800769c <memcpy>
 8006762:	2201      	movs	r2, #1
 8006764:	4631      	mov	r1, r6
 8006766:	4648      	mov	r0, r9
 8006768:	f000 fbfa 	bl	8006f60 <__lshift>
 800676c:	462f      	mov	r7, r5
 800676e:	4605      	mov	r5, r0
 8006770:	f10a 0301 	add.w	r3, sl, #1
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	eb0a 030b 	add.w	r3, sl, fp
 800677a:	930a      	str	r3, [sp, #40]	@ 0x28
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	9309      	str	r3, [sp, #36]	@ 0x24
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	4621      	mov	r1, r4
 8006788:	9803      	ldr	r0, [sp, #12]
 800678a:	f103 3bff 	add.w	fp, r3, #4294967295
 800678e:	f7ff fa84 	bl	8005c9a <quorem>
 8006792:	4603      	mov	r3, r0
 8006794:	4639      	mov	r1, r7
 8006796:	3330      	adds	r3, #48	@ 0x30
 8006798:	9006      	str	r0, [sp, #24]
 800679a:	9803      	ldr	r0, [sp, #12]
 800679c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800679e:	f000 fc4b 	bl	8007038 <__mcmp>
 80067a2:	462a      	mov	r2, r5
 80067a4:	9008      	str	r0, [sp, #32]
 80067a6:	4621      	mov	r1, r4
 80067a8:	4648      	mov	r0, r9
 80067aa:	f000 fc61 	bl	8007070 <__mdiff>
 80067ae:	68c2      	ldr	r2, [r0, #12]
 80067b0:	4606      	mov	r6, r0
 80067b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067b4:	bb02      	cbnz	r2, 80067f8 <_dtoa_r+0xa48>
 80067b6:	4601      	mov	r1, r0
 80067b8:	9803      	ldr	r0, [sp, #12]
 80067ba:	f000 fc3d 	bl	8007038 <__mcmp>
 80067be:	4602      	mov	r2, r0
 80067c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067c2:	4631      	mov	r1, r6
 80067c4:	4648      	mov	r0, r9
 80067c6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80067ca:	f000 fa03 	bl	8006bd4 <_Bfree>
 80067ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80067d2:	9e04      	ldr	r6, [sp, #16]
 80067d4:	ea42 0103 	orr.w	r1, r2, r3
 80067d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067da:	4319      	orrs	r1, r3
 80067dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067de:	d10d      	bne.n	80067fc <_dtoa_r+0xa4c>
 80067e0:	2b39      	cmp	r3, #57	@ 0x39
 80067e2:	d027      	beq.n	8006834 <_dtoa_r+0xa84>
 80067e4:	9a08      	ldr	r2, [sp, #32]
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	dd01      	ble.n	80067ee <_dtoa_r+0xa3e>
 80067ea:	9b06      	ldr	r3, [sp, #24]
 80067ec:	3331      	adds	r3, #49	@ 0x31
 80067ee:	f88b 3000 	strb.w	r3, [fp]
 80067f2:	e52e      	b.n	8006252 <_dtoa_r+0x4a2>
 80067f4:	4628      	mov	r0, r5
 80067f6:	e7b9      	b.n	800676c <_dtoa_r+0x9bc>
 80067f8:	2201      	movs	r2, #1
 80067fa:	e7e2      	b.n	80067c2 <_dtoa_r+0xa12>
 80067fc:	9908      	ldr	r1, [sp, #32]
 80067fe:	2900      	cmp	r1, #0
 8006800:	db04      	blt.n	800680c <_dtoa_r+0xa5c>
 8006802:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006804:	4301      	orrs	r1, r0
 8006806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006808:	4301      	orrs	r1, r0
 800680a:	d120      	bne.n	800684e <_dtoa_r+0xa9e>
 800680c:	2a00      	cmp	r2, #0
 800680e:	ddee      	ble.n	80067ee <_dtoa_r+0xa3e>
 8006810:	2201      	movs	r2, #1
 8006812:	9903      	ldr	r1, [sp, #12]
 8006814:	4648      	mov	r0, r9
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	f000 fba2 	bl	8006f60 <__lshift>
 800681c:	4621      	mov	r1, r4
 800681e:	9003      	str	r0, [sp, #12]
 8006820:	f000 fc0a 	bl	8007038 <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	dc02      	bgt.n	8006830 <_dtoa_r+0xa80>
 800682a:	d1e0      	bne.n	80067ee <_dtoa_r+0xa3e>
 800682c:	07da      	lsls	r2, r3, #31
 800682e:	d5de      	bpl.n	80067ee <_dtoa_r+0xa3e>
 8006830:	2b39      	cmp	r3, #57	@ 0x39
 8006832:	d1da      	bne.n	80067ea <_dtoa_r+0xa3a>
 8006834:	2339      	movs	r3, #57	@ 0x39
 8006836:	f88b 3000 	strb.w	r3, [fp]
 800683a:	4633      	mov	r3, r6
 800683c:	461e      	mov	r6, r3
 800683e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006842:	3b01      	subs	r3, #1
 8006844:	2a39      	cmp	r2, #57	@ 0x39
 8006846:	d04e      	beq.n	80068e6 <_dtoa_r+0xb36>
 8006848:	3201      	adds	r2, #1
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e501      	b.n	8006252 <_dtoa_r+0x4a2>
 800684e:	2a00      	cmp	r2, #0
 8006850:	dd03      	ble.n	800685a <_dtoa_r+0xaaa>
 8006852:	2b39      	cmp	r3, #57	@ 0x39
 8006854:	d0ee      	beq.n	8006834 <_dtoa_r+0xa84>
 8006856:	3301      	adds	r3, #1
 8006858:	e7c9      	b.n	80067ee <_dtoa_r+0xa3e>
 800685a:	9a04      	ldr	r2, [sp, #16]
 800685c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800685e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006862:	428a      	cmp	r2, r1
 8006864:	d028      	beq.n	80068b8 <_dtoa_r+0xb08>
 8006866:	2300      	movs	r3, #0
 8006868:	220a      	movs	r2, #10
 800686a:	9903      	ldr	r1, [sp, #12]
 800686c:	4648      	mov	r0, r9
 800686e:	f000 f9d3 	bl	8006c18 <__multadd>
 8006872:	42af      	cmp	r7, r5
 8006874:	9003      	str	r0, [sp, #12]
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	f04f 020a 	mov.w	r2, #10
 800687e:	4639      	mov	r1, r7
 8006880:	4648      	mov	r0, r9
 8006882:	d107      	bne.n	8006894 <_dtoa_r+0xae4>
 8006884:	f000 f9c8 	bl	8006c18 <__multadd>
 8006888:	4607      	mov	r7, r0
 800688a:	4605      	mov	r5, r0
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	3301      	adds	r3, #1
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	e777      	b.n	8006784 <_dtoa_r+0x9d4>
 8006894:	f000 f9c0 	bl	8006c18 <__multadd>
 8006898:	4629      	mov	r1, r5
 800689a:	4607      	mov	r7, r0
 800689c:	2300      	movs	r3, #0
 800689e:	220a      	movs	r2, #10
 80068a0:	4648      	mov	r0, r9
 80068a2:	f000 f9b9 	bl	8006c18 <__multadd>
 80068a6:	4605      	mov	r5, r0
 80068a8:	e7f0      	b.n	800688c <_dtoa_r+0xadc>
 80068aa:	f1bb 0f00 	cmp.w	fp, #0
 80068ae:	bfcc      	ite	gt
 80068b0:	465e      	movgt	r6, fp
 80068b2:	2601      	movle	r6, #1
 80068b4:	2700      	movs	r7, #0
 80068b6:	4456      	add	r6, sl
 80068b8:	2201      	movs	r2, #1
 80068ba:	9903      	ldr	r1, [sp, #12]
 80068bc:	4648      	mov	r0, r9
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	f000 fb4e 	bl	8006f60 <__lshift>
 80068c4:	4621      	mov	r1, r4
 80068c6:	9003      	str	r0, [sp, #12]
 80068c8:	f000 fbb6 	bl	8007038 <__mcmp>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	dcb4      	bgt.n	800683a <_dtoa_r+0xa8a>
 80068d0:	d102      	bne.n	80068d8 <_dtoa_r+0xb28>
 80068d2:	9b04      	ldr	r3, [sp, #16]
 80068d4:	07db      	lsls	r3, r3, #31
 80068d6:	d4b0      	bmi.n	800683a <_dtoa_r+0xa8a>
 80068d8:	4633      	mov	r3, r6
 80068da:	461e      	mov	r6, r3
 80068dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068e0:	2a30      	cmp	r2, #48	@ 0x30
 80068e2:	d0fa      	beq.n	80068da <_dtoa_r+0xb2a>
 80068e4:	e4b5      	b.n	8006252 <_dtoa_r+0x4a2>
 80068e6:	459a      	cmp	sl, r3
 80068e8:	d1a8      	bne.n	800683c <_dtoa_r+0xa8c>
 80068ea:	2331      	movs	r3, #49	@ 0x31
 80068ec:	f108 0801 	add.w	r8, r8, #1
 80068f0:	f88a 3000 	strb.w	r3, [sl]
 80068f4:	e4ad      	b.n	8006252 <_dtoa_r+0x4a2>
 80068f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006954 <_dtoa_r+0xba4>
 80068fc:	b11b      	cbz	r3, 8006906 <_dtoa_r+0xb56>
 80068fe:	f10a 0308 	add.w	r3, sl, #8
 8006902:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	4650      	mov	r0, sl
 8006908:	b017      	add	sp, #92	@ 0x5c
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006910:	2b01      	cmp	r3, #1
 8006912:	f77f ae2e 	ble.w	8006572 <_dtoa_r+0x7c2>
 8006916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006918:	930a      	str	r3, [sp, #40]	@ 0x28
 800691a:	2001      	movs	r0, #1
 800691c:	e64d      	b.n	80065ba <_dtoa_r+0x80a>
 800691e:	f1bb 0f00 	cmp.w	fp, #0
 8006922:	f77f aed9 	ble.w	80066d8 <_dtoa_r+0x928>
 8006926:	4656      	mov	r6, sl
 8006928:	4621      	mov	r1, r4
 800692a:	9803      	ldr	r0, [sp, #12]
 800692c:	f7ff f9b5 	bl	8005c9a <quorem>
 8006930:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006934:	f806 3b01 	strb.w	r3, [r6], #1
 8006938:	eba6 020a 	sub.w	r2, r6, sl
 800693c:	4593      	cmp	fp, r2
 800693e:	ddb4      	ble.n	80068aa <_dtoa_r+0xafa>
 8006940:	2300      	movs	r3, #0
 8006942:	220a      	movs	r2, #10
 8006944:	4648      	mov	r0, r9
 8006946:	9903      	ldr	r1, [sp, #12]
 8006948:	f000 f966 	bl	8006c18 <__multadd>
 800694c:	9003      	str	r0, [sp, #12]
 800694e:	e7eb      	b.n	8006928 <_dtoa_r+0xb78>
 8006950:	080080c2 	.word	0x080080c2
 8006954:	08008046 	.word	0x08008046

08006958 <_free_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4605      	mov	r5, r0
 800695c:	2900      	cmp	r1, #0
 800695e:	d040      	beq.n	80069e2 <_free_r+0x8a>
 8006960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006964:	1f0c      	subs	r4, r1, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	bfb8      	it	lt
 800696a:	18e4      	addlt	r4, r4, r3
 800696c:	f000 f8e6 	bl	8006b3c <__malloc_lock>
 8006970:	4a1c      	ldr	r2, [pc, #112]	@ (80069e4 <_free_r+0x8c>)
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	b933      	cbnz	r3, 8006984 <_free_r+0x2c>
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	6014      	str	r4, [r2, #0]
 800697a:	4628      	mov	r0, r5
 800697c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006980:	f000 b8e2 	b.w	8006b48 <__malloc_unlock>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d908      	bls.n	800699a <_free_r+0x42>
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	1821      	adds	r1, r4, r0
 800698c:	428b      	cmp	r3, r1
 800698e:	bf01      	itttt	eq
 8006990:	6819      	ldreq	r1, [r3, #0]
 8006992:	685b      	ldreq	r3, [r3, #4]
 8006994:	1809      	addeq	r1, r1, r0
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	e7ed      	b.n	8006976 <_free_r+0x1e>
 800699a:	461a      	mov	r2, r3
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	b10b      	cbz	r3, 80069a4 <_free_r+0x4c>
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d9fa      	bls.n	800699a <_free_r+0x42>
 80069a4:	6811      	ldr	r1, [r2, #0]
 80069a6:	1850      	adds	r0, r2, r1
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d10b      	bne.n	80069c4 <_free_r+0x6c>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	4401      	add	r1, r0
 80069b0:	1850      	adds	r0, r2, r1
 80069b2:	4283      	cmp	r3, r0
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	d1e0      	bne.n	800697a <_free_r+0x22>
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4408      	add	r0, r1
 80069be:	6010      	str	r0, [r2, #0]
 80069c0:	6053      	str	r3, [r2, #4]
 80069c2:	e7da      	b.n	800697a <_free_r+0x22>
 80069c4:	d902      	bls.n	80069cc <_free_r+0x74>
 80069c6:	230c      	movs	r3, #12
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	e7d6      	b.n	800697a <_free_r+0x22>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	1821      	adds	r1, r4, r0
 80069d0:	428b      	cmp	r3, r1
 80069d2:	bf01      	itttt	eq
 80069d4:	6819      	ldreq	r1, [r3, #0]
 80069d6:	685b      	ldreq	r3, [r3, #4]
 80069d8:	1809      	addeq	r1, r1, r0
 80069da:	6021      	streq	r1, [r4, #0]
 80069dc:	6063      	str	r3, [r4, #4]
 80069de:	6054      	str	r4, [r2, #4]
 80069e0:	e7cb      	b.n	800697a <_free_r+0x22>
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	2000149c 	.word	0x2000149c

080069e8 <malloc>:
 80069e8:	4b02      	ldr	r3, [pc, #8]	@ (80069f4 <malloc+0xc>)
 80069ea:	4601      	mov	r1, r0
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	f000 b825 	b.w	8006a3c <_malloc_r>
 80069f2:	bf00      	nop
 80069f4:	2000001c 	.word	0x2000001c

080069f8 <sbrk_aligned>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006a38 <sbrk_aligned+0x40>)
 80069fc:	460c      	mov	r4, r1
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	4605      	mov	r5, r0
 8006a02:	b911      	cbnz	r1, 8006a0a <sbrk_aligned+0x12>
 8006a04:	f000 fe3a 	bl	800767c <_sbrk_r>
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 fe35 	bl	800767c <_sbrk_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d103      	bne.n	8006a1e <sbrk_aligned+0x26>
 8006a16:	f04f 34ff 	mov.w	r4, #4294967295
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	1cc4      	adds	r4, r0, #3
 8006a20:	f024 0403 	bic.w	r4, r4, #3
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d0f8      	beq.n	8006a1a <sbrk_aligned+0x22>
 8006a28:	1a21      	subs	r1, r4, r0
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 fe26 	bl	800767c <_sbrk_r>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d1f2      	bne.n	8006a1a <sbrk_aligned+0x22>
 8006a34:	e7ef      	b.n	8006a16 <sbrk_aligned+0x1e>
 8006a36:	bf00      	nop
 8006a38:	20001498 	.word	0x20001498

08006a3c <_malloc_r>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	1ccd      	adds	r5, r1, #3
 8006a42:	f025 0503 	bic.w	r5, r5, #3
 8006a46:	3508      	adds	r5, #8
 8006a48:	2d0c      	cmp	r5, #12
 8006a4a:	bf38      	it	cc
 8006a4c:	250c      	movcc	r5, #12
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	4606      	mov	r6, r0
 8006a52:	db01      	blt.n	8006a58 <_malloc_r+0x1c>
 8006a54:	42a9      	cmp	r1, r5
 8006a56:	d904      	bls.n	8006a62 <_malloc_r+0x26>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b38 <_malloc_r+0xfc>
 8006a66:	f000 f869 	bl	8006b3c <__malloc_lock>
 8006a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a6e:	461c      	mov	r4, r3
 8006a70:	bb44      	cbnz	r4, 8006ac4 <_malloc_r+0x88>
 8006a72:	4629      	mov	r1, r5
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff ffbf 	bl	80069f8 <sbrk_aligned>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	d158      	bne.n	8006b32 <_malloc_r+0xf6>
 8006a80:	f8d8 4000 	ldr.w	r4, [r8]
 8006a84:	4627      	mov	r7, r4
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	d143      	bne.n	8006b12 <_malloc_r+0xd6>
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d04b      	beq.n	8006b26 <_malloc_r+0xea>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	4639      	mov	r1, r7
 8006a92:	4630      	mov	r0, r6
 8006a94:	eb04 0903 	add.w	r9, r4, r3
 8006a98:	f000 fdf0 	bl	800767c <_sbrk_r>
 8006a9c:	4581      	cmp	r9, r0
 8006a9e:	d142      	bne.n	8006b26 <_malloc_r+0xea>
 8006aa0:	6821      	ldr	r1, [r4, #0]
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	1a6d      	subs	r5, r5, r1
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7ff ffa6 	bl	80069f8 <sbrk_aligned>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d03a      	beq.n	8006b26 <_malloc_r+0xea>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	442b      	add	r3, r5
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	bb62      	cbnz	r2, 8006b18 <_malloc_r+0xdc>
 8006abe:	f8c8 7000 	str.w	r7, [r8]
 8006ac2:	e00f      	b.n	8006ae4 <_malloc_r+0xa8>
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	1b52      	subs	r2, r2, r5
 8006ac8:	d420      	bmi.n	8006b0c <_malloc_r+0xd0>
 8006aca:	2a0b      	cmp	r2, #11
 8006acc:	d917      	bls.n	8006afe <_malloc_r+0xc2>
 8006ace:	1961      	adds	r1, r4, r5
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	6025      	str	r5, [r4, #0]
 8006ad4:	bf18      	it	ne
 8006ad6:	6059      	strne	r1, [r3, #4]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	bf08      	it	eq
 8006adc:	f8c8 1000 	streq.w	r1, [r8]
 8006ae0:	5162      	str	r2, [r4, r5]
 8006ae2:	604b      	str	r3, [r1, #4]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 f82f 	bl	8006b48 <__malloc_unlock>
 8006aea:	f104 000b 	add.w	r0, r4, #11
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	f020 0007 	bic.w	r0, r0, #7
 8006af4:	1ac2      	subs	r2, r0, r3
 8006af6:	bf1c      	itt	ne
 8006af8:	1a1b      	subne	r3, r3, r0
 8006afa:	50a3      	strne	r3, [r4, r2]
 8006afc:	e7af      	b.n	8006a5e <_malloc_r+0x22>
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	bf0c      	ite	eq
 8006b04:	f8c8 2000 	streq.w	r2, [r8]
 8006b08:	605a      	strne	r2, [r3, #4]
 8006b0a:	e7eb      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	6864      	ldr	r4, [r4, #4]
 8006b10:	e7ae      	b.n	8006a70 <_malloc_r+0x34>
 8006b12:	463c      	mov	r4, r7
 8006b14:	687f      	ldr	r7, [r7, #4]
 8006b16:	e7b6      	b.n	8006a86 <_malloc_r+0x4a>
 8006b18:	461a      	mov	r2, r3
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d1fb      	bne.n	8006b18 <_malloc_r+0xdc>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6053      	str	r3, [r2, #4]
 8006b24:	e7de      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b26:	230c      	movs	r3, #12
 8006b28:	4630      	mov	r0, r6
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	f000 f80c 	bl	8006b48 <__malloc_unlock>
 8006b30:	e794      	b.n	8006a5c <_malloc_r+0x20>
 8006b32:	6005      	str	r5, [r0, #0]
 8006b34:	e7d6      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b36:	bf00      	nop
 8006b38:	2000149c 	.word	0x2000149c

08006b3c <__malloc_lock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__malloc_lock+0x8>)
 8006b3e:	f7ff b89c 	b.w	8005c7a <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	20001494 	.word	0x20001494

08006b48 <__malloc_unlock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	@ (8006b50 <__malloc_unlock+0x8>)
 8006b4a:	f7ff b897 	b.w	8005c7c <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	20001494 	.word	0x20001494

08006b54 <_Balloc>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	69c6      	ldr	r6, [r0, #28]
 8006b58:	4604      	mov	r4, r0
 8006b5a:	460d      	mov	r5, r1
 8006b5c:	b976      	cbnz	r6, 8006b7c <_Balloc+0x28>
 8006b5e:	2010      	movs	r0, #16
 8006b60:	f7ff ff42 	bl	80069e8 <malloc>
 8006b64:	4602      	mov	r2, r0
 8006b66:	61e0      	str	r0, [r4, #28]
 8006b68:	b920      	cbnz	r0, 8006b74 <_Balloc+0x20>
 8006b6a:	216b      	movs	r1, #107	@ 0x6b
 8006b6c:	4b17      	ldr	r3, [pc, #92]	@ (8006bcc <_Balloc+0x78>)
 8006b6e:	4818      	ldr	r0, [pc, #96]	@ (8006bd0 <_Balloc+0x7c>)
 8006b70:	f000 fda2 	bl	80076b8 <__assert_func>
 8006b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b78:	6006      	str	r6, [r0, #0]
 8006b7a:	60c6      	str	r6, [r0, #12]
 8006b7c:	69e6      	ldr	r6, [r4, #28]
 8006b7e:	68f3      	ldr	r3, [r6, #12]
 8006b80:	b183      	cbz	r3, 8006ba4 <_Balloc+0x50>
 8006b82:	69e3      	ldr	r3, [r4, #28]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b8a:	b9b8      	cbnz	r0, 8006bbc <_Balloc+0x68>
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b92:	1d72      	adds	r2, r6, #5
 8006b94:	4620      	mov	r0, r4
 8006b96:	0092      	lsls	r2, r2, #2
 8006b98:	f000 fdac 	bl	80076f4 <_calloc_r>
 8006b9c:	b160      	cbz	r0, 8006bb8 <_Balloc+0x64>
 8006b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ba2:	e00e      	b.n	8006bc2 <_Balloc+0x6e>
 8006ba4:	2221      	movs	r2, #33	@ 0x21
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fda3 	bl	80076f4 <_calloc_r>
 8006bae:	69e3      	ldr	r3, [r4, #28]
 8006bb0:	60f0      	str	r0, [r6, #12]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e4      	bne.n	8006b82 <_Balloc+0x2e>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	6802      	ldr	r2, [r0, #0]
 8006bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bc8:	e7f7      	b.n	8006bba <_Balloc+0x66>
 8006bca:	bf00      	nop
 8006bcc:	08008053 	.word	0x08008053
 8006bd0:	080080d3 	.word	0x080080d3

08006bd4 <_Bfree>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	69c6      	ldr	r6, [r0, #28]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b976      	cbnz	r6, 8006bfc <_Bfree+0x28>
 8006bde:	2010      	movs	r0, #16
 8006be0:	f7ff ff02 	bl	80069e8 <malloc>
 8006be4:	4602      	mov	r2, r0
 8006be6:	61e8      	str	r0, [r5, #28]
 8006be8:	b920      	cbnz	r0, 8006bf4 <_Bfree+0x20>
 8006bea:	218f      	movs	r1, #143	@ 0x8f
 8006bec:	4b08      	ldr	r3, [pc, #32]	@ (8006c10 <_Bfree+0x3c>)
 8006bee:	4809      	ldr	r0, [pc, #36]	@ (8006c14 <_Bfree+0x40>)
 8006bf0:	f000 fd62 	bl	80076b8 <__assert_func>
 8006bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bf8:	6006      	str	r6, [r0, #0]
 8006bfa:	60c6      	str	r6, [r0, #12]
 8006bfc:	b13c      	cbz	r4, 8006c0e <_Bfree+0x3a>
 8006bfe:	69eb      	ldr	r3, [r5, #28]
 8006c00:	6862      	ldr	r2, [r4, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c08:	6021      	str	r1, [r4, #0]
 8006c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	08008053 	.word	0x08008053
 8006c14:	080080d3 	.word	0x080080d3

08006c18 <__multadd>:
 8006c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	461e      	mov	r6, r3
 8006c22:	2000      	movs	r0, #0
 8006c24:	690d      	ldr	r5, [r1, #16]
 8006c26:	f101 0c14 	add.w	ip, r1, #20
 8006c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c2e:	3001      	adds	r0, #1
 8006c30:	b299      	uxth	r1, r3
 8006c32:	fb02 6101 	mla	r1, r2, r1, r6
 8006c36:	0c1e      	lsrs	r6, r3, #16
 8006c38:	0c0b      	lsrs	r3, r1, #16
 8006c3a:	fb02 3306 	mla	r3, r2, r6, r3
 8006c3e:	b289      	uxth	r1, r1
 8006c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c44:	4285      	cmp	r5, r0
 8006c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c4e:	dcec      	bgt.n	8006c2a <__multadd+0x12>
 8006c50:	b30e      	cbz	r6, 8006c96 <__multadd+0x7e>
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc19      	bgt.n	8006c8c <__multadd+0x74>
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	f7ff ff79 	bl	8006b54 <_Balloc>
 8006c62:	4680      	mov	r8, r0
 8006c64:	b928      	cbnz	r0, 8006c72 <__multadd+0x5a>
 8006c66:	4602      	mov	r2, r0
 8006c68:	21ba      	movs	r1, #186	@ 0xba
 8006c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c9c <__multadd+0x84>)
 8006c6c:	480c      	ldr	r0, [pc, #48]	@ (8006ca0 <__multadd+0x88>)
 8006c6e:	f000 fd23 	bl	80076b8 <__assert_func>
 8006c72:	6922      	ldr	r2, [r4, #16]
 8006c74:	f104 010c 	add.w	r1, r4, #12
 8006c78:	3202      	adds	r2, #2
 8006c7a:	0092      	lsls	r2, r2, #2
 8006c7c:	300c      	adds	r0, #12
 8006c7e:	f000 fd0d 	bl	800769c <memcpy>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff ffa5 	bl	8006bd4 <_Bfree>
 8006c8a:	4644      	mov	r4, r8
 8006c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c90:	3501      	adds	r5, #1
 8006c92:	615e      	str	r6, [r3, #20]
 8006c94:	6125      	str	r5, [r4, #16]
 8006c96:	4620      	mov	r0, r4
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	080080c2 	.word	0x080080c2
 8006ca0:	080080d3 	.word	0x080080d3

08006ca4 <__hi0bits>:
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006caa:	bf3a      	itte	cc
 8006cac:	0403      	lslcc	r3, r0, #16
 8006cae:	2010      	movcc	r0, #16
 8006cb0:	2000      	movcs	r0, #0
 8006cb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cb6:	bf3c      	itt	cc
 8006cb8:	021b      	lslcc	r3, r3, #8
 8006cba:	3008      	addcc	r0, #8
 8006cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc0:	bf3c      	itt	cc
 8006cc2:	011b      	lslcc	r3, r3, #4
 8006cc4:	3004      	addcc	r0, #4
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cca:	bf3c      	itt	cc
 8006ccc:	009b      	lslcc	r3, r3, #2
 8006cce:	3002      	addcc	r0, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	db05      	blt.n	8006ce0 <__hi0bits+0x3c>
 8006cd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cd8:	f100 0001 	add.w	r0, r0, #1
 8006cdc:	bf08      	it	eq
 8006cde:	2020      	moveq	r0, #32
 8006ce0:	4770      	bx	lr

08006ce2 <__lo0bits>:
 8006ce2:	6803      	ldr	r3, [r0, #0]
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	f013 0007 	ands.w	r0, r3, #7
 8006cea:	d00b      	beq.n	8006d04 <__lo0bits+0x22>
 8006cec:	07d9      	lsls	r1, r3, #31
 8006cee:	d421      	bmi.n	8006d34 <__lo0bits+0x52>
 8006cf0:	0798      	lsls	r0, r3, #30
 8006cf2:	bf49      	itett	mi
 8006cf4:	085b      	lsrmi	r3, r3, #1
 8006cf6:	089b      	lsrpl	r3, r3, #2
 8006cf8:	2001      	movmi	r0, #1
 8006cfa:	6013      	strmi	r3, [r2, #0]
 8006cfc:	bf5c      	itt	pl
 8006cfe:	2002      	movpl	r0, #2
 8006d00:	6013      	strpl	r3, [r2, #0]
 8006d02:	4770      	bx	lr
 8006d04:	b299      	uxth	r1, r3
 8006d06:	b909      	cbnz	r1, 8006d0c <__lo0bits+0x2a>
 8006d08:	2010      	movs	r0, #16
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	b2d9      	uxtb	r1, r3
 8006d0e:	b909      	cbnz	r1, 8006d14 <__lo0bits+0x32>
 8006d10:	3008      	adds	r0, #8
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	0719      	lsls	r1, r3, #28
 8006d16:	bf04      	itt	eq
 8006d18:	091b      	lsreq	r3, r3, #4
 8006d1a:	3004      	addeq	r0, #4
 8006d1c:	0799      	lsls	r1, r3, #30
 8006d1e:	bf04      	itt	eq
 8006d20:	089b      	lsreq	r3, r3, #2
 8006d22:	3002      	addeq	r0, #2
 8006d24:	07d9      	lsls	r1, r3, #31
 8006d26:	d403      	bmi.n	8006d30 <__lo0bits+0x4e>
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	f100 0001 	add.w	r0, r0, #1
 8006d2e:	d003      	beq.n	8006d38 <__lo0bits+0x56>
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	4770      	bx	lr
 8006d34:	2000      	movs	r0, #0
 8006d36:	4770      	bx	lr
 8006d38:	2020      	movs	r0, #32
 8006d3a:	4770      	bx	lr

08006d3c <__i2b>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	460c      	mov	r4, r1
 8006d40:	2101      	movs	r1, #1
 8006d42:	f7ff ff07 	bl	8006b54 <_Balloc>
 8006d46:	4602      	mov	r2, r0
 8006d48:	b928      	cbnz	r0, 8006d56 <__i2b+0x1a>
 8006d4a:	f240 1145 	movw	r1, #325	@ 0x145
 8006d4e:	4b04      	ldr	r3, [pc, #16]	@ (8006d60 <__i2b+0x24>)
 8006d50:	4804      	ldr	r0, [pc, #16]	@ (8006d64 <__i2b+0x28>)
 8006d52:	f000 fcb1 	bl	80076b8 <__assert_func>
 8006d56:	2301      	movs	r3, #1
 8006d58:	6144      	str	r4, [r0, #20]
 8006d5a:	6103      	str	r3, [r0, #16]
 8006d5c:	bd10      	pop	{r4, pc}
 8006d5e:	bf00      	nop
 8006d60:	080080c2 	.word	0x080080c2
 8006d64:	080080d3 	.word	0x080080d3

08006d68 <__multiply>:
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	4617      	mov	r7, r2
 8006d6e:	690a      	ldr	r2, [r1, #16]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	4689      	mov	r9, r1
 8006d74:	429a      	cmp	r2, r3
 8006d76:	bfa2      	ittt	ge
 8006d78:	463b      	movge	r3, r7
 8006d7a:	460f      	movge	r7, r1
 8006d7c:	4699      	movge	r9, r3
 8006d7e:	693d      	ldr	r5, [r7, #16]
 8006d80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	eb05 060a 	add.w	r6, r5, sl
 8006d8c:	42b3      	cmp	r3, r6
 8006d8e:	b085      	sub	sp, #20
 8006d90:	bfb8      	it	lt
 8006d92:	3101      	addlt	r1, #1
 8006d94:	f7ff fede 	bl	8006b54 <_Balloc>
 8006d98:	b930      	cbnz	r0, 8006da8 <__multiply+0x40>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006da0:	4b40      	ldr	r3, [pc, #256]	@ (8006ea4 <__multiply+0x13c>)
 8006da2:	4841      	ldr	r0, [pc, #260]	@ (8006ea8 <__multiply+0x140>)
 8006da4:	f000 fc88 	bl	80076b8 <__assert_func>
 8006da8:	f100 0414 	add.w	r4, r0, #20
 8006dac:	4623      	mov	r3, r4
 8006dae:	2200      	movs	r2, #0
 8006db0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006db4:	4573      	cmp	r3, lr
 8006db6:	d320      	bcc.n	8006dfa <__multiply+0x92>
 8006db8:	f107 0814 	add.w	r8, r7, #20
 8006dbc:	f109 0114 	add.w	r1, r9, #20
 8006dc0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006dc4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006dc8:	9302      	str	r3, [sp, #8]
 8006dca:	1beb      	subs	r3, r5, r7
 8006dcc:	3b15      	subs	r3, #21
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	3715      	adds	r7, #21
 8006dd6:	42bd      	cmp	r5, r7
 8006dd8:	bf38      	it	cc
 8006dda:	2304      	movcc	r3, #4
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	9103      	str	r1, [sp, #12]
 8006de2:	428b      	cmp	r3, r1
 8006de4:	d80c      	bhi.n	8006e00 <__multiply+0x98>
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	dd03      	ble.n	8006df2 <__multiply+0x8a>
 8006dea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d055      	beq.n	8006e9e <__multiply+0x136>
 8006df2:	6106      	str	r6, [r0, #16]
 8006df4:	b005      	add	sp, #20
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	f843 2b04 	str.w	r2, [r3], #4
 8006dfe:	e7d9      	b.n	8006db4 <__multiply+0x4c>
 8006e00:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e04:	f1ba 0f00 	cmp.w	sl, #0
 8006e08:	d01f      	beq.n	8006e4a <__multiply+0xe2>
 8006e0a:	46c4      	mov	ip, r8
 8006e0c:	46a1      	mov	r9, r4
 8006e0e:	2700      	movs	r7, #0
 8006e10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e14:	f8d9 3000 	ldr.w	r3, [r9]
 8006e18:	fa1f fb82 	uxth.w	fp, r2
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e22:	443b      	add	r3, r7
 8006e24:	f8d9 7000 	ldr.w	r7, [r9]
 8006e28:	0c12      	lsrs	r2, r2, #16
 8006e2a:	0c3f      	lsrs	r7, r7, #16
 8006e2c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006e30:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3a:	4565      	cmp	r5, ip
 8006e3c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006e40:	f849 3b04 	str.w	r3, [r9], #4
 8006e44:	d8e4      	bhi.n	8006e10 <__multiply+0xa8>
 8006e46:	9b01      	ldr	r3, [sp, #4]
 8006e48:	50e7      	str	r7, [r4, r3]
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	3104      	adds	r1, #4
 8006e4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e52:	f1b9 0f00 	cmp.w	r9, #0
 8006e56:	d020      	beq.n	8006e9a <__multiply+0x132>
 8006e58:	4647      	mov	r7, r8
 8006e5a:	46a4      	mov	ip, r4
 8006e5c:	f04f 0a00 	mov.w	sl, #0
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	f8b7 b000 	ldrh.w	fp, [r7]
 8006e66:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	fb09 220b 	mla	r2, r9, fp, r2
 8006e70:	4452      	add	r2, sl
 8006e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e76:	f84c 3b04 	str.w	r3, [ip], #4
 8006e7a:	f857 3b04 	ldr.w	r3, [r7], #4
 8006e7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e82:	f8bc 3000 	ldrh.w	r3, [ip]
 8006e86:	42bd      	cmp	r5, r7
 8006e88:	fb09 330a 	mla	r3, r9, sl, r3
 8006e8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006e90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e94:	d8e5      	bhi.n	8006e62 <__multiply+0xfa>
 8006e96:	9a01      	ldr	r2, [sp, #4]
 8006e98:	50a3      	str	r3, [r4, r2]
 8006e9a:	3404      	adds	r4, #4
 8006e9c:	e79f      	b.n	8006dde <__multiply+0x76>
 8006e9e:	3e01      	subs	r6, #1
 8006ea0:	e7a1      	b.n	8006de6 <__multiply+0x7e>
 8006ea2:	bf00      	nop
 8006ea4:	080080c2 	.word	0x080080c2
 8006ea8:	080080d3 	.word	0x080080d3

08006eac <__pow5mult>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	f012 0203 	ands.w	r2, r2, #3
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	460e      	mov	r6, r1
 8006eba:	d007      	beq.n	8006ecc <__pow5mult+0x20>
 8006ebc:	4c25      	ldr	r4, [pc, #148]	@ (8006f54 <__pow5mult+0xa8>)
 8006ebe:	3a01      	subs	r2, #1
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ec6:	f7ff fea7 	bl	8006c18 <__multadd>
 8006eca:	4606      	mov	r6, r0
 8006ecc:	10ad      	asrs	r5, r5, #2
 8006ece:	d03d      	beq.n	8006f4c <__pow5mult+0xa0>
 8006ed0:	69fc      	ldr	r4, [r7, #28]
 8006ed2:	b97c      	cbnz	r4, 8006ef4 <__pow5mult+0x48>
 8006ed4:	2010      	movs	r0, #16
 8006ed6:	f7ff fd87 	bl	80069e8 <malloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	61f8      	str	r0, [r7, #28]
 8006ede:	b928      	cbnz	r0, 8006eec <__pow5mult+0x40>
 8006ee0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f58 <__pow5mult+0xac>)
 8006ee6:	481d      	ldr	r0, [pc, #116]	@ (8006f5c <__pow5mult+0xb0>)
 8006ee8:	f000 fbe6 	bl	80076b8 <__assert_func>
 8006eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef0:	6004      	str	r4, [r0, #0]
 8006ef2:	60c4      	str	r4, [r0, #12]
 8006ef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006efc:	b94c      	cbnz	r4, 8006f12 <__pow5mult+0x66>
 8006efe:	f240 2171 	movw	r1, #625	@ 0x271
 8006f02:	4638      	mov	r0, r7
 8006f04:	f7ff ff1a 	bl	8006d3c <__i2b>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	f04f 0900 	mov.w	r9, #0
 8006f16:	07eb      	lsls	r3, r5, #31
 8006f18:	d50a      	bpl.n	8006f30 <__pow5mult+0x84>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7ff ff22 	bl	8006d68 <__multiply>
 8006f24:	4680      	mov	r8, r0
 8006f26:	4631      	mov	r1, r6
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7ff fe53 	bl	8006bd4 <_Bfree>
 8006f2e:	4646      	mov	r6, r8
 8006f30:	106d      	asrs	r5, r5, #1
 8006f32:	d00b      	beq.n	8006f4c <__pow5mult+0xa0>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	b938      	cbnz	r0, 8006f48 <__pow5mult+0x9c>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7ff ff13 	bl	8006d68 <__multiply>
 8006f42:	6020      	str	r0, [r4, #0]
 8006f44:	f8c0 9000 	str.w	r9, [r0]
 8006f48:	4604      	mov	r4, r0
 8006f4a:	e7e4      	b.n	8006f16 <__pow5mult+0x6a>
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f52:	bf00      	nop
 8006f54:	08008184 	.word	0x08008184
 8006f58:	08008053 	.word	0x08008053
 8006f5c:	080080d3 	.word	0x080080d3

08006f60 <__lshift>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	460c      	mov	r4, r1
 8006f66:	4607      	mov	r7, r0
 8006f68:	4691      	mov	r9, r2
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	6849      	ldr	r1, [r1, #4]
 8006f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f78:	f108 0601 	add.w	r6, r8, #1
 8006f7c:	42b3      	cmp	r3, r6
 8006f7e:	db0b      	blt.n	8006f98 <__lshift+0x38>
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff fde7 	bl	8006b54 <_Balloc>
 8006f86:	4605      	mov	r5, r0
 8006f88:	b948      	cbnz	r0, 8006f9e <__lshift+0x3e>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f90:	4b27      	ldr	r3, [pc, #156]	@ (8007030 <__lshift+0xd0>)
 8006f92:	4828      	ldr	r0, [pc, #160]	@ (8007034 <__lshift+0xd4>)
 8006f94:	f000 fb90 	bl	80076b8 <__assert_func>
 8006f98:	3101      	adds	r1, #1
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	e7ee      	b.n	8006f7c <__lshift+0x1c>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f100 0114 	add.w	r1, r0, #20
 8006fa4:	f100 0210 	add.w	r2, r0, #16
 8006fa8:	4618      	mov	r0, r3
 8006faa:	4553      	cmp	r3, sl
 8006fac:	db33      	blt.n	8007016 <__lshift+0xb6>
 8006fae:	6920      	ldr	r0, [r4, #16]
 8006fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb4:	f104 0314 	add.w	r3, r4, #20
 8006fb8:	f019 091f 	ands.w	r9, r9, #31
 8006fbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fc4:	d02b      	beq.n	800701e <__lshift+0xbe>
 8006fc6:	468a      	mov	sl, r1
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f1c9 0e20 	rsb	lr, r9, #32
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	fa00 f009 	lsl.w	r0, r0, r9
 8006fd4:	4310      	orrs	r0, r2
 8006fd6:	f84a 0b04 	str.w	r0, [sl], #4
 8006fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fde:	459c      	cmp	ip, r3
 8006fe0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fe4:	d8f3      	bhi.n	8006fce <__lshift+0x6e>
 8006fe6:	ebac 0304 	sub.w	r3, ip, r4
 8006fea:	3b15      	subs	r3, #21
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	f104 0015 	add.w	r0, r4, #21
 8006ff6:	4560      	cmp	r0, ip
 8006ff8:	bf88      	it	hi
 8006ffa:	2304      	movhi	r3, #4
 8006ffc:	50ca      	str	r2, [r1, r3]
 8006ffe:	b10a      	cbz	r2, 8007004 <__lshift+0xa4>
 8007000:	f108 0602 	add.w	r6, r8, #2
 8007004:	3e01      	subs	r6, #1
 8007006:	4638      	mov	r0, r7
 8007008:	4621      	mov	r1, r4
 800700a:	612e      	str	r6, [r5, #16]
 800700c:	f7ff fde2 	bl	8006bd4 <_Bfree>
 8007010:	4628      	mov	r0, r5
 8007012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007016:	f842 0f04 	str.w	r0, [r2, #4]!
 800701a:	3301      	adds	r3, #1
 800701c:	e7c5      	b.n	8006faa <__lshift+0x4a>
 800701e:	3904      	subs	r1, #4
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	459c      	cmp	ip, r3
 8007026:	f841 2f04 	str.w	r2, [r1, #4]!
 800702a:	d8f9      	bhi.n	8007020 <__lshift+0xc0>
 800702c:	e7ea      	b.n	8007004 <__lshift+0xa4>
 800702e:	bf00      	nop
 8007030:	080080c2 	.word	0x080080c2
 8007034:	080080d3 	.word	0x080080d3

08007038 <__mcmp>:
 8007038:	4603      	mov	r3, r0
 800703a:	690a      	ldr	r2, [r1, #16]
 800703c:	6900      	ldr	r0, [r0, #16]
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	1a80      	subs	r0, r0, r2
 8007042:	d10e      	bne.n	8007062 <__mcmp+0x2a>
 8007044:	3314      	adds	r3, #20
 8007046:	3114      	adds	r1, #20
 8007048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800704c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007058:	4295      	cmp	r5, r2
 800705a:	d003      	beq.n	8007064 <__mcmp+0x2c>
 800705c:	d205      	bcs.n	800706a <__mcmp+0x32>
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	bd30      	pop	{r4, r5, pc}
 8007064:	42a3      	cmp	r3, r4
 8007066:	d3f3      	bcc.n	8007050 <__mcmp+0x18>
 8007068:	e7fb      	b.n	8007062 <__mcmp+0x2a>
 800706a:	2001      	movs	r0, #1
 800706c:	e7f9      	b.n	8007062 <__mcmp+0x2a>
	...

08007070 <__mdiff>:
 8007070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	4689      	mov	r9, r1
 8007076:	4606      	mov	r6, r0
 8007078:	4611      	mov	r1, r2
 800707a:	4648      	mov	r0, r9
 800707c:	4614      	mov	r4, r2
 800707e:	f7ff ffdb 	bl	8007038 <__mcmp>
 8007082:	1e05      	subs	r5, r0, #0
 8007084:	d112      	bne.n	80070ac <__mdiff+0x3c>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff fd63 	bl	8006b54 <_Balloc>
 800708e:	4602      	mov	r2, r0
 8007090:	b928      	cbnz	r0, 800709e <__mdiff+0x2e>
 8007092:	f240 2137 	movw	r1, #567	@ 0x237
 8007096:	4b3e      	ldr	r3, [pc, #248]	@ (8007190 <__mdiff+0x120>)
 8007098:	483e      	ldr	r0, [pc, #248]	@ (8007194 <__mdiff+0x124>)
 800709a:	f000 fb0d 	bl	80076b8 <__assert_func>
 800709e:	2301      	movs	r3, #1
 80070a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070a4:	4610      	mov	r0, r2
 80070a6:	b003      	add	sp, #12
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	bfbc      	itt	lt
 80070ae:	464b      	movlt	r3, r9
 80070b0:	46a1      	movlt	r9, r4
 80070b2:	4630      	mov	r0, r6
 80070b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070b8:	bfba      	itte	lt
 80070ba:	461c      	movlt	r4, r3
 80070bc:	2501      	movlt	r5, #1
 80070be:	2500      	movge	r5, #0
 80070c0:	f7ff fd48 	bl	8006b54 <_Balloc>
 80070c4:	4602      	mov	r2, r0
 80070c6:	b918      	cbnz	r0, 80070d0 <__mdiff+0x60>
 80070c8:	f240 2145 	movw	r1, #581	@ 0x245
 80070cc:	4b30      	ldr	r3, [pc, #192]	@ (8007190 <__mdiff+0x120>)
 80070ce:	e7e3      	b.n	8007098 <__mdiff+0x28>
 80070d0:	f100 0b14 	add.w	fp, r0, #20
 80070d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070d8:	f109 0310 	add.w	r3, r9, #16
 80070dc:	60c5      	str	r5, [r0, #12]
 80070de:	f04f 0c00 	mov.w	ip, #0
 80070e2:	f109 0514 	add.w	r5, r9, #20
 80070e6:	46d9      	mov	r9, fp
 80070e8:	6926      	ldr	r6, [r4, #16]
 80070ea:	f104 0e14 	add.w	lr, r4, #20
 80070ee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070f2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80070fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007102:	b281      	uxth	r1, r0
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	fa1f f38a 	uxth.w	r3, sl
 800710a:	1a5b      	subs	r3, r3, r1
 800710c:	0c00      	lsrs	r0, r0, #16
 800710e:	4463      	add	r3, ip
 8007110:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007114:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007118:	b29b      	uxth	r3, r3
 800711a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800711e:	4576      	cmp	r6, lr
 8007120:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007124:	f849 3b04 	str.w	r3, [r9], #4
 8007128:	d8e6      	bhi.n	80070f8 <__mdiff+0x88>
 800712a:	1b33      	subs	r3, r6, r4
 800712c:	3b15      	subs	r3, #21
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	3415      	adds	r4, #21
 8007134:	3304      	adds	r3, #4
 8007136:	42a6      	cmp	r6, r4
 8007138:	bf38      	it	cc
 800713a:	2304      	movcc	r3, #4
 800713c:	441d      	add	r5, r3
 800713e:	445b      	add	r3, fp
 8007140:	461e      	mov	r6, r3
 8007142:	462c      	mov	r4, r5
 8007144:	4544      	cmp	r4, r8
 8007146:	d30e      	bcc.n	8007166 <__mdiff+0xf6>
 8007148:	f108 0103 	add.w	r1, r8, #3
 800714c:	1b49      	subs	r1, r1, r5
 800714e:	f021 0103 	bic.w	r1, r1, #3
 8007152:	3d03      	subs	r5, #3
 8007154:	45a8      	cmp	r8, r5
 8007156:	bf38      	it	cc
 8007158:	2100      	movcc	r1, #0
 800715a:	440b      	add	r3, r1
 800715c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007160:	b199      	cbz	r1, 800718a <__mdiff+0x11a>
 8007162:	6117      	str	r7, [r2, #16]
 8007164:	e79e      	b.n	80070a4 <__mdiff+0x34>
 8007166:	46e6      	mov	lr, ip
 8007168:	f854 1b04 	ldr.w	r1, [r4], #4
 800716c:	fa1f fc81 	uxth.w	ip, r1
 8007170:	44f4      	add	ip, lr
 8007172:	0c08      	lsrs	r0, r1, #16
 8007174:	4471      	add	r1, lr
 8007176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800717a:	b289      	uxth	r1, r1
 800717c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007180:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007184:	f846 1b04 	str.w	r1, [r6], #4
 8007188:	e7dc      	b.n	8007144 <__mdiff+0xd4>
 800718a:	3f01      	subs	r7, #1
 800718c:	e7e6      	b.n	800715c <__mdiff+0xec>
 800718e:	bf00      	nop
 8007190:	080080c2 	.word	0x080080c2
 8007194:	080080d3 	.word	0x080080d3

08007198 <__d2b>:
 8007198:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800719c:	2101      	movs	r1, #1
 800719e:	4690      	mov	r8, r2
 80071a0:	4699      	mov	r9, r3
 80071a2:	9e08      	ldr	r6, [sp, #32]
 80071a4:	f7ff fcd6 	bl	8006b54 <_Balloc>
 80071a8:	4604      	mov	r4, r0
 80071aa:	b930      	cbnz	r0, 80071ba <__d2b+0x22>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80071b2:	4b23      	ldr	r3, [pc, #140]	@ (8007240 <__d2b+0xa8>)
 80071b4:	4823      	ldr	r0, [pc, #140]	@ (8007244 <__d2b+0xac>)
 80071b6:	f000 fa7f 	bl	80076b8 <__assert_func>
 80071ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071c2:	b10d      	cbz	r5, 80071c8 <__d2b+0x30>
 80071c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	f1b8 0300 	subs.w	r3, r8, #0
 80071ce:	d024      	beq.n	800721a <__d2b+0x82>
 80071d0:	4668      	mov	r0, sp
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	f7ff fd85 	bl	8006ce2 <__lo0bits>
 80071d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071dc:	b1d8      	cbz	r0, 8007216 <__d2b+0x7e>
 80071de:	f1c0 0320 	rsb	r3, r0, #32
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	430b      	orrs	r3, r1
 80071e8:	40c2      	lsrs	r2, r0
 80071ea:	6163      	str	r3, [r4, #20]
 80071ec:	9201      	str	r2, [sp, #4]
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bf0c      	ite	eq
 80071f4:	2201      	moveq	r2, #1
 80071f6:	2202      	movne	r2, #2
 80071f8:	61a3      	str	r3, [r4, #24]
 80071fa:	6122      	str	r2, [r4, #16]
 80071fc:	b1ad      	cbz	r5, 800722a <__d2b+0x92>
 80071fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007202:	4405      	add	r5, r0
 8007204:	6035      	str	r5, [r6, #0]
 8007206:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800720a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720c:	6018      	str	r0, [r3, #0]
 800720e:	4620      	mov	r0, r4
 8007210:	b002      	add	sp, #8
 8007212:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007216:	6161      	str	r1, [r4, #20]
 8007218:	e7e9      	b.n	80071ee <__d2b+0x56>
 800721a:	a801      	add	r0, sp, #4
 800721c:	f7ff fd61 	bl	8006ce2 <__lo0bits>
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	6163      	str	r3, [r4, #20]
 8007226:	3020      	adds	r0, #32
 8007228:	e7e7      	b.n	80071fa <__d2b+0x62>
 800722a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800722e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007232:	6030      	str	r0, [r6, #0]
 8007234:	6918      	ldr	r0, [r3, #16]
 8007236:	f7ff fd35 	bl	8006ca4 <__hi0bits>
 800723a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800723e:	e7e4      	b.n	800720a <__d2b+0x72>
 8007240:	080080c2 	.word	0x080080c2
 8007244:	080080d3 	.word	0x080080d3

08007248 <__ssputs_r>:
 8007248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800724c:	461f      	mov	r7, r3
 800724e:	688e      	ldr	r6, [r1, #8]
 8007250:	4682      	mov	sl, r0
 8007252:	42be      	cmp	r6, r7
 8007254:	460c      	mov	r4, r1
 8007256:	4690      	mov	r8, r2
 8007258:	680b      	ldr	r3, [r1, #0]
 800725a:	d82d      	bhi.n	80072b8 <__ssputs_r+0x70>
 800725c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007260:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007264:	d026      	beq.n	80072b4 <__ssputs_r+0x6c>
 8007266:	6965      	ldr	r5, [r4, #20]
 8007268:	6909      	ldr	r1, [r1, #16]
 800726a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800726e:	eba3 0901 	sub.w	r9, r3, r1
 8007272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007276:	1c7b      	adds	r3, r7, #1
 8007278:	444b      	add	r3, r9
 800727a:	106d      	asrs	r5, r5, #1
 800727c:	429d      	cmp	r5, r3
 800727e:	bf38      	it	cc
 8007280:	461d      	movcc	r5, r3
 8007282:	0553      	lsls	r3, r2, #21
 8007284:	d527      	bpl.n	80072d6 <__ssputs_r+0x8e>
 8007286:	4629      	mov	r1, r5
 8007288:	f7ff fbd8 	bl	8006a3c <_malloc_r>
 800728c:	4606      	mov	r6, r0
 800728e:	b360      	cbz	r0, 80072ea <__ssputs_r+0xa2>
 8007290:	464a      	mov	r2, r9
 8007292:	6921      	ldr	r1, [r4, #16]
 8007294:	f000 fa02 	bl	800769c <memcpy>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800729e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	6126      	str	r6, [r4, #16]
 80072a6:	444e      	add	r6, r9
 80072a8:	6026      	str	r6, [r4, #0]
 80072aa:	463e      	mov	r6, r7
 80072ac:	6165      	str	r5, [r4, #20]
 80072ae:	eba5 0509 	sub.w	r5, r5, r9
 80072b2:	60a5      	str	r5, [r4, #8]
 80072b4:	42be      	cmp	r6, r7
 80072b6:	d900      	bls.n	80072ba <__ssputs_r+0x72>
 80072b8:	463e      	mov	r6, r7
 80072ba:	4632      	mov	r2, r6
 80072bc:	4641      	mov	r1, r8
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	f000 f9c2 	bl	8007648 <memmove>
 80072c4:	2000      	movs	r0, #0
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	1b9b      	subs	r3, r3, r6
 80072ca:	60a3      	str	r3, [r4, #8]
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	4433      	add	r3, r6
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d6:	462a      	mov	r2, r5
 80072d8:	f000 fa32 	bl	8007740 <_realloc_r>
 80072dc:	4606      	mov	r6, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	d1e0      	bne.n	80072a4 <__ssputs_r+0x5c>
 80072e2:	4650      	mov	r0, sl
 80072e4:	6921      	ldr	r1, [r4, #16]
 80072e6:	f7ff fb37 	bl	8006958 <_free_r>
 80072ea:	230c      	movs	r3, #12
 80072ec:	f8ca 3000 	str.w	r3, [sl]
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	f04f 30ff 	mov.w	r0, #4294967295
 80072f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	e7e9      	b.n	80072d2 <__ssputs_r+0x8a>
	...

08007300 <_svfiprintf_r>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	4698      	mov	r8, r3
 8007306:	898b      	ldrh	r3, [r1, #12]
 8007308:	4607      	mov	r7, r0
 800730a:	061b      	lsls	r3, r3, #24
 800730c:	460d      	mov	r5, r1
 800730e:	4614      	mov	r4, r2
 8007310:	b09d      	sub	sp, #116	@ 0x74
 8007312:	d510      	bpl.n	8007336 <_svfiprintf_r+0x36>
 8007314:	690b      	ldr	r3, [r1, #16]
 8007316:	b973      	cbnz	r3, 8007336 <_svfiprintf_r+0x36>
 8007318:	2140      	movs	r1, #64	@ 0x40
 800731a:	f7ff fb8f 	bl	8006a3c <_malloc_r>
 800731e:	6028      	str	r0, [r5, #0]
 8007320:	6128      	str	r0, [r5, #16]
 8007322:	b930      	cbnz	r0, 8007332 <_svfiprintf_r+0x32>
 8007324:	230c      	movs	r3, #12
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	b01d      	add	sp, #116	@ 0x74
 800732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007332:	2340      	movs	r3, #64	@ 0x40
 8007334:	616b      	str	r3, [r5, #20]
 8007336:	2300      	movs	r3, #0
 8007338:	9309      	str	r3, [sp, #36]	@ 0x24
 800733a:	2320      	movs	r3, #32
 800733c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007340:	2330      	movs	r3, #48	@ 0x30
 8007342:	f04f 0901 	mov.w	r9, #1
 8007346:	f8cd 800c 	str.w	r8, [sp, #12]
 800734a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80074e4 <_svfiprintf_r+0x1e4>
 800734e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007352:	4623      	mov	r3, r4
 8007354:	469a      	mov	sl, r3
 8007356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735a:	b10a      	cbz	r2, 8007360 <_svfiprintf_r+0x60>
 800735c:	2a25      	cmp	r2, #37	@ 0x25
 800735e:	d1f9      	bne.n	8007354 <_svfiprintf_r+0x54>
 8007360:	ebba 0b04 	subs.w	fp, sl, r4
 8007364:	d00b      	beq.n	800737e <_svfiprintf_r+0x7e>
 8007366:	465b      	mov	r3, fp
 8007368:	4622      	mov	r2, r4
 800736a:	4629      	mov	r1, r5
 800736c:	4638      	mov	r0, r7
 800736e:	f7ff ff6b 	bl	8007248 <__ssputs_r>
 8007372:	3001      	adds	r0, #1
 8007374:	f000 80a7 	beq.w	80074c6 <_svfiprintf_r+0x1c6>
 8007378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800737a:	445a      	add	r2, fp
 800737c:	9209      	str	r2, [sp, #36]	@ 0x24
 800737e:	f89a 3000 	ldrb.w	r3, [sl]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 809f 	beq.w	80074c6 <_svfiprintf_r+0x1c6>
 8007388:	2300      	movs	r3, #0
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007392:	f10a 0a01 	add.w	sl, sl, #1
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	9307      	str	r3, [sp, #28]
 800739a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800739e:	931a      	str	r3, [sp, #104]	@ 0x68
 80073a0:	4654      	mov	r4, sl
 80073a2:	2205      	movs	r2, #5
 80073a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a8:	484e      	ldr	r0, [pc, #312]	@ (80074e4 <_svfiprintf_r+0x1e4>)
 80073aa:	f7fe fc68 	bl	8005c7e <memchr>
 80073ae:	9a04      	ldr	r2, [sp, #16]
 80073b0:	b9d8      	cbnz	r0, 80073ea <_svfiprintf_r+0xea>
 80073b2:	06d0      	lsls	r0, r2, #27
 80073b4:	bf44      	itt	mi
 80073b6:	2320      	movmi	r3, #32
 80073b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073bc:	0711      	lsls	r1, r2, #28
 80073be:	bf44      	itt	mi
 80073c0:	232b      	movmi	r3, #43	@ 0x2b
 80073c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073c6:	f89a 3000 	ldrb.w	r3, [sl]
 80073ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80073cc:	d015      	beq.n	80073fa <_svfiprintf_r+0xfa>
 80073ce:	4654      	mov	r4, sl
 80073d0:	2000      	movs	r0, #0
 80073d2:	f04f 0c0a 	mov.w	ip, #10
 80073d6:	9a07      	ldr	r2, [sp, #28]
 80073d8:	4621      	mov	r1, r4
 80073da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073de:	3b30      	subs	r3, #48	@ 0x30
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	d94b      	bls.n	800747c <_svfiprintf_r+0x17c>
 80073e4:	b1b0      	cbz	r0, 8007414 <_svfiprintf_r+0x114>
 80073e6:	9207      	str	r2, [sp, #28]
 80073e8:	e014      	b.n	8007414 <_svfiprintf_r+0x114>
 80073ea:	eba0 0308 	sub.w	r3, r0, r8
 80073ee:	fa09 f303 	lsl.w	r3, r9, r3
 80073f2:	4313      	orrs	r3, r2
 80073f4:	46a2      	mov	sl, r4
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	e7d2      	b.n	80073a0 <_svfiprintf_r+0xa0>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	1d19      	adds	r1, r3, #4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	9103      	str	r1, [sp, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	bfbb      	ittet	lt
 8007406:	425b      	neglt	r3, r3
 8007408:	f042 0202 	orrlt.w	r2, r2, #2
 800740c:	9307      	strge	r3, [sp, #28]
 800740e:	9307      	strlt	r3, [sp, #28]
 8007410:	bfb8      	it	lt
 8007412:	9204      	strlt	r2, [sp, #16]
 8007414:	7823      	ldrb	r3, [r4, #0]
 8007416:	2b2e      	cmp	r3, #46	@ 0x2e
 8007418:	d10a      	bne.n	8007430 <_svfiprintf_r+0x130>
 800741a:	7863      	ldrb	r3, [r4, #1]
 800741c:	2b2a      	cmp	r3, #42	@ 0x2a
 800741e:	d132      	bne.n	8007486 <_svfiprintf_r+0x186>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	3402      	adds	r4, #2
 8007424:	1d1a      	adds	r2, r3, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	9203      	str	r2, [sp, #12]
 800742a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800742e:	9305      	str	r3, [sp, #20]
 8007430:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80074e8 <_svfiprintf_r+0x1e8>
 8007434:	2203      	movs	r2, #3
 8007436:	4650      	mov	r0, sl
 8007438:	7821      	ldrb	r1, [r4, #0]
 800743a:	f7fe fc20 	bl	8005c7e <memchr>
 800743e:	b138      	cbz	r0, 8007450 <_svfiprintf_r+0x150>
 8007440:	2240      	movs	r2, #64	@ 0x40
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	eba0 000a 	sub.w	r0, r0, sl
 8007448:	4082      	lsls	r2, r0
 800744a:	4313      	orrs	r3, r2
 800744c:	3401      	adds	r4, #1
 800744e:	9304      	str	r3, [sp, #16]
 8007450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007454:	2206      	movs	r2, #6
 8007456:	4825      	ldr	r0, [pc, #148]	@ (80074ec <_svfiprintf_r+0x1ec>)
 8007458:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800745c:	f7fe fc0f 	bl	8005c7e <memchr>
 8007460:	2800      	cmp	r0, #0
 8007462:	d036      	beq.n	80074d2 <_svfiprintf_r+0x1d2>
 8007464:	4b22      	ldr	r3, [pc, #136]	@ (80074f0 <_svfiprintf_r+0x1f0>)
 8007466:	bb1b      	cbnz	r3, 80074b0 <_svfiprintf_r+0x1b0>
 8007468:	9b03      	ldr	r3, [sp, #12]
 800746a:	3307      	adds	r3, #7
 800746c:	f023 0307 	bic.w	r3, r3, #7
 8007470:	3308      	adds	r3, #8
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007476:	4433      	add	r3, r6
 8007478:	9309      	str	r3, [sp, #36]	@ 0x24
 800747a:	e76a      	b.n	8007352 <_svfiprintf_r+0x52>
 800747c:	460c      	mov	r4, r1
 800747e:	2001      	movs	r0, #1
 8007480:	fb0c 3202 	mla	r2, ip, r2, r3
 8007484:	e7a8      	b.n	80073d8 <_svfiprintf_r+0xd8>
 8007486:	2300      	movs	r3, #0
 8007488:	f04f 0c0a 	mov.w	ip, #10
 800748c:	4619      	mov	r1, r3
 800748e:	3401      	adds	r4, #1
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	4620      	mov	r0, r4
 8007494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007498:	3a30      	subs	r2, #48	@ 0x30
 800749a:	2a09      	cmp	r2, #9
 800749c:	d903      	bls.n	80074a6 <_svfiprintf_r+0x1a6>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0c6      	beq.n	8007430 <_svfiprintf_r+0x130>
 80074a2:	9105      	str	r1, [sp, #20]
 80074a4:	e7c4      	b.n	8007430 <_svfiprintf_r+0x130>
 80074a6:	4604      	mov	r4, r0
 80074a8:	2301      	movs	r3, #1
 80074aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ae:	e7f0      	b.n	8007492 <_svfiprintf_r+0x192>
 80074b0:	ab03      	add	r3, sp, #12
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	462a      	mov	r2, r5
 80074b6:	4638      	mov	r0, r7
 80074b8:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <_svfiprintf_r+0x1f4>)
 80074ba:	a904      	add	r1, sp, #16
 80074bc:	f7fd fe68 	bl	8005190 <_printf_float>
 80074c0:	1c42      	adds	r2, r0, #1
 80074c2:	4606      	mov	r6, r0
 80074c4:	d1d6      	bne.n	8007474 <_svfiprintf_r+0x174>
 80074c6:	89ab      	ldrh	r3, [r5, #12]
 80074c8:	065b      	lsls	r3, r3, #25
 80074ca:	f53f af2d 	bmi.w	8007328 <_svfiprintf_r+0x28>
 80074ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074d0:	e72c      	b.n	800732c <_svfiprintf_r+0x2c>
 80074d2:	ab03      	add	r3, sp, #12
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	462a      	mov	r2, r5
 80074d8:	4638      	mov	r0, r7
 80074da:	4b06      	ldr	r3, [pc, #24]	@ (80074f4 <_svfiprintf_r+0x1f4>)
 80074dc:	a904      	add	r1, sp, #16
 80074de:	f7fe f8f5 	bl	80056cc <_printf_i>
 80074e2:	e7ed      	b.n	80074c0 <_svfiprintf_r+0x1c0>
 80074e4:	0800812c 	.word	0x0800812c
 80074e8:	08008132 	.word	0x08008132
 80074ec:	08008136 	.word	0x08008136
 80074f0:	08005191 	.word	0x08005191
 80074f4:	08007249 	.word	0x08007249

080074f8 <__sflush_r>:
 80074f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	0716      	lsls	r6, r2, #28
 8007500:	4605      	mov	r5, r0
 8007502:	460c      	mov	r4, r1
 8007504:	d454      	bmi.n	80075b0 <__sflush_r+0xb8>
 8007506:	684b      	ldr	r3, [r1, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	dc02      	bgt.n	8007512 <__sflush_r+0x1a>
 800750c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	dd48      	ble.n	80075a4 <__sflush_r+0xac>
 8007512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007514:	2e00      	cmp	r6, #0
 8007516:	d045      	beq.n	80075a4 <__sflush_r+0xac>
 8007518:	2300      	movs	r3, #0
 800751a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800751e:	682f      	ldr	r7, [r5, #0]
 8007520:	6a21      	ldr	r1, [r4, #32]
 8007522:	602b      	str	r3, [r5, #0]
 8007524:	d030      	beq.n	8007588 <__sflush_r+0x90>
 8007526:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	0759      	lsls	r1, r3, #29
 800752c:	d505      	bpl.n	800753a <__sflush_r+0x42>
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	1ad2      	subs	r2, r2, r3
 8007532:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007534:	b10b      	cbz	r3, 800753a <__sflush_r+0x42>
 8007536:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007538:	1ad2      	subs	r2, r2, r3
 800753a:	2300      	movs	r3, #0
 800753c:	4628      	mov	r0, r5
 800753e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007540:	6a21      	ldr	r1, [r4, #32]
 8007542:	47b0      	blx	r6
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	d106      	bne.n	8007558 <__sflush_r+0x60>
 800754a:	6829      	ldr	r1, [r5, #0]
 800754c:	291d      	cmp	r1, #29
 800754e:	d82b      	bhi.n	80075a8 <__sflush_r+0xb0>
 8007550:	4a28      	ldr	r2, [pc, #160]	@ (80075f4 <__sflush_r+0xfc>)
 8007552:	40ca      	lsrs	r2, r1
 8007554:	07d6      	lsls	r6, r2, #31
 8007556:	d527      	bpl.n	80075a8 <__sflush_r+0xb0>
 8007558:	2200      	movs	r2, #0
 800755a:	6062      	str	r2, [r4, #4]
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	04d9      	lsls	r1, r3, #19
 8007560:	6022      	str	r2, [r4, #0]
 8007562:	d504      	bpl.n	800756e <__sflush_r+0x76>
 8007564:	1c42      	adds	r2, r0, #1
 8007566:	d101      	bne.n	800756c <__sflush_r+0x74>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b903      	cbnz	r3, 800756e <__sflush_r+0x76>
 800756c:	6560      	str	r0, [r4, #84]	@ 0x54
 800756e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007570:	602f      	str	r7, [r5, #0]
 8007572:	b1b9      	cbz	r1, 80075a4 <__sflush_r+0xac>
 8007574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007578:	4299      	cmp	r1, r3
 800757a:	d002      	beq.n	8007582 <__sflush_r+0x8a>
 800757c:	4628      	mov	r0, r5
 800757e:	f7ff f9eb 	bl	8006958 <_free_r>
 8007582:	2300      	movs	r3, #0
 8007584:	6363      	str	r3, [r4, #52]	@ 0x34
 8007586:	e00d      	b.n	80075a4 <__sflush_r+0xac>
 8007588:	2301      	movs	r3, #1
 800758a:	4628      	mov	r0, r5
 800758c:	47b0      	blx	r6
 800758e:	4602      	mov	r2, r0
 8007590:	1c50      	adds	r0, r2, #1
 8007592:	d1c9      	bne.n	8007528 <__sflush_r+0x30>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0c6      	beq.n	8007528 <__sflush_r+0x30>
 800759a:	2b1d      	cmp	r3, #29
 800759c:	d001      	beq.n	80075a2 <__sflush_r+0xaa>
 800759e:	2b16      	cmp	r3, #22
 80075a0:	d11d      	bne.n	80075de <__sflush_r+0xe6>
 80075a2:	602f      	str	r7, [r5, #0]
 80075a4:	2000      	movs	r0, #0
 80075a6:	e021      	b.n	80075ec <__sflush_r+0xf4>
 80075a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ac:	b21b      	sxth	r3, r3
 80075ae:	e01a      	b.n	80075e6 <__sflush_r+0xee>
 80075b0:	690f      	ldr	r7, [r1, #16]
 80075b2:	2f00      	cmp	r7, #0
 80075b4:	d0f6      	beq.n	80075a4 <__sflush_r+0xac>
 80075b6:	0793      	lsls	r3, r2, #30
 80075b8:	bf18      	it	ne
 80075ba:	2300      	movne	r3, #0
 80075bc:	680e      	ldr	r6, [r1, #0]
 80075be:	bf08      	it	eq
 80075c0:	694b      	ldreq	r3, [r1, #20]
 80075c2:	1bf6      	subs	r6, r6, r7
 80075c4:	600f      	str	r7, [r1, #0]
 80075c6:	608b      	str	r3, [r1, #8]
 80075c8:	2e00      	cmp	r6, #0
 80075ca:	ddeb      	ble.n	80075a4 <__sflush_r+0xac>
 80075cc:	4633      	mov	r3, r6
 80075ce:	463a      	mov	r2, r7
 80075d0:	4628      	mov	r0, r5
 80075d2:	6a21      	ldr	r1, [r4, #32]
 80075d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80075d8:	47e0      	blx	ip
 80075da:	2800      	cmp	r0, #0
 80075dc:	dc07      	bgt.n	80075ee <__sflush_r+0xf6>
 80075de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ee:	4407      	add	r7, r0
 80075f0:	1a36      	subs	r6, r6, r0
 80075f2:	e7e9      	b.n	80075c8 <__sflush_r+0xd0>
 80075f4:	20400001 	.word	0x20400001

080075f8 <_fflush_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	690b      	ldr	r3, [r1, #16]
 80075fc:	4605      	mov	r5, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	b913      	cbnz	r3, 8007608 <_fflush_r+0x10>
 8007602:	2500      	movs	r5, #0
 8007604:	4628      	mov	r0, r5
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	b118      	cbz	r0, 8007612 <_fflush_r+0x1a>
 800760a:	6a03      	ldr	r3, [r0, #32]
 800760c:	b90b      	cbnz	r3, 8007612 <_fflush_r+0x1a>
 800760e:	f7fe fa07 	bl	8005a20 <__sinit>
 8007612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0f3      	beq.n	8007602 <_fflush_r+0xa>
 800761a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800761c:	07d0      	lsls	r0, r2, #31
 800761e:	d404      	bmi.n	800762a <_fflush_r+0x32>
 8007620:	0599      	lsls	r1, r3, #22
 8007622:	d402      	bmi.n	800762a <_fflush_r+0x32>
 8007624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007626:	f7fe fb28 	bl	8005c7a <__retarget_lock_acquire_recursive>
 800762a:	4628      	mov	r0, r5
 800762c:	4621      	mov	r1, r4
 800762e:	f7ff ff63 	bl	80074f8 <__sflush_r>
 8007632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007634:	4605      	mov	r5, r0
 8007636:	07da      	lsls	r2, r3, #31
 8007638:	d4e4      	bmi.n	8007604 <_fflush_r+0xc>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	059b      	lsls	r3, r3, #22
 800763e:	d4e1      	bmi.n	8007604 <_fflush_r+0xc>
 8007640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007642:	f7fe fb1b 	bl	8005c7c <__retarget_lock_release_recursive>
 8007646:	e7dd      	b.n	8007604 <_fflush_r+0xc>

08007648 <memmove>:
 8007648:	4288      	cmp	r0, r1
 800764a:	b510      	push	{r4, lr}
 800764c:	eb01 0402 	add.w	r4, r1, r2
 8007650:	d902      	bls.n	8007658 <memmove+0x10>
 8007652:	4284      	cmp	r4, r0
 8007654:	4623      	mov	r3, r4
 8007656:	d807      	bhi.n	8007668 <memmove+0x20>
 8007658:	1e43      	subs	r3, r0, #1
 800765a:	42a1      	cmp	r1, r4
 800765c:	d008      	beq.n	8007670 <memmove+0x28>
 800765e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007666:	e7f8      	b.n	800765a <memmove+0x12>
 8007668:	4601      	mov	r1, r0
 800766a:	4402      	add	r2, r0
 800766c:	428a      	cmp	r2, r1
 800766e:	d100      	bne.n	8007672 <memmove+0x2a>
 8007670:	bd10      	pop	{r4, pc}
 8007672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800767a:	e7f7      	b.n	800766c <memmove+0x24>

0800767c <_sbrk_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	2300      	movs	r3, #0
 8007680:	4d05      	ldr	r5, [pc, #20]	@ (8007698 <_sbrk_r+0x1c>)
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7fa f986 	bl	8001998 <_sbrk>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_sbrk_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_sbrk_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	20001490 	.word	0x20001490

0800769c <memcpy>:
 800769c:	440a      	add	r2, r1
 800769e:	4291      	cmp	r1, r2
 80076a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a4:	d100      	bne.n	80076a8 <memcpy+0xc>
 80076a6:	4770      	bx	lr
 80076a8:	b510      	push	{r4, lr}
 80076aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ae:	4291      	cmp	r1, r2
 80076b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b4:	d1f9      	bne.n	80076aa <memcpy+0xe>
 80076b6:	bd10      	pop	{r4, pc}

080076b8 <__assert_func>:
 80076b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ba:	4614      	mov	r4, r2
 80076bc:	461a      	mov	r2, r3
 80076be:	4b09      	ldr	r3, [pc, #36]	@ (80076e4 <__assert_func+0x2c>)
 80076c0:	4605      	mov	r5, r0
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68d8      	ldr	r0, [r3, #12]
 80076c6:	b14c      	cbz	r4, 80076dc <__assert_func+0x24>
 80076c8:	4b07      	ldr	r3, [pc, #28]	@ (80076e8 <__assert_func+0x30>)
 80076ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076ce:	9100      	str	r1, [sp, #0]
 80076d0:	462b      	mov	r3, r5
 80076d2:	4906      	ldr	r1, [pc, #24]	@ (80076ec <__assert_func+0x34>)
 80076d4:	f000 f870 	bl	80077b8 <fiprintf>
 80076d8:	f000 f880 	bl	80077dc <abort>
 80076dc:	4b04      	ldr	r3, [pc, #16]	@ (80076f0 <__assert_func+0x38>)
 80076de:	461c      	mov	r4, r3
 80076e0:	e7f3      	b.n	80076ca <__assert_func+0x12>
 80076e2:	bf00      	nop
 80076e4:	2000001c 	.word	0x2000001c
 80076e8:	08008147 	.word	0x08008147
 80076ec:	08008154 	.word	0x08008154
 80076f0:	08008182 	.word	0x08008182

080076f4 <_calloc_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	fba1 5402 	umull	r5, r4, r1, r2
 80076fa:	b934      	cbnz	r4, 800770a <_calloc_r+0x16>
 80076fc:	4629      	mov	r1, r5
 80076fe:	f7ff f99d 	bl	8006a3c <_malloc_r>
 8007702:	4606      	mov	r6, r0
 8007704:	b928      	cbnz	r0, 8007712 <_calloc_r+0x1e>
 8007706:	4630      	mov	r0, r6
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	220c      	movs	r2, #12
 800770c:	2600      	movs	r6, #0
 800770e:	6002      	str	r2, [r0, #0]
 8007710:	e7f9      	b.n	8007706 <_calloc_r+0x12>
 8007712:	462a      	mov	r2, r5
 8007714:	4621      	mov	r1, r4
 8007716:	f7fe fa32 	bl	8005b7e <memset>
 800771a:	e7f4      	b.n	8007706 <_calloc_r+0x12>

0800771c <__ascii_mbtowc>:
 800771c:	b082      	sub	sp, #8
 800771e:	b901      	cbnz	r1, 8007722 <__ascii_mbtowc+0x6>
 8007720:	a901      	add	r1, sp, #4
 8007722:	b142      	cbz	r2, 8007736 <__ascii_mbtowc+0x1a>
 8007724:	b14b      	cbz	r3, 800773a <__ascii_mbtowc+0x1e>
 8007726:	7813      	ldrb	r3, [r2, #0]
 8007728:	600b      	str	r3, [r1, #0]
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	1e10      	subs	r0, r2, #0
 800772e:	bf18      	it	ne
 8007730:	2001      	movne	r0, #1
 8007732:	b002      	add	sp, #8
 8007734:	4770      	bx	lr
 8007736:	4610      	mov	r0, r2
 8007738:	e7fb      	b.n	8007732 <__ascii_mbtowc+0x16>
 800773a:	f06f 0001 	mvn.w	r0, #1
 800773e:	e7f8      	b.n	8007732 <__ascii_mbtowc+0x16>

08007740 <_realloc_r>:
 8007740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007744:	4607      	mov	r7, r0
 8007746:	4614      	mov	r4, r2
 8007748:	460d      	mov	r5, r1
 800774a:	b921      	cbnz	r1, 8007756 <_realloc_r+0x16>
 800774c:	4611      	mov	r1, r2
 800774e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007752:	f7ff b973 	b.w	8006a3c <_malloc_r>
 8007756:	b92a      	cbnz	r2, 8007764 <_realloc_r+0x24>
 8007758:	f7ff f8fe 	bl	8006958 <_free_r>
 800775c:	4625      	mov	r5, r4
 800775e:	4628      	mov	r0, r5
 8007760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007764:	f000 f841 	bl	80077ea <_malloc_usable_size_r>
 8007768:	4284      	cmp	r4, r0
 800776a:	4606      	mov	r6, r0
 800776c:	d802      	bhi.n	8007774 <_realloc_r+0x34>
 800776e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007772:	d8f4      	bhi.n	800775e <_realloc_r+0x1e>
 8007774:	4621      	mov	r1, r4
 8007776:	4638      	mov	r0, r7
 8007778:	f7ff f960 	bl	8006a3c <_malloc_r>
 800777c:	4680      	mov	r8, r0
 800777e:	b908      	cbnz	r0, 8007784 <_realloc_r+0x44>
 8007780:	4645      	mov	r5, r8
 8007782:	e7ec      	b.n	800775e <_realloc_r+0x1e>
 8007784:	42b4      	cmp	r4, r6
 8007786:	4622      	mov	r2, r4
 8007788:	4629      	mov	r1, r5
 800778a:	bf28      	it	cs
 800778c:	4632      	movcs	r2, r6
 800778e:	f7ff ff85 	bl	800769c <memcpy>
 8007792:	4629      	mov	r1, r5
 8007794:	4638      	mov	r0, r7
 8007796:	f7ff f8df 	bl	8006958 <_free_r>
 800779a:	e7f1      	b.n	8007780 <_realloc_r+0x40>

0800779c <__ascii_wctomb>:
 800779c:	4603      	mov	r3, r0
 800779e:	4608      	mov	r0, r1
 80077a0:	b141      	cbz	r1, 80077b4 <__ascii_wctomb+0x18>
 80077a2:	2aff      	cmp	r2, #255	@ 0xff
 80077a4:	d904      	bls.n	80077b0 <__ascii_wctomb+0x14>
 80077a6:	228a      	movs	r2, #138	@ 0x8a
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	4770      	bx	lr
 80077b0:	2001      	movs	r0, #1
 80077b2:	700a      	strb	r2, [r1, #0]
 80077b4:	4770      	bx	lr
	...

080077b8 <fiprintf>:
 80077b8:	b40e      	push	{r1, r2, r3}
 80077ba:	b503      	push	{r0, r1, lr}
 80077bc:	4601      	mov	r1, r0
 80077be:	ab03      	add	r3, sp, #12
 80077c0:	4805      	ldr	r0, [pc, #20]	@ (80077d8 <fiprintf+0x20>)
 80077c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c6:	6800      	ldr	r0, [r0, #0]
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	f000 f83d 	bl	8007848 <_vfiprintf_r>
 80077ce:	b002      	add	sp, #8
 80077d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d4:	b003      	add	sp, #12
 80077d6:	4770      	bx	lr
 80077d8:	2000001c 	.word	0x2000001c

080077dc <abort>:
 80077dc:	2006      	movs	r0, #6
 80077de:	b508      	push	{r3, lr}
 80077e0:	f000 fa06 	bl	8007bf0 <raise>
 80077e4:	2001      	movs	r0, #1
 80077e6:	f7fa f87e 	bl	80018e6 <_exit>

080077ea <_malloc_usable_size_r>:
 80077ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ee:	1f18      	subs	r0, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bfbc      	itt	lt
 80077f4:	580b      	ldrlt	r3, [r1, r0]
 80077f6:	18c0      	addlt	r0, r0, r3
 80077f8:	4770      	bx	lr

080077fa <__sfputc_r>:
 80077fa:	6893      	ldr	r3, [r2, #8]
 80077fc:	b410      	push	{r4}
 80077fe:	3b01      	subs	r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	6093      	str	r3, [r2, #8]
 8007804:	da07      	bge.n	8007816 <__sfputc_r+0x1c>
 8007806:	6994      	ldr	r4, [r2, #24]
 8007808:	42a3      	cmp	r3, r4
 800780a:	db01      	blt.n	8007810 <__sfputc_r+0x16>
 800780c:	290a      	cmp	r1, #10
 800780e:	d102      	bne.n	8007816 <__sfputc_r+0x1c>
 8007810:	bc10      	pop	{r4}
 8007812:	f000 b931 	b.w	8007a78 <__swbuf_r>
 8007816:	6813      	ldr	r3, [r2, #0]
 8007818:	1c58      	adds	r0, r3, #1
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	7019      	strb	r1, [r3, #0]
 800781e:	4608      	mov	r0, r1
 8007820:	bc10      	pop	{r4}
 8007822:	4770      	bx	lr

08007824 <__sfputs_r>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	4606      	mov	r6, r0
 8007828:	460f      	mov	r7, r1
 800782a:	4614      	mov	r4, r2
 800782c:	18d5      	adds	r5, r2, r3
 800782e:	42ac      	cmp	r4, r5
 8007830:	d101      	bne.n	8007836 <__sfputs_r+0x12>
 8007832:	2000      	movs	r0, #0
 8007834:	e007      	b.n	8007846 <__sfputs_r+0x22>
 8007836:	463a      	mov	r2, r7
 8007838:	4630      	mov	r0, r6
 800783a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783e:	f7ff ffdc 	bl	80077fa <__sfputc_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d1f3      	bne.n	800782e <__sfputs_r+0xa>
 8007846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007848 <_vfiprintf_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	460d      	mov	r5, r1
 800784e:	4614      	mov	r4, r2
 8007850:	4698      	mov	r8, r3
 8007852:	4606      	mov	r6, r0
 8007854:	b09d      	sub	sp, #116	@ 0x74
 8007856:	b118      	cbz	r0, 8007860 <_vfiprintf_r+0x18>
 8007858:	6a03      	ldr	r3, [r0, #32]
 800785a:	b90b      	cbnz	r3, 8007860 <_vfiprintf_r+0x18>
 800785c:	f7fe f8e0 	bl	8005a20 <__sinit>
 8007860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007862:	07d9      	lsls	r1, r3, #31
 8007864:	d405      	bmi.n	8007872 <_vfiprintf_r+0x2a>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	059a      	lsls	r2, r3, #22
 800786a:	d402      	bmi.n	8007872 <_vfiprintf_r+0x2a>
 800786c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800786e:	f7fe fa04 	bl	8005c7a <__retarget_lock_acquire_recursive>
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	071b      	lsls	r3, r3, #28
 8007876:	d501      	bpl.n	800787c <_vfiprintf_r+0x34>
 8007878:	692b      	ldr	r3, [r5, #16]
 800787a:	b99b      	cbnz	r3, 80078a4 <_vfiprintf_r+0x5c>
 800787c:	4629      	mov	r1, r5
 800787e:	4630      	mov	r0, r6
 8007880:	f000 f938 	bl	8007af4 <__swsetup_r>
 8007884:	b170      	cbz	r0, 80078a4 <_vfiprintf_r+0x5c>
 8007886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007888:	07dc      	lsls	r4, r3, #31
 800788a:	d504      	bpl.n	8007896 <_vfiprintf_r+0x4e>
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	b01d      	add	sp, #116	@ 0x74
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	0598      	lsls	r0, r3, #22
 800789a:	d4f7      	bmi.n	800788c <_vfiprintf_r+0x44>
 800789c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800789e:	f7fe f9ed 	bl	8005c7c <__retarget_lock_release_recursive>
 80078a2:	e7f3      	b.n	800788c <_vfiprintf_r+0x44>
 80078a4:	2300      	movs	r3, #0
 80078a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078a8:	2320      	movs	r3, #32
 80078aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ae:	2330      	movs	r3, #48	@ 0x30
 80078b0:	f04f 0901 	mov.w	r9, #1
 80078b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80078b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007a64 <_vfiprintf_r+0x21c>
 80078bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078c0:	4623      	mov	r3, r4
 80078c2:	469a      	mov	sl, r3
 80078c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c8:	b10a      	cbz	r2, 80078ce <_vfiprintf_r+0x86>
 80078ca:	2a25      	cmp	r2, #37	@ 0x25
 80078cc:	d1f9      	bne.n	80078c2 <_vfiprintf_r+0x7a>
 80078ce:	ebba 0b04 	subs.w	fp, sl, r4
 80078d2:	d00b      	beq.n	80078ec <_vfiprintf_r+0xa4>
 80078d4:	465b      	mov	r3, fp
 80078d6:	4622      	mov	r2, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ffa2 	bl	8007824 <__sfputs_r>
 80078e0:	3001      	adds	r0, #1
 80078e2:	f000 80a7 	beq.w	8007a34 <_vfiprintf_r+0x1ec>
 80078e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e8:	445a      	add	r2, fp
 80078ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ec:	f89a 3000 	ldrb.w	r3, [sl]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 809f 	beq.w	8007a34 <_vfiprintf_r+0x1ec>
 80078f6:	2300      	movs	r3, #0
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295
 80078fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007900:	f10a 0a01 	add.w	sl, sl, #1
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800790c:	931a      	str	r3, [sp, #104]	@ 0x68
 800790e:	4654      	mov	r4, sl
 8007910:	2205      	movs	r2, #5
 8007912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007916:	4853      	ldr	r0, [pc, #332]	@ (8007a64 <_vfiprintf_r+0x21c>)
 8007918:	f7fe f9b1 	bl	8005c7e <memchr>
 800791c:	9a04      	ldr	r2, [sp, #16]
 800791e:	b9d8      	cbnz	r0, 8007958 <_vfiprintf_r+0x110>
 8007920:	06d1      	lsls	r1, r2, #27
 8007922:	bf44      	itt	mi
 8007924:	2320      	movmi	r3, #32
 8007926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800792a:	0713      	lsls	r3, r2, #28
 800792c:	bf44      	itt	mi
 800792e:	232b      	movmi	r3, #43	@ 0x2b
 8007930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007934:	f89a 3000 	ldrb.w	r3, [sl]
 8007938:	2b2a      	cmp	r3, #42	@ 0x2a
 800793a:	d015      	beq.n	8007968 <_vfiprintf_r+0x120>
 800793c:	4654      	mov	r4, sl
 800793e:	2000      	movs	r0, #0
 8007940:	f04f 0c0a 	mov.w	ip, #10
 8007944:	9a07      	ldr	r2, [sp, #28]
 8007946:	4621      	mov	r1, r4
 8007948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800794c:	3b30      	subs	r3, #48	@ 0x30
 800794e:	2b09      	cmp	r3, #9
 8007950:	d94b      	bls.n	80079ea <_vfiprintf_r+0x1a2>
 8007952:	b1b0      	cbz	r0, 8007982 <_vfiprintf_r+0x13a>
 8007954:	9207      	str	r2, [sp, #28]
 8007956:	e014      	b.n	8007982 <_vfiprintf_r+0x13a>
 8007958:	eba0 0308 	sub.w	r3, r0, r8
 800795c:	fa09 f303 	lsl.w	r3, r9, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	46a2      	mov	sl, r4
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	e7d2      	b.n	800790e <_vfiprintf_r+0xc6>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	1d19      	adds	r1, r3, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	9103      	str	r1, [sp, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bfbb      	ittet	lt
 8007974:	425b      	neglt	r3, r3
 8007976:	f042 0202 	orrlt.w	r2, r2, #2
 800797a:	9307      	strge	r3, [sp, #28]
 800797c:	9307      	strlt	r3, [sp, #28]
 800797e:	bfb8      	it	lt
 8007980:	9204      	strlt	r2, [sp, #16]
 8007982:	7823      	ldrb	r3, [r4, #0]
 8007984:	2b2e      	cmp	r3, #46	@ 0x2e
 8007986:	d10a      	bne.n	800799e <_vfiprintf_r+0x156>
 8007988:	7863      	ldrb	r3, [r4, #1]
 800798a:	2b2a      	cmp	r3, #42	@ 0x2a
 800798c:	d132      	bne.n	80079f4 <_vfiprintf_r+0x1ac>
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	3402      	adds	r4, #2
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	9203      	str	r2, [sp, #12]
 8007998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800799c:	9305      	str	r3, [sp, #20]
 800799e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007a68 <_vfiprintf_r+0x220>
 80079a2:	2203      	movs	r2, #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	7821      	ldrb	r1, [r4, #0]
 80079a8:	f7fe f969 	bl	8005c7e <memchr>
 80079ac:	b138      	cbz	r0, 80079be <_vfiprintf_r+0x176>
 80079ae:	2240      	movs	r2, #64	@ 0x40
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	eba0 000a 	sub.w	r0, r0, sl
 80079b6:	4082      	lsls	r2, r0
 80079b8:	4313      	orrs	r3, r2
 80079ba:	3401      	adds	r4, #1
 80079bc:	9304      	str	r3, [sp, #16]
 80079be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c2:	2206      	movs	r2, #6
 80079c4:	4829      	ldr	r0, [pc, #164]	@ (8007a6c <_vfiprintf_r+0x224>)
 80079c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079ca:	f7fe f958 	bl	8005c7e <memchr>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d03f      	beq.n	8007a52 <_vfiprintf_r+0x20a>
 80079d2:	4b27      	ldr	r3, [pc, #156]	@ (8007a70 <_vfiprintf_r+0x228>)
 80079d4:	bb1b      	cbnz	r3, 8007a1e <_vfiprintf_r+0x1d6>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	3307      	adds	r3, #7
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	3308      	adds	r3, #8
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e4:	443b      	add	r3, r7
 80079e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e8:	e76a      	b.n	80078c0 <_vfiprintf_r+0x78>
 80079ea:	460c      	mov	r4, r1
 80079ec:	2001      	movs	r0, #1
 80079ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80079f2:	e7a8      	b.n	8007946 <_vfiprintf_r+0xfe>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f04f 0c0a 	mov.w	ip, #10
 80079fa:	4619      	mov	r1, r3
 80079fc:	3401      	adds	r4, #1
 80079fe:	9305      	str	r3, [sp, #20]
 8007a00:	4620      	mov	r0, r4
 8007a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a06:	3a30      	subs	r2, #48	@ 0x30
 8007a08:	2a09      	cmp	r2, #9
 8007a0a:	d903      	bls.n	8007a14 <_vfiprintf_r+0x1cc>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0c6      	beq.n	800799e <_vfiprintf_r+0x156>
 8007a10:	9105      	str	r1, [sp, #20]
 8007a12:	e7c4      	b.n	800799e <_vfiprintf_r+0x156>
 8007a14:	4604      	mov	r4, r0
 8007a16:	2301      	movs	r3, #1
 8007a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a1c:	e7f0      	b.n	8007a00 <_vfiprintf_r+0x1b8>
 8007a1e:	ab03      	add	r3, sp, #12
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	462a      	mov	r2, r5
 8007a24:	4630      	mov	r0, r6
 8007a26:	4b13      	ldr	r3, [pc, #76]	@ (8007a74 <_vfiprintf_r+0x22c>)
 8007a28:	a904      	add	r1, sp, #16
 8007a2a:	f7fd fbb1 	bl	8005190 <_printf_float>
 8007a2e:	4607      	mov	r7, r0
 8007a30:	1c78      	adds	r0, r7, #1
 8007a32:	d1d6      	bne.n	80079e2 <_vfiprintf_r+0x19a>
 8007a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a36:	07d9      	lsls	r1, r3, #31
 8007a38:	d405      	bmi.n	8007a46 <_vfiprintf_r+0x1fe>
 8007a3a:	89ab      	ldrh	r3, [r5, #12]
 8007a3c:	059a      	lsls	r2, r3, #22
 8007a3e:	d402      	bmi.n	8007a46 <_vfiprintf_r+0x1fe>
 8007a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a42:	f7fe f91b 	bl	8005c7c <__retarget_lock_release_recursive>
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	065b      	lsls	r3, r3, #25
 8007a4a:	f53f af1f 	bmi.w	800788c <_vfiprintf_r+0x44>
 8007a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a50:	e71e      	b.n	8007890 <_vfiprintf_r+0x48>
 8007a52:	ab03      	add	r3, sp, #12
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	462a      	mov	r2, r5
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <_vfiprintf_r+0x22c>)
 8007a5c:	a904      	add	r1, sp, #16
 8007a5e:	f7fd fe35 	bl	80056cc <_printf_i>
 8007a62:	e7e4      	b.n	8007a2e <_vfiprintf_r+0x1e6>
 8007a64:	0800812c 	.word	0x0800812c
 8007a68:	08008132 	.word	0x08008132
 8007a6c:	08008136 	.word	0x08008136
 8007a70:	08005191 	.word	0x08005191
 8007a74:	08007825 	.word	0x08007825

08007a78 <__swbuf_r>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	460e      	mov	r6, r1
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4605      	mov	r5, r0
 8007a80:	b118      	cbz	r0, 8007a8a <__swbuf_r+0x12>
 8007a82:	6a03      	ldr	r3, [r0, #32]
 8007a84:	b90b      	cbnz	r3, 8007a8a <__swbuf_r+0x12>
 8007a86:	f7fd ffcb 	bl	8005a20 <__sinit>
 8007a8a:	69a3      	ldr	r3, [r4, #24]
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	071a      	lsls	r2, r3, #28
 8007a92:	d501      	bpl.n	8007a98 <__swbuf_r+0x20>
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	b943      	cbnz	r3, 8007aaa <__swbuf_r+0x32>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f000 f82a 	bl	8007af4 <__swsetup_r>
 8007aa0:	b118      	cbz	r0, 8007aaa <__swbuf_r+0x32>
 8007aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	6922      	ldr	r2, [r4, #16]
 8007aae:	b2f6      	uxtb	r6, r6
 8007ab0:	1a98      	subs	r0, r3, r2
 8007ab2:	6963      	ldr	r3, [r4, #20]
 8007ab4:	4637      	mov	r7, r6
 8007ab6:	4283      	cmp	r3, r0
 8007ab8:	dc05      	bgt.n	8007ac6 <__swbuf_r+0x4e>
 8007aba:	4621      	mov	r1, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	f7ff fd9b 	bl	80075f8 <_fflush_r>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d1ed      	bne.n	8007aa2 <__swbuf_r+0x2a>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	60a3      	str	r3, [r4, #8]
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	6022      	str	r2, [r4, #0]
 8007ad2:	701e      	strb	r6, [r3, #0]
 8007ad4:	6962      	ldr	r2, [r4, #20]
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d004      	beq.n	8007ae6 <__swbuf_r+0x6e>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	07db      	lsls	r3, r3, #31
 8007ae0:	d5e1      	bpl.n	8007aa6 <__swbuf_r+0x2e>
 8007ae2:	2e0a      	cmp	r6, #10
 8007ae4:	d1df      	bne.n	8007aa6 <__swbuf_r+0x2e>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7ff fd85 	bl	80075f8 <_fflush_r>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d0d9      	beq.n	8007aa6 <__swbuf_r+0x2e>
 8007af2:	e7d6      	b.n	8007aa2 <__swbuf_r+0x2a>

08007af4 <__swsetup_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4b29      	ldr	r3, [pc, #164]	@ (8007b9c <__swsetup_r+0xa8>)
 8007af8:	4605      	mov	r5, r0
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	460c      	mov	r4, r1
 8007afe:	b118      	cbz	r0, 8007b08 <__swsetup_r+0x14>
 8007b00:	6a03      	ldr	r3, [r0, #32]
 8007b02:	b90b      	cbnz	r3, 8007b08 <__swsetup_r+0x14>
 8007b04:	f7fd ff8c 	bl	8005a20 <__sinit>
 8007b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0c:	0719      	lsls	r1, r3, #28
 8007b0e:	d422      	bmi.n	8007b56 <__swsetup_r+0x62>
 8007b10:	06da      	lsls	r2, r3, #27
 8007b12:	d407      	bmi.n	8007b24 <__swsetup_r+0x30>
 8007b14:	2209      	movs	r2, #9
 8007b16:	602a      	str	r2, [r5, #0]
 8007b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	e033      	b.n	8007b8c <__swsetup_r+0x98>
 8007b24:	0758      	lsls	r0, r3, #29
 8007b26:	d512      	bpl.n	8007b4e <__swsetup_r+0x5a>
 8007b28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b2a:	b141      	cbz	r1, 8007b3e <__swsetup_r+0x4a>
 8007b2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b30:	4299      	cmp	r1, r3
 8007b32:	d002      	beq.n	8007b3a <__swsetup_r+0x46>
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7fe ff0f 	bl	8006958 <_free_r>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	2300      	movs	r3, #0
 8007b48:	6063      	str	r3, [r4, #4]
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f043 0308 	orr.w	r3, r3, #8
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	b94b      	cbnz	r3, 8007b6e <__swsetup_r+0x7a>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b64:	d003      	beq.n	8007b6e <__swsetup_r+0x7a>
 8007b66:	4621      	mov	r1, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f000 f882 	bl	8007c72 <__smakebuf_r>
 8007b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b72:	f013 0201 	ands.w	r2, r3, #1
 8007b76:	d00a      	beq.n	8007b8e <__swsetup_r+0x9a>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	60a2      	str	r2, [r4, #8]
 8007b7c:	6962      	ldr	r2, [r4, #20]
 8007b7e:	4252      	negs	r2, r2
 8007b80:	61a2      	str	r2, [r4, #24]
 8007b82:	6922      	ldr	r2, [r4, #16]
 8007b84:	b942      	cbnz	r2, 8007b98 <__swsetup_r+0xa4>
 8007b86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b8a:	d1c5      	bne.n	8007b18 <__swsetup_r+0x24>
 8007b8c:	bd38      	pop	{r3, r4, r5, pc}
 8007b8e:	0799      	lsls	r1, r3, #30
 8007b90:	bf58      	it	pl
 8007b92:	6962      	ldrpl	r2, [r4, #20]
 8007b94:	60a2      	str	r2, [r4, #8]
 8007b96:	e7f4      	b.n	8007b82 <__swsetup_r+0x8e>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e7f7      	b.n	8007b8c <__swsetup_r+0x98>
 8007b9c:	2000001c 	.word	0x2000001c

08007ba0 <_raise_r>:
 8007ba0:	291f      	cmp	r1, #31
 8007ba2:	b538      	push	{r3, r4, r5, lr}
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	d904      	bls.n	8007bb4 <_raise_r+0x14>
 8007baa:	2316      	movs	r3, #22
 8007bac:	6003      	str	r3, [r0, #0]
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bb6:	b112      	cbz	r2, 8007bbe <_raise_r+0x1e>
 8007bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bbc:	b94b      	cbnz	r3, 8007bd2 <_raise_r+0x32>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 f830 	bl	8007c24 <_getpid_r>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	4628      	mov	r0, r5
 8007bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bce:	f000 b817 	b.w	8007c00 <_kill_r>
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d00a      	beq.n	8007bec <_raise_r+0x4c>
 8007bd6:	1c59      	adds	r1, r3, #1
 8007bd8:	d103      	bne.n	8007be2 <_raise_r+0x42>
 8007bda:	2316      	movs	r3, #22
 8007bdc:	6003      	str	r3, [r0, #0]
 8007bde:	2001      	movs	r0, #1
 8007be0:	e7e7      	b.n	8007bb2 <_raise_r+0x12>
 8007be2:	2100      	movs	r1, #0
 8007be4:	4620      	mov	r0, r4
 8007be6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007bea:	4798      	blx	r3
 8007bec:	2000      	movs	r0, #0
 8007bee:	e7e0      	b.n	8007bb2 <_raise_r+0x12>

08007bf0 <raise>:
 8007bf0:	4b02      	ldr	r3, [pc, #8]	@ (8007bfc <raise+0xc>)
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f7ff bfd3 	b.w	8007ba0 <_raise_r>
 8007bfa:	bf00      	nop
 8007bfc:	2000001c 	.word	0x2000001c

08007c00 <_kill_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	2300      	movs	r3, #0
 8007c04:	4d06      	ldr	r5, [pc, #24]	@ (8007c20 <_kill_r+0x20>)
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	f7f9 fe5a 	bl	80018c6 <_kill>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d102      	bne.n	8007c1c <_kill_r+0x1c>
 8007c16:	682b      	ldr	r3, [r5, #0]
 8007c18:	b103      	cbz	r3, 8007c1c <_kill_r+0x1c>
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	bf00      	nop
 8007c20:	20001490 	.word	0x20001490

08007c24 <_getpid_r>:
 8007c24:	f7f9 be48 	b.w	80018b8 <_getpid>

08007c28 <__swhatbuf_r>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c30:	4615      	mov	r5, r2
 8007c32:	2900      	cmp	r1, #0
 8007c34:	461e      	mov	r6, r3
 8007c36:	b096      	sub	sp, #88	@ 0x58
 8007c38:	da0c      	bge.n	8007c54 <__swhatbuf_r+0x2c>
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c42:	bf14      	ite	ne
 8007c44:	2340      	movne	r3, #64	@ 0x40
 8007c46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	6031      	str	r1, [r6, #0]
 8007c4e:	602b      	str	r3, [r5, #0]
 8007c50:	b016      	add	sp, #88	@ 0x58
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	466a      	mov	r2, sp
 8007c56:	f000 f849 	bl	8007cec <_fstat_r>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	dbed      	blt.n	8007c3a <__swhatbuf_r+0x12>
 8007c5e:	9901      	ldr	r1, [sp, #4]
 8007c60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c68:	4259      	negs	r1, r3
 8007c6a:	4159      	adcs	r1, r3
 8007c6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c70:	e7eb      	b.n	8007c4a <__swhatbuf_r+0x22>

08007c72 <__smakebuf_r>:
 8007c72:	898b      	ldrh	r3, [r1, #12]
 8007c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c76:	079d      	lsls	r5, r3, #30
 8007c78:	4606      	mov	r6, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	d507      	bpl.n	8007c8e <__smakebuf_r+0x1c>
 8007c7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c82:	6023      	str	r3, [r4, #0]
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	2301      	movs	r3, #1
 8007c88:	6163      	str	r3, [r4, #20]
 8007c8a:	b003      	add	sp, #12
 8007c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8e:	466a      	mov	r2, sp
 8007c90:	ab01      	add	r3, sp, #4
 8007c92:	f7ff ffc9 	bl	8007c28 <__swhatbuf_r>
 8007c96:	9f00      	ldr	r7, [sp, #0]
 8007c98:	4605      	mov	r5, r0
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7fe fecd 	bl	8006a3c <_malloc_r>
 8007ca2:	b948      	cbnz	r0, 8007cb8 <__smakebuf_r+0x46>
 8007ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca8:	059a      	lsls	r2, r3, #22
 8007caa:	d4ee      	bmi.n	8007c8a <__smakebuf_r+0x18>
 8007cac:	f023 0303 	bic.w	r3, r3, #3
 8007cb0:	f043 0302 	orr.w	r3, r3, #2
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	e7e2      	b.n	8007c7e <__smakebuf_r+0xc>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	6020      	str	r0, [r4, #0]
 8007cc8:	b15b      	cbz	r3, 8007ce2 <__smakebuf_r+0x70>
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd0:	f000 f81e 	bl	8007d10 <_isatty_r>
 8007cd4:	b128      	cbz	r0, 8007ce2 <__smakebuf_r+0x70>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f023 0303 	bic.w	r3, r3, #3
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	431d      	orrs	r5, r3
 8007ce6:	81a5      	strh	r5, [r4, #12]
 8007ce8:	e7cf      	b.n	8007c8a <__smakebuf_r+0x18>
	...

08007cec <_fstat_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	2300      	movs	r3, #0
 8007cf0:	4d06      	ldr	r5, [pc, #24]	@ (8007d0c <_fstat_r+0x20>)
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	602b      	str	r3, [r5, #0]
 8007cfa:	f7f9 fe27 	bl	800194c <_fstat>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d102      	bne.n	8007d08 <_fstat_r+0x1c>
 8007d02:	682b      	ldr	r3, [r5, #0]
 8007d04:	b103      	cbz	r3, 8007d08 <_fstat_r+0x1c>
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	bd38      	pop	{r3, r4, r5, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20001490 	.word	0x20001490

08007d10 <_isatty_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	2300      	movs	r3, #0
 8007d14:	4d05      	ldr	r5, [pc, #20]	@ (8007d2c <_isatty_r+0x1c>)
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	f7f9 fe25 	bl	800196a <_isatty>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_isatty_r+0x1a>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_isatty_r+0x1a>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	20001490 	.word	0x20001490

08007d30 <sqrtf>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	f000 f884 	bl	8007e40 <__ieee754_sqrtf>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f7f9 f9c7 	bl	80010d0 <__aeabi_fcmpun>
 8007d42:	b968      	cbnz	r0, 8007d60 <sqrtf+0x30>
 8007d44:	2100      	movs	r1, #0
 8007d46:	4628      	mov	r0, r5
 8007d48:	f7f9 f99a 	bl	8001080 <__aeabi_fcmplt>
 8007d4c:	b140      	cbz	r0, 8007d60 <sqrtf+0x30>
 8007d4e:	f7fd ff69 	bl	8005c24 <__errno>
 8007d52:	2321      	movs	r3, #33	@ 0x21
 8007d54:	2100      	movs	r1, #0
 8007d56:	6003      	str	r3, [r0, #0]
 8007d58:	4608      	mov	r0, r1
 8007d5a:	f7f9 f8a7 	bl	8000eac <__aeabi_fdiv>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4620      	mov	r0, r4
 8007d62:	bd38      	pop	{r3, r4, r5, pc}

08007d64 <fmax>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	4604      	mov	r4, r0
 8007d68:	460d      	mov	r5, r1
 8007d6a:	4616      	mov	r6, r2
 8007d6c:	461f      	mov	r7, r3
 8007d6e:	f000 f815 	bl	8007d9c <__fpclassifyd>
 8007d72:	b920      	cbnz	r0, 8007d7e <fmax+0x1a>
 8007d74:	4634      	mov	r4, r6
 8007d76:	463d      	mov	r5, r7
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4639      	mov	r1, r7
 8007d82:	f000 f80b 	bl	8007d9c <__fpclassifyd>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d0f6      	beq.n	8007d78 <fmax+0x14>
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 fe31 	bl	80009f8 <__aeabi_dcmpgt>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0ec      	beq.n	8007d74 <fmax+0x10>
 8007d9a:	e7ed      	b.n	8007d78 <fmax+0x14>

08007d9c <__fpclassifyd>:
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8007da2:	b510      	push	{r4, lr}
 8007da4:	d104      	bne.n	8007db0 <__fpclassifyd+0x14>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	bf0c      	ite	eq
 8007daa:	2002      	moveq	r0, #2
 8007dac:	2003      	movne	r0, #3
 8007dae:	bd10      	pop	{r4, pc}
 8007db0:	4a09      	ldr	r2, [pc, #36]	@ (8007dd8 <__fpclassifyd+0x3c>)
 8007db2:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8007db6:	4294      	cmp	r4, r2
 8007db8:	d908      	bls.n	8007dcc <__fpclassifyd+0x30>
 8007dba:	4a08      	ldr	r2, [pc, #32]	@ (8007ddc <__fpclassifyd+0x40>)
 8007dbc:	4213      	tst	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <__fpclassifyd+0x34>
 8007dc0:	4291      	cmp	r1, r2
 8007dc2:	d107      	bne.n	8007dd4 <__fpclassifyd+0x38>
 8007dc4:	fab0 f080 	clz	r0, r0
 8007dc8:	0940      	lsrs	r0, r0, #5
 8007dca:	e7f0      	b.n	8007dae <__fpclassifyd+0x12>
 8007dcc:	2004      	movs	r0, #4
 8007dce:	e7ee      	b.n	8007dae <__fpclassifyd+0x12>
 8007dd0:	2003      	movs	r0, #3
 8007dd2:	e7ec      	b.n	8007dae <__fpclassifyd+0x12>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e7ea      	b.n	8007dae <__fpclassifyd+0x12>
 8007dd8:	7fdfffff 	.word	0x7fdfffff
 8007ddc:	7ff00000 	.word	0x7ff00000

08007de0 <fminf>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	f000 f811 	bl	8007e0c <__fpclassifyf>
 8007dea:	b910      	cbnz	r0, 8007df2 <fminf+0x12>
 8007dec:	462c      	mov	r4, r5
 8007dee:	4620      	mov	r0, r4
 8007df0:	bd38      	pop	{r3, r4, r5, pc}
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 f80a 	bl	8007e0c <__fpclassifyf>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d0f8      	beq.n	8007dee <fminf+0xe>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f7f9 f93e 	bl	8001080 <__aeabi_fcmplt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d0f1      	beq.n	8007dec <fminf+0xc>
 8007e08:	e7f1      	b.n	8007dee <fminf+0xe>
	...

08007e0c <__fpclassifyf>:
 8007e0c:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8007e10:	d00d      	beq.n	8007e2e <__fpclassifyf+0x22>
 8007e12:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8007e16:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8007e1a:	d30a      	bcc.n	8007e32 <__fpclassifyf+0x26>
 8007e1c:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <__fpclassifyf+0x30>)
 8007e1e:	1e42      	subs	r2, r0, #1
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d908      	bls.n	8007e36 <__fpclassifyf+0x2a>
 8007e24:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8007e28:	4258      	negs	r0, r3
 8007e2a:	4158      	adcs	r0, r3
 8007e2c:	4770      	bx	lr
 8007e2e:	2002      	movs	r0, #2
 8007e30:	4770      	bx	lr
 8007e32:	2004      	movs	r0, #4
 8007e34:	4770      	bx	lr
 8007e36:	2003      	movs	r0, #3
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	007ffffe 	.word	0x007ffffe

08007e40 <__ieee754_sqrtf>:
 8007e40:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007e44:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4604      	mov	r4, r0
 8007e50:	d30a      	bcc.n	8007e68 <__ieee754_sqrtf+0x28>
 8007e52:	4601      	mov	r1, r0
 8007e54:	f7f8 ff76 	bl	8000d44 <__aeabi_fmul>
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7f8 fe6a 	bl	8000b34 <__addsf3>
 8007e60:	4604      	mov	r4, r0
 8007e62:	4620      	mov	r0, r4
 8007e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d0fa      	beq.n	8007e62 <__ieee754_sqrtf+0x22>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	da06      	bge.n	8007e7e <__ieee754_sqrtf+0x3e>
 8007e70:	4601      	mov	r1, r0
 8007e72:	f7f8 fe5d 	bl	8000b30 <__aeabi_fsub>
 8007e76:	4601      	mov	r1, r0
 8007e78:	f7f9 f818 	bl	8000eac <__aeabi_fdiv>
 8007e7c:	e7f0      	b.n	8007e60 <__ieee754_sqrtf+0x20>
 8007e7e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8007e82:	d03c      	beq.n	8007efe <__ieee754_sqrtf+0xbe>
 8007e84:	15c2      	asrs	r2, r0, #23
 8007e86:	2400      	movs	r4, #0
 8007e88:	2019      	movs	r0, #25
 8007e8a:	4626      	mov	r6, r4
 8007e8c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8007e90:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e94:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8007e98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e9c:	07d2      	lsls	r2, r2, #31
 8007e9e:	bf58      	it	pl
 8007ea0:	005b      	lslpl	r3, r3, #1
 8007ea2:	106d      	asrs	r5, r5, #1
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	1872      	adds	r2, r6, r1
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	bfcf      	iteee	gt
 8007eac:	461a      	movgt	r2, r3
 8007eae:	1856      	addle	r6, r2, r1
 8007eb0:	1864      	addle	r4, r4, r1
 8007eb2:	1a9a      	suble	r2, r3, r2
 8007eb4:	3801      	subs	r0, #1
 8007eb6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8007eba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007ebe:	d1f2      	bne.n	8007ea6 <__ieee754_sqrtf+0x66>
 8007ec0:	b1ba      	cbz	r2, 8007ef2 <__ieee754_sqrtf+0xb2>
 8007ec2:	4e15      	ldr	r6, [pc, #84]	@ (8007f18 <__ieee754_sqrtf+0xd8>)
 8007ec4:	4f15      	ldr	r7, [pc, #84]	@ (8007f1c <__ieee754_sqrtf+0xdc>)
 8007ec6:	6830      	ldr	r0, [r6, #0]
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	f7f8 fe31 	bl	8000b30 <__aeabi_fsub>
 8007ece:	f8d6 8000 	ldr.w	r8, [r6]
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	f7f9 f8dd 	bl	8001094 <__aeabi_fcmple>
 8007eda:	b150      	cbz	r0, 8007ef2 <__ieee754_sqrtf+0xb2>
 8007edc:	6830      	ldr	r0, [r6, #0]
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	f7f8 fe28 	bl	8000b34 <__addsf3>
 8007ee4:	6836      	ldr	r6, [r6, #0]
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7f9 f8c9 	bl	8001080 <__aeabi_fcmplt>
 8007eee:	b170      	cbz	r0, 8007f0e <__ieee754_sqrtf+0xce>
 8007ef0:	3402      	adds	r4, #2
 8007ef2:	1064      	asrs	r4, r4, #1
 8007ef4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8007ef8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8007efc:	e7b1      	b.n	8007e62 <__ieee754_sqrtf+0x22>
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	0218      	lsls	r0, r3, #8
 8007f02:	460a      	mov	r2, r1
 8007f04:	f101 0101 	add.w	r1, r1, #1
 8007f08:	d5f9      	bpl.n	8007efe <__ieee754_sqrtf+0xbe>
 8007f0a:	4252      	negs	r2, r2
 8007f0c:	e7bb      	b.n	8007e86 <__ieee754_sqrtf+0x46>
 8007f0e:	3401      	adds	r4, #1
 8007f10:	f024 0401 	bic.w	r4, r4, #1
 8007f14:	e7ed      	b.n	8007ef2 <__ieee754_sqrtf+0xb2>
 8007f16:	bf00      	nop
 8007f18:	08008388 	.word	0x08008388
 8007f1c:	08008384 	.word	0x08008384

08007f20 <_init>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	bf00      	nop
 8007f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f26:	bc08      	pop	{r3}
 8007f28:	469e      	mov	lr, r3
 8007f2a:	4770      	bx	lr

08007f2c <_fini>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	bf00      	nop
 8007f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f32:	bc08      	pop	{r3}
 8007f34:	469e      	mov	lr, r3
 8007f36:	4770      	bx	lr
